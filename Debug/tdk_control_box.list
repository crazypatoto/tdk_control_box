
tdk_control_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007284  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007468  08007468  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007470  08007470  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001334  20000180  080075f8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  080075f8  000214b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001740a  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e4  00000000  00000000  000375ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0003a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  0003b8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f3a  00000000  00000000  0003c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013985  00000000  00000000  00055732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebd8  00000000  00000000  000690b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7c8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e8  00000000  00000000  000f7ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000180 	.word	0x20000180
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007400 	.word	0x08007400

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000184 	.word	0x20000184
 80001d0:	08007400 	.word	0x08007400

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fadc 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f84a 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f954 	bl	8000784 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004dc:	f000 f8b2 	bl	8000644 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f006 fa4c 	bl	800697c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004e4:	2108      	movs	r1, #8
 80004e6:	481e      	ldr	r0, [pc, #120]	; (8000560 <main+0x94>)
 80004e8:	f002 fc78 	bl	8002ddc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2120      	movs	r1, #32
 80004f0:	481c      	ldr	r0, [pc, #112]	; (8000564 <main+0x98>)
 80004f2:	f000 fe0f 	bl	8001114 <HAL_GPIO_WritePin>
  TIM1->ARR = 1000000 / 261.1;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <main+0x9c>)
 80004f8:	f640 62f5 	movw	r2, #3829	; 0xef5
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(!HAL_GPIO_ReadPin(GPIOB, BTN_YELLOW_Pin)){
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4818      	ldr	r0, [pc, #96]	; (8000564 <main+0x98>)
 8000504:	f000 fdee 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d104      	bne.n	8000518 <main+0x4c>
			  TIM1->CCR3 = 32767;
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <main+0x9c>)
 8000510:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000514:	63da      	str	r2, [r3, #60]	; 0x3c
 8000516:	e002      	b.n	800051e <main+0x52>
		}else{
			TIM1->CCR3 = 0;
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <main+0x9c>)
 800051a:	2200      	movs	r2, #0
 800051c:	63da      	str	r2, [r3, #60]	; 0x3c
		}


		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin, !HAL_GPIO_ReadPin(GPIOB, BTN_YELLOW_Pin));
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	4810      	ldr	r0, [pc, #64]	; (8000564 <main+0x98>)
 8000524:	f000 fdde 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	bf0c      	ite	eq
 800052e:	2301      	moveq	r3, #1
 8000530:	2300      	movne	r3, #0
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	2108      	movs	r1, #8
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <main+0x98>)
 800053a:	f000 fdeb 	bl	8001114 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, !HAL_GPIO_ReadPin(GPIOB, BTN_GREEN_Pin));
 800053e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000542:	4808      	ldr	r0, [pc, #32]	; (8000564 <main+0x98>)
 8000544:	f000 fdce 	bl	80010e4 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	bf0c      	ite	eq
 800054e:	2301      	moveq	r3, #1
 8000550:	2300      	movne	r3, #0
 8000552:	b2db      	uxtb	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	2110      	movs	r1, #16
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <main+0x98>)
 800055a:	f000 fddb 	bl	8001114 <HAL_GPIO_WritePin>
		if(!HAL_GPIO_ReadPin(GPIOB, BTN_YELLOW_Pin)){
 800055e:	e7ce      	b.n	80004fe <main+0x32>
 8000560:	200003c0 	.word	0x200003c0
 8000564:	40020400 	.word	0x40020400
 8000568:	40010000 	.word	0x40010000

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 ff38 	bl	80073f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a28      	ldr	r2, [pc, #160]	; (800063c <SystemClock_Config+0xd0>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd4>)
 80005ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005e0:	2319      	movs	r3, #25
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 ff28 	bl	800244c <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 f941 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f002 f98a 	bl	800293c <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062e:	f000 f92b 	bl	8000888 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
 8000672:	615a      	str	r2, [r3, #20]
 8000674:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2220      	movs	r2, #32
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f006 feb7 	bl	80073f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000682:	4b3e      	ldr	r3, [pc, #248]	; (800077c <MX_TIM1_Init+0x138>)
 8000684:	4a3e      	ldr	r2, [pc, #248]	; (8000780 <MX_TIM1_Init+0x13c>)
 8000686:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000688:	4b3c      	ldr	r3, [pc, #240]	; (800077c <MX_TIM1_Init+0x138>)
 800068a:	2253      	movs	r2, #83	; 0x53
 800068c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	4b3b      	ldr	r3, [pc, #236]	; (800077c <MX_TIM1_Init+0x138>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <MX_TIM1_Init+0x138>)
 8000696:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800069a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <MX_TIM1_Init+0x138>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a2:	4b36      	ldr	r3, [pc, #216]	; (800077c <MX_TIM1_Init+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <MX_TIM1_Init+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ae:	4833      	ldr	r0, [pc, #204]	; (800077c <MX_TIM1_Init+0x138>)
 80006b0:	f002 faec 	bl	8002c8c <HAL_TIM_Base_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006ba:	f000 f8e5 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006c8:	4619      	mov	r1, r3
 80006ca:	482c      	ldr	r0, [pc, #176]	; (800077c <MX_TIM1_Init+0x138>)
 80006cc:	f002 fcf8 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006d6:	f000 f8d7 	bl	8000888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006da:	4828      	ldr	r0, [pc, #160]	; (800077c <MX_TIM1_Init+0x138>)
 80006dc:	f002 fb25 	bl	8002d2a <HAL_TIM_PWM_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006e6:	f000 f8cf 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f6:	4619      	mov	r1, r3
 80006f8:	4820      	ldr	r0, [pc, #128]	; (800077c <MX_TIM1_Init+0x138>)
 80006fa:	f003 f875 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000704:	f000 f8c0 	bl	8000888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000708:	2360      	movs	r3, #96	; 0x60
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000714:	2300      	movs	r3, #0
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000728:	2208      	movs	r2, #8
 800072a:	4619      	mov	r1, r3
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <MX_TIM1_Init+0x138>)
 800072e:	f002 fc05 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000738:	f000 f8a6 	bl	8000888 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <MX_TIM1_Init+0x138>)
 8000760:	f003 f8b0 	bl	80038c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800076a:	f000 f88d 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <MX_TIM1_Init+0x138>)
 8000770:	f000 f8e2 	bl	8000938 <HAL_TIM_MspPostInit>

}
 8000774:	bf00      	nop
 8000776:	3758      	adds	r7, #88	; 0x58
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200003c0 	.word	0x200003c0
 8000780:	40010000 	.word	0x40010000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b37      	ldr	r3, [pc, #220]	; (800087c <MX_GPIO_Init+0xf8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a36      	ldr	r2, [pc, #216]	; (800087c <MX_GPIO_Init+0xf8>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b34      	ldr	r3, [pc, #208]	; (800087c <MX_GPIO_Init+0xf8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_GPIO_Init+0xf8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <MX_GPIO_Init+0xf8>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xf8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_GPIO_Init+0xf8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a28      	ldr	r2, [pc, #160]	; (800087c <MX_GPIO_Init+0xf8>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0xf8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_GPIO_Init+0xf8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a21      	ldr	r2, [pc, #132]	; (800087c <MX_GPIO_Init+0xf8>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_GPIO_Init+0xf8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	481b      	ldr	r0, [pc, #108]	; (8000880 <MX_GPIO_Init+0xfc>)
 8000812:	f000 fc7f 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2138      	movs	r1, #56	; 0x38
 800081a:	481a      	ldr	r0, [pc, #104]	; (8000884 <MX_GPIO_Init+0x100>)
 800081c:	f000 fc7a 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_GPIO_Init+0xfc>)
 800083a:	f000 facf 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_GREEN_Pin BTN_YELLOW_Pin */
  GPIO_InitStruct.Pin = BTN_GREEN_Pin|BTN_YELLOW_Pin;
 800083e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0x100>)
 8000854:	f000 fac2 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_YELLOW_Pin LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_Pin;
 8000858:	2338      	movs	r3, #56	; 0x38
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_GPIO_Init+0x100>)
 8000870:	f000 fab4 	bl	8000ddc <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020800 	.word	0x40020800
 8000884:	40020400 	.word	0x40020400

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	4802      	ldr	r0, [pc, #8]	; (80008a0 <Error_Handler+0x18>)
 8000898:	f000 fc3c 	bl	8001114 <HAL_GPIO_WritePin>
 800089c:	e7f8      	b.n	8000890 <Error_Handler+0x8>
 800089e:	bf00      	nop
 80008a0:	40020800 	.word	0x40020800

080008a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <HAL_TIM_Base_MspInit+0x3c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10d      	bne.n	8000922 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_TIM_Base_MspInit+0x40>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <HAL_TIM_Base_MspInit+0x40>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_TIM_Base_MspInit+0x40>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40010000 	.word	0x40010000
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <HAL_TIM_MspPostInit+0x68>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d11e      	bne.n	8000998 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_TIM_MspPostInit+0x6c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_TIM_MspPostInit+0x6c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_TIM_MspPostInit+0x6c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000988:	2301      	movs	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_TIM_MspPostInit+0x70>)
 8000994:	f000 fa22 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40010000 	.word	0x40010000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f89a 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <OTG_FS_IRQHandler+0x10>)
 8000a06:	f000 fcee 	bl	80013e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200010ac 	.word	0x200010ac

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a62:	f7ff ffd7 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f006 fc9f 	bl	80073a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fd2f 	bl	80004cc <main>
  bx  lr    
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000a7c:	08007478 	.word	0x08007478
  ldr r2, =_sbss
 8000a80:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000a84:	200014b4 	.word	0x200014b4

08000a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <HAL_Init+0x40>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_Init+0x40>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x40>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f94f 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f808 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff fef0 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f967 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 f92f 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000408 	.word	0x20000408

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000408 	.word	0x20000408

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	e159      	b.n	80010ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8148 	bne.w	80010a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d130      	bne.n	8000e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d017      	beq.n	8000ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d123      	bne.n	8000f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80a2 	beq.w	80010a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a56      	ldr	r2, [pc, #344]	; (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b54      	ldr	r3, [pc, #336]	; (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a52      	ldr	r2, [pc, #328]	; (80010c8 <HAL_GPIO_Init+0x2ec>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a49      	ldr	r2, [pc, #292]	; (80010cc <HAL_GPIO_Init+0x2f0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d019      	beq.n	8000fde <HAL_GPIO_Init+0x202>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <HAL_GPIO_Init+0x2f4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x1fe>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a47      	ldr	r2, [pc, #284]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x1fa>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a46      	ldr	r2, [pc, #280]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a45      	ldr	r2, [pc, #276]	; (80010dc <HAL_GPIO_Init+0x300>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x1f2>
 8000fca:	2304      	movs	r3, #4
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fce:	2307      	movs	r3, #7
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x2ec>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001022:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_GPIO_Init+0x304>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_GPIO_Init+0x304>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_GPIO_Init+0x304>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_GPIO_Init+0x304>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f aea2 	bls.w	8000df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40013c00 	.word	0x40013c00

080010e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e001      	b.n	8001106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001148:	b08f      	sub	sp, #60	; 0x3c
 800114a:	af0a      	add	r7, sp, #40	; 0x28
 800114c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e10f      	b.n	8001378 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f005 fe0e 	bl	8006d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fcfb 	bl	8003b92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	687e      	ldr	r6, [r7, #4]
 80011a4:	466d      	mov	r5, sp
 80011a6:	f106 0410 	add.w	r4, r6, #16
 80011aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80011ba:	1d33      	adds	r3, r6, #4
 80011bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011be:	6838      	ldr	r0, [r7, #0]
 80011c0:	f002 fbd2 	bl	8003968 <USB_CoreInit>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2202      	movs	r2, #2
 80011ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e0d0      	b.n	8001378 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fce9 	bl	8003bb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e04a      	b.n	800127e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	333d      	adds	r3, #61	; 0x3d
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	333c      	adds	r3, #60	; 0x3c
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	b298      	uxth	r0, r3
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	1a9b      	subs	r3, r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	3342      	adds	r3, #66	; 0x42
 8001224:	4602      	mov	r2, r0
 8001226:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	333f      	adds	r3, #63	; 0x3f
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	3344      	adds	r3, #68	; 0x44
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	3348      	adds	r3, #72	; 0x48
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3350      	adds	r3, #80	; 0x50
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3af      	bcc.n	80011e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e044      	b.n	8001318 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	1a9b      	subs	r3, r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d3b5      	bcc.n	800128e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	687e      	ldr	r6, [r7, #4]
 800132a:	466d      	mov	r5, sp
 800132c:	f106 0410 	add.w	r4, r6, #16
 8001330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001338:	e894 0003 	ldmia.w	r4, {r0, r1}
 800133c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001340:	1d33      	adds	r3, r6, #4
 8001342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001344:	6838      	ldr	r0, [r7, #0]
 8001346:	f002 fc81 	bl	8003c4c <USB_DevInit>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2202      	movs	r2, #2
 8001354:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e00d      	b.n	8001378 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fcfd 	bl	8004d70 <USB_DevDisconnect>

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001380 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_PCD_Start+0x1c>
 8001398:	2302      	movs	r3, #2
 800139a:	e020      	b.n	80013de <HAL_PCD_Start+0x5e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d109      	bne.n	80013c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d005      	beq.n	80013c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fbd3 	bl	8003b70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 fcad 	bl	8004d2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013e6:	b590      	push	{r4, r7, lr}
 80013e8:	b08d      	sub	sp, #52	; 0x34
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fd6b 	bl	8004ed8 <USB_GetMode>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	f040 839d 	bne.w	8001b44 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fccf 	bl	8004db2 <USB_ReadInterrupts>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8393 	beq.w	8001b42 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fcc6 	bl	8004db2 <USB_ReadInterrupts>
 8001426:	4603      	mov	r3, r0
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b02      	cmp	r3, #2
 800142e:	d107      	bne.n	8001440 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f002 0202 	and.w	r2, r2, #2
 800143e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fcb4 	bl	8004db2 <USB_ReadInterrupts>
 800144a:	4603      	mov	r3, r0
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b10      	cmp	r3, #16
 8001452:	d161      	bne.n	8001518 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0210 	bic.w	r2, r2, #16
 8001462:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	f003 020f 	and.w	r2, r3, #15
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	1a9b      	subs	r3, r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	0c5b      	lsrs	r3, r3, #17
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	2b02      	cmp	r3, #2
 800148e:	d124      	bne.n	80014da <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d035      	beq.n	8001508 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	6a38      	ldr	r0, [r7, #32]
 80014b0:	f003 faeb 	bl	8004a8a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c0:	441a      	add	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d2:	441a      	add	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	619a      	str	r2, [r3, #24]
 80014d8:	e016      	b.n	8001508 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	0c5b      	lsrs	r3, r3, #17
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d110      	bne.n	8001508 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	6a38      	ldr	r0, [r7, #32]
 80014f2:	f003 faca 	bl	8004a8a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001502:	441a      	add	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0210 	orr.w	r2, r2, #16
 8001516:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fc48 	bl	8004db2 <USB_ReadInterrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001528:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800152c:	d16e      	bne.n	800160c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fc4e 	bl	8004dd8 <USB_ReadDevAllOutEpInterrupt>
 800153c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800153e:	e062      	b.n	8001606 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d057      	beq.n	80015fa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fc73 	bl	8004e40 <USB_ReadDevOutEPInterrupt>
 800155a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001572:	461a      	mov	r2, r3
 8001574:	2301      	movs	r3, #1
 8001576:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fdb0 	bl	80020e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00c      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001596:	461a      	mov	r2, r3
 8001598:	2308      	movs	r3, #8
 800159a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800159c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 feaa 	bl	80022f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ba:	461a      	mov	r2, r3
 80015bc:	2310      	movs	r3, #16
 80015be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d6:	461a      	mov	r2, r3
 80015d8:	2320      	movs	r3, #32
 80015da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f2:	461a      	mov	r2, r3
 80015f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d199      	bne.n	8001540 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fbce 	bl	8004db2 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001620:	f040 80c0 	bne.w	80017a4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fbef 	bl	8004e0c <USB_ReadDevAllInEpInterrupt>
 800162e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001634:	e0b2      	b.n	800179c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a7 	beq.w	8001790 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fc15 	bl	8004e7c <USB_ReadDevInEPInterrupt>
 8001652:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d057      	beq.n	800170e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	2201      	movs	r2, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	69f9      	ldr	r1, [r7, #28]
 800167a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800167e:	4013      	ands	r3, r2
 8001680:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168e:	461a      	mov	r2, r3
 8001690:	2301      	movs	r3, #1
 8001692:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d132      	bne.n	8001702 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3348      	adds	r3, #72	; 0x48
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4403      	add	r3, r0
 80016bc:	3344      	adds	r3, #68	; 0x44
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4419      	add	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4403      	add	r3, r0
 80016d0:	3348      	adds	r3, #72	; 0x48
 80016d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d113      	bne.n	8001702 <HAL_PCD_IRQHandler+0x31c>
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	3350      	adds	r3, #80	; 0x50
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d108      	bne.n	8001702 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016fa:	461a      	mov	r2, r3
 80016fc:	2101      	movs	r1, #1
 80016fe:	f003 fc1d 	bl	8004f3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f005 fbc4 	bl	8006e96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	015a      	lsls	r2, r3, #5
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001724:	461a      	mov	r2, r3
 8001726:	2308      	movs	r3, #8
 8001728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001740:	461a      	mov	r2, r3
 8001742:	2310      	movs	r3, #16
 8001744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800175c:	461a      	mov	r2, r3
 800175e:	2340      	movs	r3, #64	; 0x40
 8001760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	015a      	lsls	r2, r3, #5
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	4413      	add	r3, r2
 8001774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001778:	461a      	mov	r2, r3
 800177a:	2302      	movs	r3, #2
 800177c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fc1b 	bl	8001fc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	3301      	adds	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f47f af49 	bne.w	8001636 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fb02 	bl	8004db2 <USB_ReadInterrupts>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017b8:	d122      	bne.n	8001800 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d108      	bne.n	80017ea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017e0:	2100      	movs	r1, #0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fe26 	bl	8002434 <HAL_PCDEx_LPM_Callback>
 80017e8:	e002      	b.n	80017f0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f005 fbc0 	bl	8006f70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fad4 	bl	8004db2 <USB_ReadInterrupts>
 800180a:	4603      	mov	r3, r0
 800180c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001814:	d112      	bne.n	800183c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f005 fb7c 	bl	8006f24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800183a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fab6 	bl	8004db2 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800184c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001850:	f040 80c7 	bne.w	80019e2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2110      	movs	r1, #16
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fb50 	bl	8003f14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001878:	e056      	b.n	8001928 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001886:	461a      	mov	r2, r3
 8001888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800188c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	0151      	lsls	r1, r2, #5
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	440a      	add	r2, r1
 80018a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018ac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018be:	0151      	lsls	r1, r2, #5
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	440a      	add	r2, r1
 80018c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018da:	461a      	mov	r2, r3
 80018dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f2:	0151      	lsls	r1, r2, #5
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	440a      	add	r2, r1
 80018f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001900:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001912:	0151      	lsls	r1, r2, #5
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	440a      	add	r2, r1
 8001918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800191c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001920:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	3301      	adds	r3, #1
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192e:	429a      	cmp	r2, r3
 8001930:	d3a3      	bcc.n	800187a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001940:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001944:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	2b00      	cmp	r3, #0
 800194c:	d016      	beq.n	800197c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195e:	f043 030b 	orr.w	r3, r3, #11
 8001962:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001974:	f043 030b 	orr.w	r3, r3, #11
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	e015      	b.n	80019a8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800198e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001992:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a2:	f043 030b 	orr.w	r3, r3, #11
 80019a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019cc:	461a      	mov	r2, r3
 80019ce:	f003 fab5 	bl	8004f3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f9e3 	bl	8004db2 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f6:	d124      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fa79 	bl	8004ef4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fae1 	bl	8003fce <USB_GetDevSpeed>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681c      	ldr	r4, [r3, #0]
 8001a18:	f001 f92c 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	4620      	mov	r0, r4
 8001a28:	f002 f800 	bl	8003a2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f005 fa5a 	bl	8006ee6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f9b3 	bl	8004db2 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d10a      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f005 fa37 	bl	8006eca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f002 0208 	and.w	r2, r2, #8
 8001a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 f99e 	bl	8004db2 <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a80:	d10f      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f005 fa8f 	bl	8006fb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 f983 	bl	8004db2 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ab6:	d10f      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f005 fa62 	bl	8006f8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 f968 	bl	8004db2 <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d10a      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f005 fa70 	bl	8006fd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 f952 	bl	8004db2 <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d115      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f005 fa60 	bl	8006ff0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	e000      	b.n	8001b44 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b42:	bf00      	nop
    }
  }
}
 8001b44:	3734      	adds	r7, #52	; 0x34
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd90      	pop	{r4, r7, pc}

08001b4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_PCD_SetAddress+0x1a>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e013      	b.n	8001b8c <HAL_PCD_SetAddress+0x42>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 f8b0 	bl	8004ce2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	803b      	strh	r3, [r7, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	da0f      	bge.n	8001bda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 020f 	and.w	r2, r3, #15
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	3338      	adds	r3, #56	; 0x38
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
 8001bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	705a      	strb	r2, [r3, #1]
 8001bd8:	e00f      	b.n	8001bfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 020f 	and.w	r2, r3, #15
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c06:	883a      	ldrh	r2, [r7, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	78ba      	ldrb	r2, [r7, #2]
 8001c10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	785b      	ldrb	r3, [r3, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c24:	78bb      	ldrb	r3, [r7, #2]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d102      	bne.n	8001c30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_PCD_EP_Open+0xaa>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e00e      	b.n	8001c5c <HAL_PCD_EP_Open+0xc8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 f9e3 	bl	8004018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	da0f      	bge.n	8001c98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	3338      	adds	r3, #56	; 0x38
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	705a      	strb	r2, [r3, #1]
 8001c96:	e00f      	b.n	8001cb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 020f 	and.w	r2, r3, #15
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	3304      	adds	r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_EP_Close+0x6e>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e00e      	b.n	8001cf0 <HAL_PCD_EP_Close+0x8c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 fa21 	bl	8004128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	460b      	mov	r3, r1
 8001d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	f003 020f 	and.w	r2, r3, #15
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2200      	movs	r2, #0
 8001d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	f002 fcfc 	bl	8004768 <USB_EP0StartXfer>
 8001d70:	e008      	b.n	8001d84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6979      	ldr	r1, [r7, #20]
 8001d80:	f002 faae 	bl	80042e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001db0:	681b      	ldr	r3, [r3, #0]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	3338      	adds	r3, #56	; 0x38
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6979      	ldr	r1, [r7, #20]
 8001e30:	f002 fc9a 	bl	8004768 <USB_EP0StartXfer>
 8001e34:	e008      	b.n	8001e48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	6979      	ldr	r1, [r7, #20]
 8001e44:	f002 fa4c 	bl	80042e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d901      	bls.n	8001e70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e050      	b.n	8001f12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da0f      	bge.n	8001e98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	3338      	adds	r3, #56	; 0x38
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	705a      	strb	r2, [r3, #1]
 8001e96:	e00d      	b.n	8001eb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_PCD_EP_SetStall+0x82>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e01e      	b.n	8001f12 <HAL_PCD_EP_SetStall+0xc0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68f9      	ldr	r1, [r7, #12]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fe29 	bl	8004b3a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10a      	bne.n	8001f08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	b2d9      	uxtb	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f02:	461a      	mov	r2, r3
 8001f04:	f003 f81a 	bl	8004f3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d901      	bls.n	8001f38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e042      	b.n	8001fbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da0f      	bge.n	8001f60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	3338      	adds	r3, #56	; 0x38
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	705a      	strb	r2, [r3, #1]
 8001f5e:	e00f      	b.n	8001f80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_PCD_EP_ClrStall+0x86>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e00e      	b.n	8001fbe <HAL_PCD_EP_ClrStall+0xa4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fe31 	bl	8004c16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b08a      	sub	sp, #40	; 0x28
 8001fca:	af02      	add	r7, sp, #8
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	3338      	adds	r3, #56	; 0x38
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	3304      	adds	r3, #4
 8001fec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d901      	bls.n	8001ffe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e06c      	b.n	80020d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	d902      	bls.n	800201a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3303      	adds	r3, #3
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002022:	e02b      	b.n	800207c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	429a      	cmp	r2, r3
 8002038:	d902      	bls.n	8002040 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3303      	adds	r3, #3
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68d9      	ldr	r1, [r3, #12]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002058:	b2db      	uxtb	r3, r3
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4603      	mov	r3, r0
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f002 fcd5 	bl	8004a0e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	441a      	add	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	441a      	add	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	b29b      	uxth	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	429a      	cmp	r2, r3
 8002090:	d809      	bhi.n	80020a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800209a:	429a      	cmp	r2, r3
 800209c:	d203      	bcs.n	80020a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1be      	bne.n	8002024 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d811      	bhi.n	80020d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	2201      	movs	r2, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	6939      	ldr	r1, [r7, #16]
 80020ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020d2:	4013      	ands	r3, r2
 80020d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	333c      	adds	r3, #60	; 0x3c
 80020f8:	3304      	adds	r3, #4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b01      	cmp	r3, #1
 8002114:	f040 80a0 	bne.w	8002258 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d015      	beq.n	800214e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002126:	4293      	cmp	r3, r2
 8002128:	f240 80dd 	bls.w	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80d7 	beq.w	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002144:	461a      	mov	r2, r3
 8002146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800214a:	6093      	str	r3, [r2, #8]
 800214c:	e0cb      	b.n	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	2320      	movs	r3, #32
 8002168:	6093      	str	r3, [r2, #8]
 800216a:	e0bc      	b.n	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 80b7 	bne.w	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d90f      	bls.n	80021a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	461a      	mov	r2, r3
 8002198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800219c:	6093      	str	r3, [r2, #8]
 800219e:	e0a2      	b.n	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	0159      	lsls	r1, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4403      	add	r3, r0
 80021d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4403      	add	r3, r0
 80021fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4419      	add	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4403      	add	r3, r0
 8002214:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002218:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d114      	bne.n	800224a <PCD_EP_OutXfrComplete_int+0x16a>
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d108      	bne.n	800224a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002242:	461a      	mov	r2, r3
 8002244:	2101      	movs	r1, #1
 8002246:	f002 fe79 	bl	8004f3c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f004 fe05 	bl	8006e60 <HAL_PCD_DataOutStageCallback>
 8002256:	e046      	b.n	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d124      	bne.n	80022aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800227c:	6093      	str	r3, [r2, #8]
 800227e:	e032      	b.n	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	2320      	movs	r3, #32
 800229a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f004 fddc 	bl	8006e60 <HAL_PCD_DataOutStageCallback>
 80022a8:	e01d      	b.n	80022e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d114      	bne.n	80022da <PCD_EP_OutXfrComplete_int+0x1fa>
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d108      	bne.n	80022da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022d2:	461a      	mov	r2, r3
 80022d4:	2100      	movs	r1, #0
 80022d6:	f002 fe31 	bl	8004f3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	4619      	mov	r1, r3
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f004 fdbd 	bl	8006e60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	4f54300a 	.word	0x4f54300a
 80022f4:	4f54310a 	.word	0x4f54310a

080022f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	333c      	adds	r3, #60	; 0x3c
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a15      	ldr	r2, [pc, #84]	; (8002380 <PCD_EP_OutSetupPacket_int+0x88>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d90e      	bls.n	800234c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002344:	461a      	mov	r2, r3
 8002346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f004 fd75 	bl	8006e3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <PCD_EP_OutSetupPacket_int+0x88>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d90c      	bls.n	8002374 <PCD_EP_OutSetupPacket_int+0x7c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d108      	bne.n	8002374 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800236c:	461a      	mov	r2, r3
 800236e:	2101      	movs	r1, #1
 8002370:	f002 fde4 	bl	8004f3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	4f54300a 	.word	0x4f54300a

08002384 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
 8002390:	4613      	mov	r3, r2
 8002392:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023a2:	883b      	ldrh	r3, [r7, #0]
 80023a4:	0419      	lsls	r1, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
 80023b0:	e028      	b.n	8002404 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	0c1b      	lsrs	r3, r3, #16
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	4413      	add	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e00d      	b.n	80023e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3340      	adds	r3, #64	; 0x40
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	3301      	adds	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3ec      	bcc.n	80023c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023ec:	883b      	ldrh	r3, [r7, #0]
 80023ee:	0418      	lsls	r0, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4302      	orrs	r2, r0
 80023fc:	3340      	adds	r3, #64	; 0x40
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e264      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d075      	beq.n	8002556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246a:	4ba3      	ldr	r3, [pc, #652]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d00c      	beq.n	8002490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002476:	4ba0      	ldr	r3, [pc, #640]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247e:	2b08      	cmp	r3, #8
 8002480:	d112      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002482:	4b9d      	ldr	r3, [pc, #628]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248e:	d10b      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	4b99      	ldr	r3, [pc, #612]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d05b      	beq.n	8002554 <HAL_RCC_OscConfig+0x108>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d157      	bne.n	8002554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e23f      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b0:	d106      	bne.n	80024c0 <HAL_RCC_OscConfig+0x74>
 80024b2:	4b91      	ldr	r3, [pc, #580]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a90      	ldr	r2, [pc, #576]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e01d      	b.n	80024fc <HAL_RCC_OscConfig+0xb0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x98>
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a8a      	ldr	r2, [pc, #552]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a87      	ldr	r2, [pc, #540]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0xb0>
 80024e4:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a83      	ldr	r2, [pc, #524]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a80      	ldr	r2, [pc, #512]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fb28 	bl	8000b58 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fb24 	bl	8000b58 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e204      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0xc0>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe fb14 	bl	8000b58 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe fb10 	bl	8000b58 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1f0      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0xe8>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d063      	beq.n	800262a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256e:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002576:	2b08      	cmp	r3, #8
 8002578:	d11c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257a:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d116      	bne.n	80025b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_RCC_OscConfig+0x152>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e1c4      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4952      	ldr	r1, [pc, #328]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b2:	e03a      	b.n	800262a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025bc:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_RCC_OscConfig+0x2b0>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fac9 	bl	8000b58 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ca:	f7fe fac5 	bl	8000b58 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e1a5      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4940      	ldr	r1, [pc, #256]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
 80025fc:	e015      	b.n	800262a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fe:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_OscConfig+0x2b0>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe faa8 	bl	8000b58 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260c:	f7fe faa4 	bl	8000b58 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e184      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d030      	beq.n	8002698 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_RCC_OscConfig+0x2b4>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7fe fa88 	bl	8000b58 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264c:	f7fe fa84 	bl	8000b58 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e164      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x200>
 800266a:	e015      	b.n	8002698 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266c:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCC_OscConfig+0x2b4>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002672:	f7fe fa71 	bl	8000b58 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267a:	f7fe fa6d 	bl	8000b58 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e14d      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a0 	beq.w	80027e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x2b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d121      	bne.n	8002726 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_RCC_OscConfig+0x2b8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_RCC_OscConfig+0x2b8>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fa33 	bl	8000b58 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	e011      	b.n	800271a <HAL_RCC_OscConfig+0x2ce>
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	42470000 	.word	0x42470000
 8002700:	42470e80 	.word	0x42470e80
 8002704:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe fa26 	bl	8000b58 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e106      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b85      	ldr	r3, [pc, #532]	; (8002930 <HAL_RCC_OscConfig+0x4e4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x2f0>
 800272e:	4b81      	ldr	r3, [pc, #516]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a80      	ldr	r2, [pc, #512]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
 800273a:	e01c      	b.n	8002776 <HAL_RCC_OscConfig+0x32a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x312>
 8002744:	4b7b      	ldr	r3, [pc, #492]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a7a      	ldr	r2, [pc, #488]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	4b78      	ldr	r3, [pc, #480]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a77      	ldr	r2, [pc, #476]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
 800275c:	e00b      	b.n	8002776 <HAL_RCC_OscConfig+0x32a>
 800275e:	4b75      	ldr	r3, [pc, #468]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a74      	ldr	r2, [pc, #464]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	4b72      	ldr	r3, [pc, #456]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4a71      	ldr	r2, [pc, #452]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002770:	f023 0304 	bic.w	r3, r3, #4
 8002774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d015      	beq.n	80027aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe f9eb 	bl	8000b58 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe f9e7 	bl	8000b58 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0c5      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	4b65      	ldr	r3, [pc, #404]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ee      	beq.n	8002786 <HAL_RCC_OscConfig+0x33a>
 80027a8:	e014      	b.n	80027d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027aa:	f7fe f9d5 	bl	8000b58 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe f9d1 	bl	8000b58 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0af      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c8:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ee      	bne.n	80027b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4b56      	ldr	r3, [pc, #344]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a55      	ldr	r2, [pc, #340]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 809b 	beq.w	8002926 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d05c      	beq.n	80028b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d141      	bne.n	8002888 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002804:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <HAL_RCC_OscConfig+0x4ec>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe f9a5 	bl	8000b58 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe f9a1 	bl	8000b58 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e081      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002824:	4b43      	ldr	r3, [pc, #268]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	019b      	lsls	r3, r3, #6
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	3b01      	subs	r3, #1
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	061b      	lsls	r3, r3, #24
 8002854:	4937      	ldr	r1, [pc, #220]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_RCC_OscConfig+0x4ec>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe f97a 	bl	8000b58 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe f976 	bl	8000b58 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e056      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x41c>
 8002886:	e04e      	b.n	8002926 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_RCC_OscConfig+0x4ec>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe f963 	bl	8000b58 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe f95f 	bl	8000b58 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e03f      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x44a>
 80028b4:	e037      	b.n	8002926 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e032      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_RCC_OscConfig+0x4e8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d028      	beq.n	8002922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d121      	bne.n	8002922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d11a      	bne.n	8002922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f2:	4013      	ands	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d111      	bne.n	8002922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	3b01      	subs	r3, #1
 800290c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40007000 	.word	0x40007000
 8002934:	40023800 	.word	0x40023800
 8002938:	42470060 	.word	0x42470060

0800293c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0cc      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b68      	ldr	r3, [pc, #416]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d90c      	bls.n	8002978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b8      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a8:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	494d      	ldr	r1, [pc, #308]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d044      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d119      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e06f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e067      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4934      	ldr	r1, [pc, #208]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe f894 	bl	8000b58 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7fe f890 	bl	8000b58 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e04f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 020c 	and.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1eb      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d20c      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e032      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4916      	ldr	r1, [pc, #88]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	490e      	ldr	r1, [pc, #56]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac2:	f000 f821 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	490a      	ldr	r1, [pc, #40]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fff4 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023c00 	.word	0x40023c00
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08007458 	.word	0x08007458
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b0e:	2100      	movs	r1, #0
 8002b10:	6079      	str	r1, [r7, #4]
 8002b12:	2100      	movs	r1, #0
 8002b14:	60f9      	str	r1, [r7, #12]
 8002b16:	2100      	movs	r1, #0
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1e:	4952      	ldr	r1, [pc, #328]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b20:	6889      	ldr	r1, [r1, #8]
 8002b22:	f001 010c 	and.w	r1, r1, #12
 8002b26:	2908      	cmp	r1, #8
 8002b28:	d00d      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x3e>
 8002b2a:	2908      	cmp	r1, #8
 8002b2c:	f200 8094 	bhi.w	8002c58 <HAL_RCC_GetSysClockFreq+0x150>
 8002b30:	2900      	cmp	r1, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x32>
 8002b34:	2904      	cmp	r1, #4
 8002b36:	d003      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x38>
 8002b38:	e08e      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b3a:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x164>)
 8002b3c:	60bb      	str	r3, [r7, #8]
       break;
 8002b3e:	e08e      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b42:	60bb      	str	r3, [r7, #8]
      break;
 8002b44:	e08b      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b46:	4948      	ldr	r1, [pc, #288]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b48:	6849      	ldr	r1, [r1, #4]
 8002b4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b50:	4945      	ldr	r1, [pc, #276]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b52:	6849      	ldr	r1, [r1, #4]
 8002b54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002b58:	2900      	cmp	r1, #0
 8002b5a:	d024      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5c:	4942      	ldr	r1, [pc, #264]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b5e:	6849      	ldr	r1, [r1, #4]
 8002b60:	0989      	lsrs	r1, r1, #6
 8002b62:	4608      	mov	r0, r1
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b6c:	f04f 0500 	mov.w	r5, #0
 8002b70:	ea00 0204 	and.w	r2, r0, r4
 8002b74:	ea01 0305 	and.w	r3, r1, r5
 8002b78:	493d      	ldr	r1, [pc, #244]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b7a:	fb01 f003 	mul.w	r0, r1, r3
 8002b7e:	2100      	movs	r1, #0
 8002b80:	fb01 f102 	mul.w	r1, r1, r2
 8002b84:	1844      	adds	r4, r0, r1
 8002b86:	493a      	ldr	r1, [pc, #232]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b88:	fba2 0101 	umull	r0, r1, r2, r1
 8002b8c:	1863      	adds	r3, r4, r1
 8002b8e:	4619      	mov	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	f7fd fb1c 	bl	80001d4 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e04a      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	461a      	mov	r2, r3
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	ea02 0400 	and.w	r4, r2, r0
 8002bbe:	ea03 0501 	and.w	r5, r3, r1
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	014b      	lsls	r3, r1, #5
 8002bd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bd4:	0142      	lsls	r2, r0, #5
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	1b00      	subs	r0, r0, r4
 8002bdc:	eb61 0105 	sbc.w	r1, r1, r5
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	018b      	lsls	r3, r1, #6
 8002bea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bee:	0182      	lsls	r2, r0, #6
 8002bf0:	1a12      	subs	r2, r2, r0
 8002bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf6:	f04f 0000 	mov.w	r0, #0
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	00d9      	lsls	r1, r3, #3
 8002c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c04:	00d0      	lsls	r0, r2, #3
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	1912      	adds	r2, r2, r4
 8002c0c:	eb45 0303 	adc.w	r3, r5, r3
 8002c10:	f04f 0000 	mov.w	r0, #0
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	0299      	lsls	r1, r3, #10
 8002c1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c1e:	0290      	lsls	r0, r2, #10
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	f7fd fad0 	bl	80001d4 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c54:	60bb      	str	r3, [r7, #8]
      break;
 8002c56:	e002      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x164>)
 8002c5a:	60bb      	str	r3, [r7, #8]
      break;
 8002c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bdb0      	pop	{r4, r5, r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	017d7840 	.word	0x017d7840

08002c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000000 	.word	0x20000000

08002c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e041      	b.n	8002d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fe1e 	bl	80008f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f000 fac0 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e041      	b.n	8002dc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f839 	bl	8002dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 fa71 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_TIM_PWM_Start+0x24>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e022      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d109      	bne.n	8002e1a <HAL_TIM_PWM_Start+0x3e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e015      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d109      	bne.n	8002e34 <HAL_TIM_PWM_Start+0x58>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e008      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e068      	b.n	8002f20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_PWM_Start+0x82>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e5c:	e013      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d104      	bne.n	8002e6e <HAL_TIM_PWM_Start+0x92>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e6c:	e00b      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Start+0xa2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7c:	e003      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fc84 	bl	800379c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <HAL_TIM_PWM_Start+0x14c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d107      	bne.n	8002eae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_TIM_PWM_Start+0x14c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d018      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d013      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_TIM_PWM_Start+0x150>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_TIM_PWM_Start+0x154>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_TIM_PWM_Start+0x158>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <HAL_TIM_PWM_Start+0x15c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b06      	cmp	r3, #6
 8002efa:	d010      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0c:	e007      	b.n	8002f1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40014000 	.word	0x40014000

08002f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ae      	b.n	80030b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f200 809f 	bhi.w	80030a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	080030a9 	.word	0x080030a9
 8002f78:	080030a9 	.word	0x080030a9
 8002f7c:	080030a9 	.word	0x080030a9
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	080030a9 	.word	0x080030a9
 8002f88:	080030a9 	.word	0x080030a9
 8002f8c:	080030a9 	.word	0x080030a9
 8002f90:	08003027 	.word	0x08003027
 8002f94:	080030a9 	.word	0x080030a9
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	080030a9 	.word	0x080030a9
 8002fa0:	08003067 	.word	0x08003067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f9d0 	bl	8003350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
      break;
 8002fe2:	e064      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fa16 	bl	800341c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
      break;
 8003024:	e043      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fa61 	bl	80034f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0204 	bic.w	r2, r2, #4
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
      break;
 8003064:	e023      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 faab 	bl	80035c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
      break;
 80030a6:	e002      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_ConfigClockSource+0x1c>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0b4      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x186>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003114:	d03e      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xd4>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	f200 8087 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	f000 8086 	beq.w	8003232 <HAL_TIM_ConfigClockSource+0x172>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d87f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d01a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xa6>
 8003130:	2b70      	cmp	r3, #112	; 0x70
 8003132:	d87b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d050      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x11a>
 8003138:	2b60      	cmp	r3, #96	; 0x60
 800313a:	d877      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d03c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0xfa>
 8003140:	2b50      	cmp	r3, #80	; 0x50
 8003142:	d873      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d058      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x13a>
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d86f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d064      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d86b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d060      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d867      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d05a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003164:	e062      	b.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f000 faf1 	bl	800375c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	609a      	str	r2, [r3, #8]
      break;
 8003192:	e04f      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f000 fada 	bl	800375c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b6:	609a      	str	r2, [r3, #8]
      break;
 80031b8:	e03c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 fa4e 	bl	8003668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2150      	movs	r1, #80	; 0x50
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 faa7 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 80031d8:	e02c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 fa6d 	bl	80036c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2160      	movs	r1, #96	; 0x60
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fa97 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 80031f8:	e01c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	461a      	mov	r2, r3
 8003208:	f000 fa2e 	bl	8003668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fa87 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 8003218:	e00c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 fa7e 	bl	8003726 <TIM_ITRx_SetConfig>
      break;
 800322a:	e003      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e000      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00f      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d00b      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a31      	ldr	r2, [pc, #196]	; (8003338 <TIM_Base_SetConfig+0xe8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a30      	ldr	r2, [pc, #192]	; (800333c <TIM_Base_SetConfig+0xec>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <TIM_Base_SetConfig+0xf0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d108      	bne.n	800329a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a25      	ldr	r2, [pc, #148]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <TIM_Base_SetConfig+0xe8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <TIM_Base_SetConfig+0xec>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a20      	ldr	r2, [pc, #128]	; (8003340 <TIM_Base_SetConfig+0xf0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <TIM_Base_SetConfig+0xf4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <TIM_Base_SetConfig+0xf8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1d      	ldr	r2, [pc, #116]	; (800334c <TIM_Base_SetConfig+0xfc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <TIM_Base_SetConfig+0xe4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00
 8003344:	40014000 	.word	0x40014000
 8003348:	40014400 	.word	0x40014400
 800334c:	40014800 	.word	0x40014800

08003350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0201 	bic.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 0302 	bic.w	r3, r3, #2
 8003398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <TIM_OC1_SetConfig+0xc8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0308 	bic.w	r3, r3, #8
 80033b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <TIM_OC1_SetConfig+0xc8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d111      	bne.n	80033f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40010000 	.word	0x40010000

0800341c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0210 	bic.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0320 	bic.w	r3, r3, #32
 8003466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <TIM_OC2_SetConfig+0xd4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d10d      	bne.n	8003498 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003496:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <TIM_OC2_SetConfig+0xd4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d113      	bne.n	80034c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40010000 	.word	0x40010000

080034f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800353c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <TIM_OC3_SetConfig+0xd0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10d      	bne.n	800356e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <TIM_OC3_SetConfig+0xd0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d113      	bne.n	800359e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800357c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40010000 	.word	0x40010000

080035c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	031b      	lsls	r3, r3, #12
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a10      	ldr	r2, [pc, #64]	; (8003664 <TIM_OC4_SetConfig+0x9c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d109      	bne.n	800363c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800362e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40010000 	.word	0x40010000

08003668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f023 030a 	bic.w	r3, r3, #10
 80036a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b087      	sub	sp, #28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0210 	bic.w	r2, r3, #16
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	f043 0307 	orr.w	r3, r3, #7
 8003748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	609a      	str	r2, [r3, #8]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	021a      	lsls	r2, r3, #8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	431a      	orrs	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2201      	movs	r2, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	43db      	mvns	r3, r3
 80037be:	401a      	ands	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	431a      	orrs	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e050      	b.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d013      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a15      	ldr	r2, [pc, #84]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10c      	bne.n	8003890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4313      	orrs	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800
 80038bc:	40000c00 	.word	0x40000c00
 80038c0:	40014000 	.word	0x40014000

080038c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038dc:	2302      	movs	r3, #2
 80038de:	e03d      	b.n	800395c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003968:	b084      	sub	sp, #16
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	f107 001c 	add.w	r0, r7, #28
 8003976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	2b01      	cmp	r3, #1
 800397e:	d122      	bne.n	80039c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d105      	bne.n	80039ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 fb1c 	bl	8004ff8 <USB_CoreReset>
 80039c0:	4603      	mov	r3, r0
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e01a      	b.n	80039fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f001 fb10 	bl	8004ff8 <USB_CoreReset>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
 80039ee:	e005      	b.n	80039fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10b      	bne.n	8003a1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f043 0206 	orr.w	r2, r3, #6
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a26:	b004      	add	sp, #16
 8003a28:	4770      	bx	lr
	...

08003a2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d165      	bne.n	8003b0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4a41      	ldr	r2, [pc, #260]	; (8003b48 <USB_SetTurnaroundTime+0x11c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d906      	bls.n	8003a56 <USB_SetTurnaroundTime+0x2a>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	; (8003b4c <USB_SetTurnaroundTime+0x120>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d202      	bcs.n	8003a56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a50:	230f      	movs	r3, #15
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e062      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <USB_SetTurnaroundTime+0x120>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d306      	bcc.n	8003a6c <USB_SetTurnaroundTime+0x40>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4a3b      	ldr	r2, [pc, #236]	; (8003b50 <USB_SetTurnaroundTime+0x124>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d202      	bcs.n	8003a6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a66:	230e      	movs	r3, #14
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	e057      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4a38      	ldr	r2, [pc, #224]	; (8003b50 <USB_SetTurnaroundTime+0x124>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d306      	bcc.n	8003a82 <USB_SetTurnaroundTime+0x56>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4a37      	ldr	r2, [pc, #220]	; (8003b54 <USB_SetTurnaroundTime+0x128>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d202      	bcs.n	8003a82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a7c:	230d      	movs	r3, #13
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e04c      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <USB_SetTurnaroundTime+0x128>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d306      	bcc.n	8003a98 <USB_SetTurnaroundTime+0x6c>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	4a32      	ldr	r2, [pc, #200]	; (8003b58 <USB_SetTurnaroundTime+0x12c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d802      	bhi.n	8003a98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a92:	230c      	movs	r3, #12
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e041      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4a2f      	ldr	r2, [pc, #188]	; (8003b58 <USB_SetTurnaroundTime+0x12c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d906      	bls.n	8003aae <USB_SetTurnaroundTime+0x82>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <USB_SetTurnaroundTime+0x130>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d802      	bhi.n	8003aae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003aa8:	230b      	movs	r3, #11
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e036      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4a2a      	ldr	r2, [pc, #168]	; (8003b5c <USB_SetTurnaroundTime+0x130>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d906      	bls.n	8003ac4 <USB_SetTurnaroundTime+0x98>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <USB_SetTurnaroundTime+0x134>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d802      	bhi.n	8003ac4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003abe:	230a      	movs	r3, #10
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e02b      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <USB_SetTurnaroundTime+0x134>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d906      	bls.n	8003ada <USB_SetTurnaroundTime+0xae>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4a25      	ldr	r2, [pc, #148]	; (8003b64 <USB_SetTurnaroundTime+0x138>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d202      	bcs.n	8003ada <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ad4:	2309      	movs	r3, #9
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	e020      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <USB_SetTurnaroundTime+0x138>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d306      	bcc.n	8003af0 <USB_SetTurnaroundTime+0xc4>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <USB_SetTurnaroundTime+0x13c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d802      	bhi.n	8003af0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003aea:	2308      	movs	r3, #8
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e015      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <USB_SetTurnaroundTime+0x13c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d906      	bls.n	8003b06 <USB_SetTurnaroundTime+0xda>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <USB_SetTurnaroundTime+0x140>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d202      	bcs.n	8003b06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b00:	2307      	movs	r3, #7
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e00a      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b06:	2306      	movs	r3, #6
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e007      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b12:	2309      	movs	r3, #9
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e001      	b.n	8003b1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b18:	2309      	movs	r3, #9
 8003b1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	029b      	lsls	r3, r3, #10
 8003b30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	00d8acbf 	.word	0x00d8acbf
 8003b4c:	00e4e1c0 	.word	0x00e4e1c0
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	01067380 	.word	0x01067380
 8003b58:	011a499f 	.word	0x011a499f
 8003b5c:	01312cff 	.word	0x01312cff
 8003b60:	014ca43f 	.word	0x014ca43f
 8003b64:	016e3600 	.word	0x016e3600
 8003b68:	01a6ab1f 	.word	0x01a6ab1f
 8003b6c:	01e84800 	.word	0x01e84800

08003b70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 0201 	bic.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d115      	bne.n	8003c02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7fc ffc4 	bl	8000b70 <HAL_Delay>
      ms++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f001 f972 	bl	8004ed8 <USB_GetMode>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d01e      	beq.n	8003c38 <USB_SetCurrentMode+0x84>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b31      	cmp	r3, #49	; 0x31
 8003bfe:	d9f0      	bls.n	8003be2 <USB_SetCurrentMode+0x2e>
 8003c00:	e01a      	b.n	8003c38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d115      	bne.n	8003c34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7fc ffab 	bl	8000b70 <HAL_Delay>
      ms++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f001 f959 	bl	8004ed8 <USB_GetMode>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <USB_SetCurrentMode+0x84>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b31      	cmp	r3, #49	; 0x31
 8003c30:	d9f0      	bls.n	8003c14 <USB_SetCurrentMode+0x60>
 8003c32:	e001      	b.n	8003c38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e005      	b.n	8003c44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b32      	cmp	r3, #50	; 0x32
 8003c3c:	d101      	bne.n	8003c42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	e009      	b.n	8003c80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3340      	adds	r3, #64	; 0x40
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	2200      	movs	r2, #0
 8003c78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b0e      	cmp	r3, #14
 8003c84:	d9f2      	bls.n	8003c6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d11c      	bne.n	8003cc6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9a:	f043 0302 	orr.w	r3, r3, #2
 8003c9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8003cc4:	e00b      	b.n	8003cde <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	680b      	ldr	r3, [r1, #0]
 8003cfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d10c      	bne.n	8003d1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f945 	bl	8003f9c <USB_SetDevSpeed>
 8003d12:	e008      	b.n	8003d26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d14:	2101      	movs	r1, #1
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f940 	bl	8003f9c <USB_SetDevSpeed>
 8003d1c:	e003      	b.n	8003d26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d1e:	2103      	movs	r1, #3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f93b 	bl	8003f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d26:	2110      	movs	r1, #16
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8f3 	bl	8003f14 <USB_FlushTxFifo>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f90f 	bl	8003f5c <USB_FlushRxFifo>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2300      	movs	r3, #0
 8003d52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d66:	461a      	mov	r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	e043      	b.n	8003dfa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d88:	d118      	bne.n	8003dbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e013      	b.n	8003dce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db2:	461a      	mov	r2, r3
 8003db4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e008      	b.n	8003dce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	461a      	mov	r2, r3
 8003dee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003df2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3301      	adds	r3, #1
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d3b7      	bcc.n	8003d72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	e043      	b.n	8003e90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e1e:	d118      	bne.n	8003e52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e32:	461a      	mov	r2, r3
 8003e34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e013      	b.n	8003e64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	e008      	b.n	8003e64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2300      	movs	r3, #0
 8003e62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	461a      	mov	r2, r3
 8003e72:	2300      	movs	r3, #0
 8003e74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e82:	461a      	mov	r2, r3
 8003e84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d3b7      	bcc.n	8003e08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003eb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f043 0210 	orr.w	r2, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <USB_DevInit+0x2c4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f043 0208 	orr.w	r2, r3, #8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d107      	bne.n	8003f00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f0c:	b004      	add	sp, #16
 8003f0e:	4770      	bx	lr
 8003f10:	803c3800 	.word	0x803c3800

08003f14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	f043 0220 	orr.w	r2, r3, #32
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <USB_FlushTxFifo+0x44>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e006      	b.n	8003f4c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d0f1      	beq.n	8003f2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	00030d40 	.word	0x00030d40

08003f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3301      	adds	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <USB_FlushRxFifo+0x3c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e006      	b.n	8003f8c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d0f1      	beq.n	8003f6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	00030d40 	.word	0x00030d40

08003f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	68f9      	ldr	r1, [r7, #12]
 8003fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0306 	and.w	r3, r3, #6
 8003fe6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]
 8003ff2:	e00a      	b.n	800400a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d002      	beq.n	8004000 <USB_GetDevSpeed+0x32>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b06      	cmp	r3, #6
 8003ffe:	d102      	bne.n	8004006 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004000:	2302      	movs	r3, #2
 8004002:	75fb      	strb	r3, [r7, #23]
 8004004:	e001      	b.n	800400a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004006:	230f      	movs	r3, #15
 8004008:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800400a:	7dfb      	ldrb	r3, [r7, #23]
}
 800400c:	4618      	mov	r0, r3
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d13a      	bne.n	80040aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	b29b      	uxth	r3, r3
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004052:	4313      	orrs	r3, r2
 8004054:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d155      	bne.n	8004118 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	78db      	ldrb	r3, [r3, #3]
 8004086:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004088:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	059b      	lsls	r3, r3, #22
 800408e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004090:	4313      	orrs	r3, r2
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e036      	b.n	8004118 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	2101      	movs	r1, #1
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11a      	bne.n	8004118 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	78db      	ldrb	r3, [r3, #3]
 80040fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040fe:	430b      	orrs	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004116:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d161      	bne.n	8004208 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415a:	d11f      	bne.n	800419c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	440a      	add	r2, r1
 8004172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800417a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	440a      	add	r2, r1
 8004192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800419a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041bc:	4013      	ands	r3, r2
 80041be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e0:	4013      	ands	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	0159      	lsls	r1, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	440b      	add	r3, r1
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	4619      	mov	r1, r3
 8004200:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <USB_DeactivateEndpoint+0x1b0>)
 8004202:	4013      	ands	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
 8004206:	e060      	b.n	80042ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800421a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800421e:	d11f      	bne.n	8004260 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800423a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800423e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800425a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800425e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	43db      	mvns	r3, r3
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004280:	4013      	ands	r3, r2
 8004282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	43db      	mvns	r3, r3
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042a4:	4013      	ands	r3, r2
 80042a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0159      	lsls	r1, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	440b      	add	r3, r1
 80042be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c2:	4619      	mov	r1, r3
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <USB_DeactivateEndpoint+0x1b4>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	ec337800 	.word	0xec337800
 80042dc:	eff37800 	.word	0xeff37800

080042e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	f040 815c 	bne.w	80045ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d132      	bne.n	8004370 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800432c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	0151      	lsls	r1, r2, #5
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	440a      	add	r2, r1
 8004344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800434c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004368:	0cdb      	lsrs	r3, r3, #19
 800436a:	04db      	lsls	r3, r3, #19
 800436c:	6113      	str	r3, [r2, #16]
 800436e:	e074      	b.n	800445a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800438a:	0cdb      	lsrs	r3, r3, #19
 800438c:	04db      	lsls	r3, r3, #19
 800438e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	440b      	add	r3, r1
 80043cc:	1e59      	subs	r1, r3, #1
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80043d8:	4b9d      	ldr	r3, [pc, #628]	; (8004650 <USB_EPStartXfer+0x370>)
 80043da:	400b      	ands	r3, r1
 80043dc:	69b9      	ldr	r1, [r7, #24]
 80043de:	0148      	lsls	r0, r1, #5
 80043e0:	69f9      	ldr	r1, [r7, #28]
 80043e2:	4401      	add	r1, r0
 80043e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004402:	69b9      	ldr	r1, [r7, #24]
 8004404:	0148      	lsls	r0, r1, #5
 8004406:	69f9      	ldr	r1, [r7, #28]
 8004408:	4401      	add	r1, r0
 800440a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800440e:	4313      	orrs	r3, r2
 8004410:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	78db      	ldrb	r3, [r3, #3]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d11f      	bne.n	800445a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004434:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004438:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	440a      	add	r2, r1
 8004450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004454:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004458:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d14b      	bne.n	80044f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d009      	beq.n	800447c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	78db      	ldrb	r3, [r3, #3]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d128      	bne.n	80044d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d110      	bne.n	80044b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	e00f      	b.n	80044d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	0151      	lsls	r1, r2, #5
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	440a      	add	r2, r1
 80044ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e12f      	b.n	8004758 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004516:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	78db      	ldrb	r3, [r3, #3]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d015      	beq.n	800454c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8117 	beq.w	8004758 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	2101      	movs	r1, #1
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	69f9      	ldr	r1, [r7, #28]
 8004542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004546:	4313      	orrs	r3, r2
 8004548:	634b      	str	r3, [r1, #52]	; 0x34
 800454a:	e105      	b.n	8004758 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d110      	bne.n	800457e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e00f      	b.n	800459e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	68d9      	ldr	r1, [r3, #12]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	b298      	uxth	r0, r3
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4603      	mov	r3, r0
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fa2b 	bl	8004a0e <USB_WritePacket>
 80045b8:	e0ce      	b.n	8004758 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d4:	0cdb      	lsrs	r3, r3, #19
 80045d6:	04db      	lsls	r3, r3, #19
 80045d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d126      	bne.n	8004654 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461c:	69b9      	ldr	r1, [r7, #24]
 800461e:	0148      	lsls	r0, r1, #5
 8004620:	69f9      	ldr	r1, [r7, #28]
 8004622:	4401      	add	r1, r0
 8004624:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004628:	4313      	orrs	r3, r2
 800462a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800464a:	6113      	str	r3, [r2, #16]
 800464c:	e036      	b.n	80046bc <USB_EPStartXfer+0x3dc>
 800464e:	bf00      	nop
 8004650:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4413      	add	r3, r2
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	8afb      	ldrh	r3, [r7, #22]
 800467a:	04d9      	lsls	r1, r3, #19
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <USB_EPStartXfer+0x484>)
 800467e:	400b      	ands	r3, r1
 8004680:	69b9      	ldr	r1, [r7, #24]
 8004682:	0148      	lsls	r0, r1, #5
 8004684:	69f9      	ldr	r1, [r7, #28]
 8004686:	4401      	add	r1, r0
 8004688:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800468c:	4313      	orrs	r3, r2
 800468e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	8af9      	ldrh	r1, [r7, #22]
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ac:	69b9      	ldr	r1, [r7, #24]
 80046ae:	0148      	lsls	r0, r1, #5
 80046b0:	69f9      	ldr	r1, [r7, #28]
 80046b2:	4401      	add	r1, r0
 80046b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046b8:	4313      	orrs	r3, r2
 80046ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10d      	bne.n	80046de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	68d9      	ldr	r1, [r3, #12]
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	460a      	mov	r2, r1
 80046dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	78db      	ldrb	r3, [r3, #3]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d128      	bne.n	8004738 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d110      	bne.n	8004718 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e00f      	b.n	8004738 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004736:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	1ff80000 	.word	0x1ff80000

08004768 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	4613      	mov	r3, r2
 8004774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b01      	cmp	r3, #1
 8004786:	f040 80cd 	bne.w	8004924 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d132      	bne.n	80047f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	0151      	lsls	r1, r2, #5
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	440a      	add	r2, r1
 80047cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f0:	0cdb      	lsrs	r3, r3, #19
 80047f2:	04db      	lsls	r3, r3, #19
 80047f4:	6113      	str	r3, [r2, #16]
 80047f6:	e04e      	b.n	8004896 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004812:	0cdb      	lsrs	r3, r3, #19
 8004814:	04db      	lsls	r3, r3, #19
 8004816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004832:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004836:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800483a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	695a      	ldr	r2, [r3, #20]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	429a      	cmp	r2, r3
 8004846:	d903      	bls.n	8004850 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800486e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004886:	6939      	ldr	r1, [r7, #16]
 8004888:	0148      	lsls	r0, r1, #5
 800488a:	6979      	ldr	r1, [r7, #20]
 800488c:	4401      	add	r1, r0
 800488e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004892:	4313      	orrs	r3, r2
 8004894:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d11e      	bne.n	80048da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d009      	beq.n	80048b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e092      	b.n	8004a00 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d07e      	beq.n	8004a00 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	6979      	ldr	r1, [r7, #20]
 800491a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800491e:	4313      	orrs	r3, r2
 8004920:	634b      	str	r3, [r1, #52]	; 0x34
 8004922:	e06d      	b.n	8004a00 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493e:	0cdb      	lsrs	r3, r3, #19
 8004940:	04db      	lsls	r3, r3, #19
 8004942:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004962:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004966:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	440a      	add	r2, r1
 800498e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004996:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ae:	6939      	ldr	r1, [r7, #16]
 80049b0:	0148      	lsls	r0, r1, #5
 80049b2:	6979      	ldr	r1, [r7, #20]
 80049b4:	4401      	add	r1, r0
 80049b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049ba:	4313      	orrs	r3, r2
 80049bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d10d      	bne.n	80049e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	68d9      	ldr	r1, [r3, #12]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	460a      	mov	r2, r1
 80049de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	0151      	lsls	r1, r2, #5
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	440a      	add	r2, r1
 80049f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b089      	sub	sp, #36	; 0x24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	4611      	mov	r1, r2
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	71fb      	strb	r3, [r7, #7]
 8004a20:	4613      	mov	r3, r2
 8004a22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d123      	bne.n	8004a7c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a34:	88bb      	ldrh	r3, [r7, #4]
 8004a36:	3303      	adds	r3, #3
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e018      	b.n	8004a74 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	031a      	lsls	r2, r3, #12
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4e:	461a      	mov	r2, r3
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3301      	adds	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d3e2      	bcc.n	8004a42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b08b      	sub	sp, #44	; 0x2c
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	4613      	mov	r3, r2
 8004a96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	089b      	lsrs	r3, r3, #2
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	623b      	str	r3, [r7, #32]
 8004ab4:	e014      	b.n	8004ae0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	3301      	adds	r3, #1
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	3301      	adds	r3, #1
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	6a3a      	ldr	r2, [r7, #32]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d3e6      	bcc.n	8004ab6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ae8:	8bfb      	ldrh	r3, [r7, #30]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01e      	beq.n	8004b2c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af8:	461a      	mov	r2, r3
 8004afa:	f107 0310 	add.w	r3, r7, #16
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	701a      	strb	r2, [r3, #0]
      i++;
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	3301      	adds	r3, #1
 8004b18:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b20:	8bfb      	ldrh	r3, [r7, #30]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b26:	8bfb      	ldrh	r3, [r7, #30]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ea      	bne.n	8004b02 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	372c      	adds	r7, #44	; 0x2c
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d12c      	bne.n	8004bb0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	db12      	blt.n	8004b8e <USB_EPSetStall+0x54>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00f      	beq.n	8004b8e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b8c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e02b      	b.n	8004c08 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db12      	blt.n	8004be8 <USB_EPSetStall+0xae>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00f      	beq.n	8004be8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004be6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d128      	bne.n	8004c84 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	78db      	ldrb	r3, [r3, #3]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d003      	beq.n	8004c62 <USB_EPClearStall+0x4c>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	78db      	ldrb	r3, [r3, #3]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d138      	bne.n	8004cd4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e027      	b.n	8004cd4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ca2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	78db      	ldrb	r3, [r3, #3]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d003      	beq.n	8004cb4 <USB_EPClearStall+0x9e>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	78db      	ldrb	r3, [r3, #3]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d10f      	bne.n	8004cd4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	0151      	lsls	r1, r2, #5
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	440a      	add	r2, r1
 8004cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d00:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d04:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d48:	f023 0303 	bic.w	r3, r3, #3
 8004d4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5c:	f023 0302 	bic.w	r3, r3, #2
 8004d60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
 8004da2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dca:	68fb      	ldr	r3, [r7, #12]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	b29b      	uxth	r3, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	01db      	lsls	r3, r3, #7
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004eca:	68bb      	ldr	r3, [r7, #8]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f12:	f023 0307 	bic.w	r3, r3, #7
 8004f16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	460b      	mov	r3, r1
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	333c      	adds	r3, #60	; 0x3c
 8004f52:	3304      	adds	r3, #4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4a26      	ldr	r2, [pc, #152]	; (8004ff4 <USB_EP0_OutStart+0xb8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d90a      	bls.n	8004f76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f70:	d101      	bne.n	8004f76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e037      	b.n	8004fe6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	f043 0318 	orr.w	r3, r3, #24
 8004fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d10f      	bne.n	8004fe4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004fe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	4f54300a 	.word	0x4f54300a

08004ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3301      	adds	r3, #1
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <USB_CoreReset+0x60>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d901      	bls.n	8005014 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e01a      	b.n	800504a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	daf3      	bge.n	8005004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	4a09      	ldr	r2, [pc, #36]	; (8005058 <USB_CoreReset+0x60>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d901      	bls.n	800503c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e006      	b.n	800504a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b01      	cmp	r3, #1
 8005046:	d0f1      	beq.n	800502c <USB_CoreReset+0x34>

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	00030d40 	.word	0x00030d40

0800505c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005068:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800506c:	f002 f958 	bl	8007320 <USBD_static_malloc>
 8005070:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d105      	bne.n	8005084 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005080:	2302      	movs	r3, #2
 8005082:	e066      	b.n	8005152 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7c1b      	ldrb	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d119      	bne.n	80050c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005098:	2202      	movs	r2, #2
 800509a:	2181      	movs	r1, #129	; 0x81
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f002 f81c 	bl	80070da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ac:	2202      	movs	r2, #2
 80050ae:	2101      	movs	r1, #1
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f002 f812 	bl	80070da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2210      	movs	r2, #16
 80050c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80050c6:	e016      	b.n	80050f6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050c8:	2340      	movs	r3, #64	; 0x40
 80050ca:	2202      	movs	r2, #2
 80050cc:	2181      	movs	r1, #129	; 0x81
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f002 f803 	bl	80070da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050da:	2340      	movs	r3, #64	; 0x40
 80050dc:	2202      	movs	r2, #2
 80050de:	2101      	movs	r1, #1
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 fffa 	bl	80070da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2210      	movs	r2, #16
 80050f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050f6:	2308      	movs	r3, #8
 80050f8:	2203      	movs	r2, #3
 80050fa:	2182      	movs	r1, #130	; 0x82
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f001 ffec 	bl	80070da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	7c1b      	ldrb	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005136:	2101      	movs	r1, #1
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f002 f8bd 	bl	80072b8 <USBD_LL_PrepareReceive>
 800513e:	e007      	b.n	8005150 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005146:	2340      	movs	r3, #64	; 0x40
 8005148:	2101      	movs	r1, #1
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f002 f8b4 	bl	80072b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005166:	2181      	movs	r1, #129	; 0x81
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f001 ffdc 	bl	8007126 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005174:	2101      	movs	r1, #1
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 ffd5 	bl	8007126 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005184:	2182      	movs	r1, #130	; 0x82
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 ffcd 	bl	8007126 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00e      	beq.n	80051c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b6:	4618      	mov	r0, r3
 80051b8:	f002 f8c0 	bl	800733c <USBD_static_free>
    pdev->pClassData = NULL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0af      	b.n	8005358 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005200:	2b00      	cmp	r3, #0
 8005202:	d03f      	beq.n	8005284 <USBD_CDC_Setup+0xb4>
 8005204:	2b20      	cmp	r3, #32
 8005206:	f040 809f 	bne.w	8005348 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	88db      	ldrh	r3, [r3, #6]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02e      	beq.n	8005270 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b25b      	sxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	da16      	bge.n	800524a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005228:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	88d2      	ldrh	r2, [r2, #6]
 800522e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	88db      	ldrh	r3, [r3, #6]
 8005234:	2b07      	cmp	r3, #7
 8005236:	bf28      	it	cs
 8005238:	2307      	movcs	r3, #7
 800523a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	89fa      	ldrh	r2, [r7, #14]
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 fb19 	bl	800687a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005248:	e085      	b.n	8005356 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	785a      	ldrb	r2, [r3, #1]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	88db      	ldrh	r3, [r3, #6]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005260:	6939      	ldr	r1, [r7, #16]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	88db      	ldrh	r3, [r3, #6]
 8005266:	461a      	mov	r2, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 fb32 	bl	80068d2 <USBD_CtlPrepareRx>
      break;
 800526e:	e072      	b.n	8005356 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	7850      	ldrb	r0, [r2, #1]
 800527c:	2200      	movs	r2, #0
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	4798      	blx	r3
      break;
 8005282:	e068      	b.n	8005356 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b0b      	cmp	r3, #11
 800528a:	d852      	bhi.n	8005332 <USBD_CDC_Setup+0x162>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <USBD_CDC_Setup+0xc4>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052c5 	.word	0x080052c5
 8005298:	08005341 	.word	0x08005341
 800529c:	08005333 	.word	0x08005333
 80052a0:	08005333 	.word	0x08005333
 80052a4:	08005333 	.word	0x08005333
 80052a8:	08005333 	.word	0x08005333
 80052ac:	08005333 	.word	0x08005333
 80052b0:	08005333 	.word	0x08005333
 80052b4:	08005333 	.word	0x08005333
 80052b8:	08005333 	.word	0x08005333
 80052bc:	080052ef 	.word	0x080052ef
 80052c0:	08005319 	.word	0x08005319
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d107      	bne.n	80052e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80052d0:	f107 030a 	add.w	r3, r7, #10
 80052d4:	2202      	movs	r2, #2
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 face 	bl	800687a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052de:	e032      	b.n	8005346 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 fa58 	bl	8006798 <USBD_CtlError>
            ret = USBD_FAIL;
 80052e8:	2303      	movs	r3, #3
 80052ea:	75fb      	strb	r3, [r7, #23]
          break;
 80052ec:	e02b      	b.n	8005346 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d107      	bne.n	800530a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80052fa:	f107 030d 	add.w	r3, r7, #13
 80052fe:	2201      	movs	r2, #1
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fab9 	bl	800687a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005308:	e01d      	b.n	8005346 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 fa43 	bl	8006798 <USBD_CtlError>
            ret = USBD_FAIL;
 8005312:	2303      	movs	r3, #3
 8005314:	75fb      	strb	r3, [r7, #23]
          break;
 8005316:	e016      	b.n	8005346 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b03      	cmp	r3, #3
 8005322:	d00f      	beq.n	8005344 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f001 fa36 	bl	8006798 <USBD_CtlError>
            ret = USBD_FAIL;
 800532c:	2303      	movs	r3, #3
 800532e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005330:	e008      	b.n	8005344 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 fa2f 	bl	8006798 <USBD_CtlError>
          ret = USBD_FAIL;
 800533a:	2303      	movs	r3, #3
 800533c:	75fb      	strb	r3, [r7, #23]
          break;
 800533e:	e002      	b.n	8005346 <USBD_CDC_Setup+0x176>
          break;
 8005340:	bf00      	nop
 8005342:	e008      	b.n	8005356 <USBD_CDC_Setup+0x186>
          break;
 8005344:	bf00      	nop
      }
      break;
 8005346:	e006      	b.n	8005356 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 fa24 	bl	8006798 <USBD_CtlError>
      ret = USBD_FAIL;
 8005350:	2303      	movs	r3, #3
 8005352:	75fb      	strb	r3, [r7, #23]
      break;
 8005354:	bf00      	nop
  }

  return (uint8_t)ret;
 8005356:	7dfb      	ldrb	r3, [r7, #23]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800537e:	2303      	movs	r3, #3
 8005380:	e04f      	b.n	8005422 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005388:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3318      	adds	r3, #24
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d029      	beq.n	80053f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3318      	adds	r3, #24
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	78f9      	ldrb	r1, [r7, #3]
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	460b      	mov	r3, r1
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	1a5b      	subs	r3, r3, r1
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4403      	add	r3, r0
 80053c0:	3344      	adds	r3, #68	; 0x44
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80053c8:	fb03 f301 	mul.w	r3, r3, r1
 80053cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d110      	bne.n	80053f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3318      	adds	r3, #24
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80053e6:	78f9      	ldrb	r1, [r7, #3]
 80053e8:	2300      	movs	r3, #0
 80053ea:	2200      	movs	r2, #0
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 ff42 	bl	8007276 <USBD_LL_Transmit>
 80053f2:	e015      	b.n	8005420 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800543c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005448:	2303      	movs	r3, #3
 800544a:	e015      	b.n	8005478 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 ff52 	bl	80072fa <USBD_LL_GetRxDataSize>
 8005456:	4602      	mov	r2, r0
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005472:	4611      	mov	r1, r2
 8005474:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800548e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005496:	2303      	movs	r3, #3
 8005498:	e01b      	b.n	80054d2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d015      	beq.n	80054d0 <USBD_CDC_EP0_RxReady+0x50>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054aa:	2bff      	cmp	r3, #255	; 0xff
 80054ac:	d010      	beq.n	80054d0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80054bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80054c4:	b292      	uxth	r2, r2
 80054c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	22ff      	movs	r2, #255	; 0xff
 80054cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2243      	movs	r2, #67	; 0x43
 80054e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80054ea:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20000094 	.word	0x20000094

080054fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2243      	movs	r2, #67	; 0x43
 8005508:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800550a:	4b03      	ldr	r3, [pc, #12]	; (8005518 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	20000050 	.word	0x20000050

0800551c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2243      	movs	r2, #67	; 0x43
 8005528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800552a:	4b03      	ldr	r3, [pc, #12]	; (8005538 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	200000d8 	.word	0x200000d8

0800553c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	220a      	movs	r2, #10
 8005548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800554a:	4b03      	ldr	r3, [pc, #12]	; (8005558 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	2000000c 	.word	0x2000000c

0800555c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800556c:	2303      	movs	r3, #3
 800556e:	e004      	b.n	800557a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005598:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e008      	b.n	80055b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80055da:	2303      	movs	r3, #3
 80055dc:	e004      	b.n	80055e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005602:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005612:	2303      	movs	r3, #3
 8005614:	e01a      	b.n	800564c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800561c:	2b00      	cmp	r3, #0
 800561e:	d114      	bne.n	800564a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2201      	movs	r2, #1
 8005624:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800563e:	2181      	movs	r1, #129	; 0x81
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fe18 	bl	8007276 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800564a:	7bfb      	ldrb	r3, [r7, #15]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005662:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800566e:	2303      	movs	r3, #3
 8005670:	e016      	b.n	80056a0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	7c1b      	ldrb	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005684:	2101      	movs	r1, #1
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f001 fe16 	bl	80072b8 <USBD_LL_PrepareReceive>
 800568c:	e007      	b.n	800569e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	2101      	movs	r1, #1
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fe0d 	bl	80072b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80056bc:	2303      	movs	r3, #3
 80056be:	e01f      	b.n	8005700 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	79fa      	ldrb	r2, [r7, #7]
 80056f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f001 fc89 	bl	800700c <USBD_LL_Init>
 80056fa:	4603      	mov	r3, r0
 80056fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800571c:	2303      	movs	r3, #3
 800571e:	e016      	b.n	800574e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	f107 020e 	add.w	r2, r7, #14
 8005740:	4610      	mov	r0, r2
 8005742:	4798      	blx	r3
 8005744:	4602      	mov	r2, r0
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fca0 	bl	80070a4 <USBD_LL_Start>
 8005764:	4603      	mov	r3, r0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005790:	2303      	movs	r3, #3
 8005792:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	4611      	mov	r1, r2
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	4611      	mov	r1, r2
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
  }

  return USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 ff90 	bl	8006724 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005812:	461a      	mov	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2b02      	cmp	r3, #2
 8005826:	d01a      	beq.n	800585e <USBD_LL_SetupStage+0x72>
 8005828:	2b02      	cmp	r3, #2
 800582a:	d822      	bhi.n	8005872 <USBD_LL_SetupStage+0x86>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <USBD_LL_SetupStage+0x4a>
 8005830:	2b01      	cmp	r3, #1
 8005832:	d00a      	beq.n	800584a <USBD_LL_SetupStage+0x5e>
 8005834:	e01d      	b.n	8005872 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa62 	bl	8005d08 <USBD_StdDevReq>
 8005844:	4603      	mov	r3, r0
 8005846:	73fb      	strb	r3, [r7, #15]
      break;
 8005848:	e020      	b.n	800588c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fac6 	bl	8005de4 <USBD_StdItfReq>
 8005858:	4603      	mov	r3, r0
 800585a:	73fb      	strb	r3, [r7, #15]
      break;
 800585c:	e016      	b.n	800588c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fb05 	bl	8005e76 <USBD_StdEPReq>
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]
      break;
 8005870:	e00c      	b.n	800588c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800587c:	b2db      	uxtb	r3, r3
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fc6f 	bl	8007164 <USBD_LL_StallEP>
 8005886:	4603      	mov	r3, r0
 8005888:	73fb      	strb	r3, [r7, #15]
      break;
 800588a:	bf00      	nop
  }

  return ret;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	460b      	mov	r3, r1
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80058a4:	7afb      	ldrb	r3, [r7, #11]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d138      	bne.n	800591c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80058b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d14a      	bne.n	8005952 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d913      	bls.n	80058f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	1ad2      	subs	r2, r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	4293      	cmp	r3, r2
 80058e0:	bf28      	it	cs
 80058e2:	4613      	movcs	r3, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f001 f80f 	bl	800690c <USBD_CtlContinueRx>
 80058ee:	e030      	b.n	8005952 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d10b      	bne.n	8005914 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f001 f80a 	bl	800692e <USBD_CtlSendStatus>
 800591a:	e01a      	b.n	8005952 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b03      	cmp	r3, #3
 8005926:	d114      	bne.n	8005952 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	7afa      	ldrb	r2, [r7, #11]
 800593e:	4611      	mov	r1, r2
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	4798      	blx	r3
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	e000      	b.n	8005954 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	460b      	mov	r3, r1
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d16b      	bne.n	8005a48 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3314      	adds	r3, #20
 8005974:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800597c:	2b02      	cmp	r3, #2
 800597e:	d156      	bne.n	8005a2e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	429a      	cmp	r2, r3
 800598a:	d914      	bls.n	80059b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	1ad2      	subs	r2, r2, r3
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	461a      	mov	r2, r3
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 ff84 	bl	80068b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059a8:	2300      	movs	r3, #0
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f001 fc82 	bl	80072b8 <USBD_LL_PrepareReceive>
 80059b4:	e03b      	b.n	8005a2e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d11c      	bne.n	80059fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d316      	bcc.n	80059fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80059d8:	429a      	cmp	r2, r3
 80059da:	d20f      	bcs.n	80059fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059dc:	2200      	movs	r2, #0
 80059de:	2100      	movs	r1, #0
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 ff65 	bl	80068b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059ee:	2300      	movs	r3, #0
 80059f0:	2200      	movs	r2, #0
 80059f2:	2100      	movs	r1, #0
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f001 fc5f 	bl	80072b8 <USBD_LL_PrepareReceive>
 80059fa:	e018      	b.n	8005a2e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d10b      	bne.n	8005a20 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f001 fb9e 	bl	8007164 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 ff93 	bl	8006954 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d122      	bne.n	8005a7e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fe98 	bl	800576e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a46:	e01a      	b.n	8005a7e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d114      	bne.n	8005a7e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	7afa      	ldrb	r2, [r7, #11]
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	4798      	blx	r3
 8005a70:	4603      	mov	r3, r0
 8005a72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	e000      	b.n	8005a80 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e02f      	b.n	8005b1c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00f      	beq.n	8005ae6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6852      	ldr	r2, [r2, #4]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ae6:	2340      	movs	r3, #64	; 0x40
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2100      	movs	r1, #0
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 faf4 	bl	80070da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2240      	movs	r2, #64	; 0x40
 8005afe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b02:	2340      	movs	r3, #64	; 0x40
 8005b04:	2200      	movs	r2, #0
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fae6 	bl	80070da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d106      	bne.n	8005b92 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e012      	b.n	8005bdc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d10b      	bne.n	8005bda <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e014      	b.n	8005c28 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d10d      	bne.n	8005c26 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	4611      	mov	r1, r2
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e014      	b.n	8005c74 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d10d      	bne.n	8005c72 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d007      	beq.n	8005c72 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6852      	ldr	r2, [r2, #4]
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	4611      	mov	r1, r2
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
  }

  return USBD_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b087      	sub	sp, #28
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ce8:	8a3b      	ldrh	r3, [r7, #16]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	b21a      	sxth	r2, r3
 8005cee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	b21b      	sxth	r3, r3
 8005cf6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d005      	beq.n	8005d2e <USBD_StdDevReq+0x26>
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d853      	bhi.n	8005dce <USBD_StdDevReq+0xc6>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <USBD_StdDevReq+0x3a>
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d14f      	bne.n	8005dce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d40:	e04a      	b.n	8005dd8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	2b09      	cmp	r3, #9
 8005d48:	d83b      	bhi.n	8005dc2 <USBD_StdDevReq+0xba>
 8005d4a:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <USBD_StdDevReq+0x48>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005da5 	.word	0x08005da5
 8005d54:	08005db9 	.word	0x08005db9
 8005d58:	08005dc3 	.word	0x08005dc3
 8005d5c:	08005daf 	.word	0x08005daf
 8005d60:	08005dc3 	.word	0x08005dc3
 8005d64:	08005d83 	.word	0x08005d83
 8005d68:	08005d79 	.word	0x08005d79
 8005d6c:	08005dc3 	.word	0x08005dc3
 8005d70:	08005d9b 	.word	0x08005d9b
 8005d74:	08005d8d 	.word	0x08005d8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f9de 	bl	800613c <USBD_GetDescriptor>
          break;
 8005d80:	e024      	b.n	8005dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb43 	bl	8006410 <USBD_SetAddress>
          break;
 8005d8a:	e01f      	b.n	8005dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fb82 	bl	8006498 <USBD_SetConfig>
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]
          break;
 8005d98:	e018      	b.n	8005dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fc21 	bl	80065e4 <USBD_GetConfig>
          break;
 8005da2:	e013      	b.n	8005dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fc52 	bl	8006650 <USBD_GetStatus>
          break;
 8005dac:	e00e      	b.n	8005dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fc81 	bl	80066b8 <USBD_SetFeature>
          break;
 8005db6:	e009      	b.n	8005dcc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fc90 	bl	80066e0 <USBD_ClrFeature>
          break;
 8005dc0:	e004      	b.n	8005dcc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fce7 	bl	8006798 <USBD_CtlError>
          break;
 8005dca:	bf00      	nop
      }
      break;
 8005dcc:	e004      	b.n	8005dd8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fce1 	bl	8006798 <USBD_CtlError>
      break;
 8005dd6:	bf00      	nop
  }

  return ret;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop

08005de4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dfa:	2b40      	cmp	r3, #64	; 0x40
 8005dfc:	d005      	beq.n	8005e0a <USBD_StdItfReq+0x26>
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d82f      	bhi.n	8005e62 <USBD_StdItfReq+0x7e>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <USBD_StdItfReq+0x26>
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d12b      	bne.n	8005e62 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d81d      	bhi.n	8005e54 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	889b      	ldrh	r3, [r3, #4]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d813      	bhi.n	8005e4a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	88db      	ldrh	r3, [r3, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d110      	bne.n	8005e5e <USBD_StdItfReq+0x7a>
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10d      	bne.n	8005e5e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fd73 	bl	800692e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e48:	e009      	b.n	8005e5e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fca3 	bl	8006798 <USBD_CtlError>
          break;
 8005e52:	e004      	b.n	8005e5e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fc9e 	bl	8006798 <USBD_CtlError>
          break;
 8005e5c:	e000      	b.n	8005e60 <USBD_StdItfReq+0x7c>
          break;
 8005e5e:	bf00      	nop
      }
      break;
 8005e60:	e004      	b.n	8005e6c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc97 	bl	8006798 <USBD_CtlError>
      break;
 8005e6a:	bf00      	nop
  }

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	889b      	ldrh	r3, [r3, #4]
 8005e88:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d007      	beq.n	8005ea6 <USBD_StdEPReq+0x30>
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	f200 8145 	bhi.w	8006126 <USBD_StdEPReq+0x2b0>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <USBD_StdEPReq+0x44>
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	f040 8140 	bne.w	8006126 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb8:	e13a      	b.n	8006130 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d007      	beq.n	8005ed2 <USBD_StdEPReq+0x5c>
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	f300 8129 	bgt.w	800611a <USBD_StdEPReq+0x2a4>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d07f      	beq.n	8005fcc <USBD_StdEPReq+0x156>
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d03c      	beq.n	8005f4a <USBD_StdEPReq+0xd4>
 8005ed0:	e123      	b.n	800611a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d002      	beq.n	8005ee4 <USBD_StdEPReq+0x6e>
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d016      	beq.n	8005f10 <USBD_StdEPReq+0x9a>
 8005ee2:	e02c      	b.n	8005f3e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <USBD_StdEPReq+0x90>
 8005eea:	7bbb      	ldrb	r3, [r7, #14]
 8005eec:	2b80      	cmp	r3, #128	; 0x80
 8005eee:	d00a      	beq.n	8005f06 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 f935 	bl	8007164 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 f931 	bl	8007164 <USBD_LL_StallEP>
 8005f02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f04:	e020      	b.n	8005f48 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fc45 	bl	8006798 <USBD_CtlError>
              break;
 8005f0e:	e01b      	b.n	8005f48 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	885b      	ldrh	r3, [r3, #2]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10e      	bne.n	8005f36 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <USBD_StdEPReq+0xc0>
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d008      	beq.n	8005f36 <USBD_StdEPReq+0xc0>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	88db      	ldrh	r3, [r3, #6]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 f917 	bl	8007164 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fcf9 	bl	800692e <USBD_CtlSendStatus>

              break;
 8005f3c:	e004      	b.n	8005f48 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fc29 	bl	8006798 <USBD_CtlError>
              break;
 8005f46:	bf00      	nop
          }
          break;
 8005f48:	e0ec      	b.n	8006124 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d002      	beq.n	8005f5c <USBD_StdEPReq+0xe6>
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d016      	beq.n	8005f88 <USBD_StdEPReq+0x112>
 8005f5a:	e030      	b.n	8005fbe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f5c:	7bbb      	ldrb	r3, [r7, #14]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <USBD_StdEPReq+0x108>
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d00a      	beq.n	8005f7e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 f8f9 	bl	8007164 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f72:	2180      	movs	r1, #128	; 0x80
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 f8f5 	bl	8007164 <USBD_LL_StallEP>
 8005f7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f7c:	e025      	b.n	8005fca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fc09 	bl	8006798 <USBD_CtlError>
              break;
 8005f86:	e020      	b.n	8005fca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	885b      	ldrh	r3, [r3, #2]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d11b      	bne.n	8005fc8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 f8ff 	bl	80071a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fcc2 	bl	800692e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005fbc:	e004      	b.n	8005fc8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fbe9 	bl	8006798 <USBD_CtlError>
              break;
 8005fc6:	e000      	b.n	8005fca <USBD_StdEPReq+0x154>
              break;
 8005fc8:	bf00      	nop
          }
          break;
 8005fca:	e0ab      	b.n	8006124 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d002      	beq.n	8005fde <USBD_StdEPReq+0x168>
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d032      	beq.n	8006042 <USBD_StdEPReq+0x1cc>
 8005fdc:	e097      	b.n	800610e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <USBD_StdEPReq+0x17e>
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	2b80      	cmp	r3, #128	; 0x80
 8005fe8:	d004      	beq.n	8005ff4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fbd3 	bl	8006798 <USBD_CtlError>
                break;
 8005ff2:	e091      	b.n	8006118 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	da0b      	bge.n	8006014 <USBD_StdEPReq+0x19e>
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	3310      	adds	r3, #16
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	4413      	add	r3, r2
 8006010:	3304      	adds	r3, #4
 8006012:	e00b      	b.n	800602c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4413      	add	r3, r2
 800602a:	3304      	adds	r3, #4
 800602c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2202      	movs	r2, #2
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fc1d 	bl	800687a <USBD_CtlSendData>
              break;
 8006040:	e06a      	b.n	8006118 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006046:	2b00      	cmp	r3, #0
 8006048:	da11      	bge.n	800606e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3324      	adds	r3, #36	; 0x24
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d117      	bne.n	8006094 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fb96 	bl	8006798 <USBD_CtlError>
                  break;
 800606c:	e054      	b.n	8006118 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	f003 020f 	and.w	r2, r3, #15
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fb83 	bl	8006798 <USBD_CtlError>
                  break;
 8006092:	e041      	b.n	8006118 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	da0b      	bge.n	80060b4 <USBD_StdEPReq+0x23e>
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	3310      	adds	r3, #16
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	4413      	add	r3, r2
 80060b0:	3304      	adds	r3, #4
 80060b2:	e00b      	b.n	80060cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	3304      	adds	r3, #4
 80060cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <USBD_StdEPReq+0x264>
 80060d4:	7bbb      	ldrb	r3, [r7, #14]
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	d103      	bne.n	80060e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e00e      	b.n	8006100 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 f87a 	bl	80071e0 <USBD_LL_IsStallEP>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e002      	b.n	8006100 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2202      	movs	r2, #2
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fbb7 	bl	800687a <USBD_CtlSendData>
              break;
 800610c:	e004      	b.n	8006118 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fb41 	bl	8006798 <USBD_CtlError>
              break;
 8006116:	bf00      	nop
          }
          break;
 8006118:	e004      	b.n	8006124 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fb3b 	bl	8006798 <USBD_CtlError>
          break;
 8006122:	bf00      	nop
      }
      break;
 8006124:	e004      	b.n	8006130 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fb35 	bl	8006798 <USBD_CtlError>
      break;
 800612e:	bf00      	nop
  }

  return ret;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	885b      	ldrh	r3, [r3, #2]
 8006156:	0a1b      	lsrs	r3, r3, #8
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	2b06      	cmp	r3, #6
 800615e:	f200 8128 	bhi.w	80063b2 <USBD_GetDescriptor+0x276>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <USBD_GetDescriptor+0x2c>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	08006185 	.word	0x08006185
 800616c:	0800619d 	.word	0x0800619d
 8006170:	080061dd 	.word	0x080061dd
 8006174:	080063b3 	.word	0x080063b3
 8006178:	080063b3 	.word	0x080063b3
 800617c:	08006353 	.word	0x08006353
 8006180:	0800637f 	.word	0x0800637f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	7c12      	ldrb	r2, [r2, #16]
 8006190:	f107 0108 	add.w	r1, r7, #8
 8006194:	4610      	mov	r0, r2
 8006196:	4798      	blx	r3
 8006198:	60f8      	str	r0, [r7, #12]
      break;
 800619a:	e112      	b.n	80063c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7c1b      	ldrb	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10d      	bne.n	80061c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	f107 0208 	add.w	r2, r7, #8
 80061b0:	4610      	mov	r0, r2
 80061b2:	4798      	blx	r3
 80061b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	2202      	movs	r2, #2
 80061bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061be:	e100      	b.n	80063c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	f107 0208 	add.w	r2, r7, #8
 80061cc:	4610      	mov	r0, r2
 80061ce:	4798      	blx	r3
 80061d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	2202      	movs	r2, #2
 80061d8:	701a      	strb	r2, [r3, #0]
      break;
 80061da:	e0f2      	b.n	80063c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	885b      	ldrh	r3, [r3, #2]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	f200 80ac 	bhi.w	8006340 <USBD_GetDescriptor+0x204>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <USBD_GetDescriptor+0xb4>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006209 	.word	0x08006209
 80061f4:	0800623d 	.word	0x0800623d
 80061f8:	08006271 	.word	0x08006271
 80061fc:	080062a5 	.word	0x080062a5
 8006200:	080062d9 	.word	0x080062d9
 8006204:	0800630d 	.word	0x0800630d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	7c12      	ldrb	r2, [r2, #16]
 8006220:	f107 0108 	add.w	r1, r7, #8
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
 8006228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800622a:	e091      	b.n	8006350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fab2 	bl	8006798 <USBD_CtlError>
            err++;
 8006234:	7afb      	ldrb	r3, [r7, #11]
 8006236:	3301      	adds	r3, #1
 8006238:	72fb      	strb	r3, [r7, #11]
          break;
 800623a:	e089      	b.n	8006350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	7c12      	ldrb	r2, [r2, #16]
 8006254:	f107 0108 	add.w	r1, r7, #8
 8006258:	4610      	mov	r0, r2
 800625a:	4798      	blx	r3
 800625c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800625e:	e077      	b.n	8006350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa98 	bl	8006798 <USBD_CtlError>
            err++;
 8006268:	7afb      	ldrb	r3, [r7, #11]
 800626a:	3301      	adds	r3, #1
 800626c:	72fb      	strb	r3, [r7, #11]
          break;
 800626e:	e06f      	b.n	8006350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	7c12      	ldrb	r2, [r2, #16]
 8006288:	f107 0108 	add.w	r1, r7, #8
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006292:	e05d      	b.n	8006350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa7e 	bl	8006798 <USBD_CtlError>
            err++;
 800629c:	7afb      	ldrb	r3, [r7, #11]
 800629e:	3301      	adds	r3, #1
 80062a0:	72fb      	strb	r3, [r7, #11]
          break;
 80062a2:	e055      	b.n	8006350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	7c12      	ldrb	r2, [r2, #16]
 80062bc:	f107 0108 	add.w	r1, r7, #8
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
 80062c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062c6:	e043      	b.n	8006350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa64 	bl	8006798 <USBD_CtlError>
            err++;
 80062d0:	7afb      	ldrb	r3, [r7, #11]
 80062d2:	3301      	adds	r3, #1
 80062d4:	72fb      	strb	r3, [r7, #11]
          break;
 80062d6:	e03b      	b.n	8006350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	7c12      	ldrb	r2, [r2, #16]
 80062f0:	f107 0108 	add.w	r1, r7, #8
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
 80062f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062fa:	e029      	b.n	8006350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fa4a 	bl	8006798 <USBD_CtlError>
            err++;
 8006304:	7afb      	ldrb	r3, [r7, #11]
 8006306:	3301      	adds	r3, #1
 8006308:	72fb      	strb	r3, [r7, #11]
          break;
 800630a:	e021      	b.n	8006350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	7c12      	ldrb	r2, [r2, #16]
 8006324:	f107 0108 	add.w	r1, r7, #8
 8006328:	4610      	mov	r0, r2
 800632a:	4798      	blx	r3
 800632c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800632e:	e00f      	b.n	8006350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa30 	bl	8006798 <USBD_CtlError>
            err++;
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	3301      	adds	r3, #1
 800633c:	72fb      	strb	r3, [r7, #11]
          break;
 800633e:	e007      	b.n	8006350 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa28 	bl	8006798 <USBD_CtlError>
          err++;
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	3301      	adds	r3, #1
 800634c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800634e:	bf00      	nop
      }
      break;
 8006350:	e037      	b.n	80063c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	7c1b      	ldrb	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	f107 0208 	add.w	r2, r7, #8
 8006366:	4610      	mov	r0, r2
 8006368:	4798      	blx	r3
 800636a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800636c:	e029      	b.n	80063c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fa11 	bl	8006798 <USBD_CtlError>
        err++;
 8006376:	7afb      	ldrb	r3, [r7, #11]
 8006378:	3301      	adds	r3, #1
 800637a:	72fb      	strb	r3, [r7, #11]
      break;
 800637c:	e021      	b.n	80063c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7c1b      	ldrb	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10d      	bne.n	80063a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f107 0208 	add.w	r2, r7, #8
 8006392:	4610      	mov	r0, r2
 8006394:	4798      	blx	r3
 8006396:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	2207      	movs	r2, #7
 800639e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063a0:	e00f      	b.n	80063c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f9f7 	bl	8006798 <USBD_CtlError>
        err++;
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	3301      	adds	r3, #1
 80063ae:	72fb      	strb	r3, [r7, #11]
      break;
 80063b0:	e007      	b.n	80063c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f9ef 	bl	8006798 <USBD_CtlError>
      err++;
 80063ba:	7afb      	ldrb	r3, [r7, #11]
 80063bc:	3301      	adds	r3, #1
 80063be:	72fb      	strb	r3, [r7, #11]
      break;
 80063c0:	bf00      	nop
  }

  if (err != 0U)
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d11e      	bne.n	8006406 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	88db      	ldrh	r3, [r3, #6]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d016      	beq.n	80063fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80063d0:	893b      	ldrh	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00e      	beq.n	80063f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	88da      	ldrh	r2, [r3, #6]
 80063da:	893b      	ldrh	r3, [r7, #8]
 80063dc:	4293      	cmp	r3, r2
 80063de:	bf28      	it	cs
 80063e0:	4613      	movcs	r3, r2
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063e6:	893b      	ldrh	r3, [r7, #8]
 80063e8:	461a      	mov	r2, r3
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fa44 	bl	800687a <USBD_CtlSendData>
 80063f2:	e009      	b.n	8006408 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f9ce 	bl	8006798 <USBD_CtlError>
 80063fc:	e004      	b.n	8006408 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa95 	bl	800692e <USBD_CtlSendStatus>
 8006404:	e000      	b.n	8006408 <USBD_GetDescriptor+0x2cc>
    return;
 8006406:	bf00      	nop
  }
}
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop

08006410 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	889b      	ldrh	r3, [r3, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d131      	bne.n	8006486 <USBD_SetAddress+0x76>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	88db      	ldrh	r3, [r3, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d12d      	bne.n	8006486 <USBD_SetAddress+0x76>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	885b      	ldrh	r3, [r3, #2]
 800642e:	2b7f      	cmp	r3, #127	; 0x7f
 8006430:	d829      	bhi.n	8006486 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	885b      	ldrh	r3, [r3, #2]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b03      	cmp	r3, #3
 8006448:	d104      	bne.n	8006454 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9a3 	bl	8006798 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006452:	e01d      	b.n	8006490 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7bfa      	ldrb	r2, [r7, #15]
 8006458:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fee9 	bl	8007238 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa61 	bl	800692e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647a:	e009      	b.n	8006490 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006484:	e004      	b.n	8006490 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f985 	bl	8006798 <USBD_CtlError>
  }
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	885b      	ldrh	r3, [r3, #2]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	4b4c      	ldr	r3, [pc, #304]	; (80065e0 <USBD_SetConfig+0x148>)
 80064ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064b0:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <USBD_SetConfig+0x148>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d905      	bls.n	80064c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f96c 	bl	8006798 <USBD_CtlError>
    return USBD_FAIL;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e088      	b.n	80065d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d002      	beq.n	80064d6 <USBD_SetConfig+0x3e>
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d025      	beq.n	8006520 <USBD_SetConfig+0x88>
 80064d4:	e071      	b.n	80065ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064d6:	4b42      	ldr	r3, [pc, #264]	; (80065e0 <USBD_SetConfig+0x148>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01c      	beq.n	8006518 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80064de:	4b40      	ldr	r3, [pc, #256]	; (80065e0 <USBD_SetConfig+0x148>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064e8:	4b3d      	ldr	r3, [pc, #244]	; (80065e0 <USBD_SetConfig+0x148>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff f948 	bl	8005784 <USBD_SetClassConfig>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d004      	beq.n	8006508 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f949 	bl	8006798 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006506:	e065      	b.n	80065d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fa10 	bl	800692e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2203      	movs	r2, #3
 8006512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006516:	e05d      	b.n	80065d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fa08 	bl	800692e <USBD_CtlSendStatus>
      break;
 800651e:	e059      	b.n	80065d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006520:	4b2f      	ldr	r3, [pc, #188]	; (80065e0 <USBD_SetConfig+0x148>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d112      	bne.n	800654e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006530:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <USBD_SetConfig+0x148>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800653a:	4b29      	ldr	r3, [pc, #164]	; (80065e0 <USBD_SetConfig+0x148>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff f93b 	bl	80057bc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f9f1 	bl	800692e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800654c:	e042      	b.n	80065d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <USBD_SetConfig+0x148>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d02a      	beq.n	80065b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff f929 	bl	80057bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800656a:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <USBD_SetConfig+0x148>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006574:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <USBD_SetConfig+0x148>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff f902 	bl	8005784 <USBD_SetClassConfig>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00f      	beq.n	80065aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f903 	bl	8006798 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff f90e 	bl	80057bc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065a8:	e014      	b.n	80065d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9bf 	bl	800692e <USBD_CtlSendStatus>
      break;
 80065b0:	e010      	b.n	80065d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9bb 	bl	800692e <USBD_CtlSendStatus>
      break;
 80065b8:	e00c      	b.n	80065d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f8eb 	bl	8006798 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <USBD_SetConfig+0x148>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff f8f7 	bl	80057bc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065ce:	2303      	movs	r3, #3
 80065d0:	73fb      	strb	r3, [r7, #15]
      break;
 80065d2:	bf00      	nop
  }

  return ret;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	2000019c 	.word	0x2000019c

080065e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88db      	ldrh	r3, [r3, #6]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d004      	beq.n	8006600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f8cd 	bl	8006798 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065fe:	e023      	b.n	8006648 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	dc02      	bgt.n	8006612 <USBD_GetConfig+0x2e>
 800660c:	2b00      	cmp	r3, #0
 800660e:	dc03      	bgt.n	8006618 <USBD_GetConfig+0x34>
 8006610:	e015      	b.n	800663e <USBD_GetConfig+0x5a>
 8006612:	2b03      	cmp	r3, #3
 8006614:	d00b      	beq.n	800662e <USBD_GetConfig+0x4a>
 8006616:	e012      	b.n	800663e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3308      	adds	r3, #8
 8006622:	2201      	movs	r2, #1
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f927 	bl	800687a <USBD_CtlSendData>
        break;
 800662c:	e00c      	b.n	8006648 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3304      	adds	r3, #4
 8006632:	2201      	movs	r2, #1
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f91f 	bl	800687a <USBD_CtlSendData>
        break;
 800663c:	e004      	b.n	8006648 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f8a9 	bl	8006798 <USBD_CtlError>
        break;
 8006646:	bf00      	nop
}
 8006648:	bf00      	nop
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006660:	b2db      	uxtb	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	2b02      	cmp	r3, #2
 8006666:	d81e      	bhi.n	80066a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	88db      	ldrh	r3, [r3, #6]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d004      	beq.n	800667a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f890 	bl	8006798 <USBD_CtlError>
        break;
 8006678:	e01a      	b.n	80066b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f043 0202 	orr.w	r2, r3, #2
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	330c      	adds	r3, #12
 800669a:	2202      	movs	r2, #2
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8eb 	bl	800687a <USBD_CtlSendData>
      break;
 80066a4:	e004      	b.n	80066b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f875 	bl	8006798 <USBD_CtlError>
      break;
 80066ae:	bf00      	nop
  }
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	885b      	ldrh	r3, [r3, #2]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d106      	bne.n	80066d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f92b 	bl	800692e <USBD_CtlSendStatus>
  }
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d80b      	bhi.n	8006710 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	885b      	ldrh	r3, [r3, #2]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10c      	bne.n	800671a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f910 	bl	800692e <USBD_CtlSendStatus>
      }
      break;
 800670e:	e004      	b.n	800671a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f840 	bl	8006798 <USBD_CtlError>
      break;
 8006718:	e000      	b.n	800671c <USBD_ClrFeature+0x3c>
      break;
 800671a:	bf00      	nop
  }
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff fabb 	bl	8005cca <SWAPBYTE>
 8006754:	4603      	mov	r3, r0
 8006756:	461a      	mov	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3301      	adds	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff faae 	bl	8005cca <SWAPBYTE>
 800676e:	4603      	mov	r3, r0
 8006770:	461a      	mov	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3301      	adds	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff faa1 	bl	8005cca <SWAPBYTE>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	80da      	strh	r2, [r3, #6]
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067a2:	2180      	movs	r1, #128	; 0x80
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fcdd 	bl	8007164 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067aa:	2100      	movs	r1, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fcd9 	bl	8007164 <USBD_LL_StallEP>
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d036      	beq.n	800683e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80067d4:	6938      	ldr	r0, [r7, #16]
 80067d6:	f000 f836 	bl	8006846 <USBD_GetLen>
 80067da:	4603      	mov	r3, r0
 80067dc:	3301      	adds	r3, #1
 80067de:	b29b      	uxth	r3, r3
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	4413      	add	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	7812      	ldrb	r2, [r2, #0]
 80067f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	3301      	adds	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	4413      	add	r3, r2
 8006800:	2203      	movs	r2, #3
 8006802:	701a      	strb	r2, [r3, #0]
  idx++;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	3301      	adds	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800680a:	e013      	b.n	8006834 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	4413      	add	r3, r2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	7812      	ldrb	r2, [r2, #0]
 8006816:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	3301      	adds	r3, #1
 800681c:	613b      	str	r3, [r7, #16]
    idx++;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	3301      	adds	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	4413      	add	r3, r2
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
    idx++;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	3301      	adds	r3, #1
 8006832:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e7      	bne.n	800680c <USBD_GetString+0x52>
 800683c:	e000      	b.n	8006840 <USBD_GetString+0x86>
    return;
 800683e:	bf00      	nop
  }
}
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006856:	e005      	b.n	8006864 <USBD_GetLen+0x1e>
  {
    len++;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	3301      	adds	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	3301      	adds	r3, #1
 8006862:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f5      	bne.n	8006858 <USBD_GetLen+0x12>
  }

  return len;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2202      	movs	r2, #2
 800688a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	2100      	movs	r1, #0
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fce8 	bl	8007276 <USBD_LL_Transmit>

  return USBD_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	2100      	movs	r1, #0
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fcd7 	bl	8007276 <USBD_LL_Transmit>

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2203      	movs	r2, #3
 80068e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	2100      	movs	r1, #0
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fcdb 	bl	80072b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	2100      	movs	r1, #0
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fcca 	bl	80072b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2204      	movs	r2, #4
 800693a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800693e:	2300      	movs	r3, #0
 8006940:	2200      	movs	r2, #0
 8006942:	2100      	movs	r1, #0
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fc96 	bl	8007276 <USBD_LL_Transmit>

  return USBD_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2205      	movs	r2, #5
 8006960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006964:	2300      	movs	r3, #0
 8006966:	2200      	movs	r2, #0
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fca4 	bl	80072b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006980:	2200      	movs	r2, #0
 8006982:	4912      	ldr	r1, [pc, #72]	; (80069cc <MX_USB_DEVICE_Init+0x50>)
 8006984:	4812      	ldr	r0, [pc, #72]	; (80069d0 <MX_USB_DEVICE_Init+0x54>)
 8006986:	f7fe fe8f 	bl	80056a8 <USBD_Init>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006990:	f7f9 ff7a 	bl	8000888 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006994:	490f      	ldr	r1, [pc, #60]	; (80069d4 <MX_USB_DEVICE_Init+0x58>)
 8006996:	480e      	ldr	r0, [pc, #56]	; (80069d0 <MX_USB_DEVICE_Init+0x54>)
 8006998:	f7fe feb6 	bl	8005708 <USBD_RegisterClass>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80069a2:	f7f9 ff71 	bl	8000888 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80069a6:	490c      	ldr	r1, [pc, #48]	; (80069d8 <MX_USB_DEVICE_Init+0x5c>)
 80069a8:	4809      	ldr	r0, [pc, #36]	; (80069d0 <MX_USB_DEVICE_Init+0x54>)
 80069aa:	f7fe fdd7 	bl	800555c <USBD_CDC_RegisterInterface>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80069b4:	f7f9 ff68 	bl	8000888 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069b8:	4805      	ldr	r0, [pc, #20]	; (80069d0 <MX_USB_DEVICE_Init+0x54>)
 80069ba:	f7fe fecc 	bl	8005756 <USBD_Start>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80069c4:	f7f9 ff60 	bl	8000888 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80069c8:	bf00      	nop
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000130 	.word	0x20000130
 80069d0:	2000040c 	.word	0x2000040c
 80069d4:	20000018 	.word	0x20000018
 80069d8:	2000011c 	.word	0x2000011c

080069dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80069e0:	2200      	movs	r2, #0
 80069e2:	4905      	ldr	r1, [pc, #20]	; (80069f8 <CDC_Init_FS+0x1c>)
 80069e4:	4805      	ldr	r0, [pc, #20]	; (80069fc <CDC_Init_FS+0x20>)
 80069e6:	f7fe fdce 	bl	8005586 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80069ea:	4905      	ldr	r1, [pc, #20]	; (8006a00 <CDC_Init_FS+0x24>)
 80069ec:	4803      	ldr	r0, [pc, #12]	; (80069fc <CDC_Init_FS+0x20>)
 80069ee:	f7fe fde8 	bl	80055c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80069f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000ac4 	.word	0x20000ac4
 80069fc:	2000040c 	.word	0x2000040c
 8006a00:	200006dc 	.word	0x200006dc

08006a04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	71fb      	strb	r3, [r7, #7]
 8006a20:	4613      	mov	r3, r2
 8006a22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b23      	cmp	r3, #35	; 0x23
 8006a28:	d84a      	bhi.n	8006ac0 <CDC_Control_FS+0xac>
 8006a2a:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <CDC_Control_FS+0x1c>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006ac1 	.word	0x08006ac1
 8006a34:	08006ac1 	.word	0x08006ac1
 8006a38:	08006ac1 	.word	0x08006ac1
 8006a3c:	08006ac1 	.word	0x08006ac1
 8006a40:	08006ac1 	.word	0x08006ac1
 8006a44:	08006ac1 	.word	0x08006ac1
 8006a48:	08006ac1 	.word	0x08006ac1
 8006a4c:	08006ac1 	.word	0x08006ac1
 8006a50:	08006ac1 	.word	0x08006ac1
 8006a54:	08006ac1 	.word	0x08006ac1
 8006a58:	08006ac1 	.word	0x08006ac1
 8006a5c:	08006ac1 	.word	0x08006ac1
 8006a60:	08006ac1 	.word	0x08006ac1
 8006a64:	08006ac1 	.word	0x08006ac1
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006ac1 	.word	0x08006ac1
 8006a70:	08006ac1 	.word	0x08006ac1
 8006a74:	08006ac1 	.word	0x08006ac1
 8006a78:	08006ac1 	.word	0x08006ac1
 8006a7c:	08006ac1 	.word	0x08006ac1
 8006a80:	08006ac1 	.word	0x08006ac1
 8006a84:	08006ac1 	.word	0x08006ac1
 8006a88:	08006ac1 	.word	0x08006ac1
 8006a8c:	08006ac1 	.word	0x08006ac1
 8006a90:	08006ac1 	.word	0x08006ac1
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	08006ac1 	.word	0x08006ac1
 8006a9c:	08006ac1 	.word	0x08006ac1
 8006aa0:	08006ac1 	.word	0x08006ac1
 8006aa4:	08006ac1 	.word	0x08006ac1
 8006aa8:	08006ac1 	.word	0x08006ac1
 8006aac:	08006ac1 	.word	0x08006ac1
 8006ab0:	08006ac1 	.word	0x08006ac1
 8006ab4:	08006ac1 	.word	0x08006ac1
 8006ab8:	08006ac1 	.word	0x08006ac1
 8006abc:	08006ac1 	.word	0x08006ac1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ac0:	bf00      	nop
  }

  return (USBD_OK);
 8006ac2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4808      	ldr	r0, [pc, #32]	; (8006b00 <CDC_Receive_FS+0x30>)
 8006ade:	f7fe fd70 	bl	80055c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ae2:	4807      	ldr	r0, [pc, #28]	; (8006b00 <CDC_Receive_FS+0x30>)
 8006ae4:	f7fe fdb6 	bl	8005654 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f807 	bl	8006b04 <CDC_Transmit_FS>
  return (USBD_OK);
 8006af6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	2000040c 	.word	0x2000040c

08006b04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <CDC_Transmit_FS+0x48>)
 8006b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e00b      	b.n	8006b42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4806      	ldr	r0, [pc, #24]	; (8006b4c <CDC_Transmit_FS+0x48>)
 8006b32:	f7fe fd28 	bl	8005586 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b36:	4805      	ldr	r0, [pc, #20]	; (8006b4c <CDC_Transmit_FS+0x48>)
 8006b38:	f7fe fd5c 	bl	80055f4 <USBD_CDC_TransmitPacket>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	2000040c 	.word	0x2000040c

08006b50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	6039      	str	r1, [r7, #0]
 8006b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2212      	movs	r2, #18
 8006b84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b86:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	2000014c 	.word	0x2000014c

08006b98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	6039      	str	r1, [r7, #0]
 8006ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006baa:	4b03      	ldr	r3, [pc, #12]	; (8006bb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	20000160 	.word	0x20000160

08006bbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4907      	ldr	r1, [pc, #28]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bd2:	4808      	ldr	r0, [pc, #32]	; (8006bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bd4:	f7ff fdf1 	bl	80067ba <USBD_GetString>
 8006bd8:	e004      	b.n	8006be4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bde:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006be0:	f7ff fdeb 	bl	80067ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000eac 	.word	0x20000eac
 8006bf4:	08007418 	.word	0x08007418

08006bf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	4904      	ldr	r1, [pc, #16]	; (8006c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c08:	4804      	ldr	r0, [pc, #16]	; (8006c1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c0a:	f7ff fdd6 	bl	80067ba <USBD_GetString>
  return USBD_StrDesc;
 8006c0e:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000eac 	.word	0x20000eac
 8006c1c:	08007430 	.word	0x08007430

08006c20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	6039      	str	r1, [r7, #0]
 8006c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	221a      	movs	r2, #26
 8006c30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c32:	f000 f843 	bl	8006cbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c36:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000164 	.word	0x20000164

08006c44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d105      	bne.n	8006c62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	4907      	ldr	r1, [pc, #28]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c5a:	4808      	ldr	r0, [pc, #32]	; (8006c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c5c:	f7ff fdad 	bl	80067ba <USBD_GetString>
 8006c60:	e004      	b.n	8006c6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	4904      	ldr	r1, [pc, #16]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c66:	4805      	ldr	r0, [pc, #20]	; (8006c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c68:	f7ff fda7 	bl	80067ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c6c:	4b02      	ldr	r3, [pc, #8]	; (8006c78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000eac 	.word	0x20000eac
 8006c7c:	0800743c 	.word	0x0800743c

08006c80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4907      	ldr	r1, [pc, #28]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c96:	4808      	ldr	r0, [pc, #32]	; (8006cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c98:	f7ff fd8f 	bl	80067ba <USBD_GetString>
 8006c9c:	e004      	b.n	8006ca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4904      	ldr	r1, [pc, #16]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ca2:	4805      	ldr	r0, [pc, #20]	; (8006cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ca4:	f7ff fd89 	bl	80067ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000eac 	.word	0x20000eac
 8006cb8:	08007448 	.word	0x08007448

08006cbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <Get_SerialNum+0x44>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <Get_SerialNum+0x48>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cce:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <Get_SerialNum+0x4c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ce2:	2208      	movs	r2, #8
 8006ce4:	4909      	ldr	r1, [pc, #36]	; (8006d0c <Get_SerialNum+0x50>)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f814 	bl	8006d14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cec:	2204      	movs	r2, #4
 8006cee:	4908      	ldr	r1, [pc, #32]	; (8006d10 <Get_SerialNum+0x54>)
 8006cf0:	68b8      	ldr	r0, [r7, #8]
 8006cf2:	f000 f80f 	bl	8006d14 <IntToUnicode>
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	1fff7a10 	.word	0x1fff7a10
 8006d04:	1fff7a14 	.word	0x1fff7a14
 8006d08:	1fff7a18 	.word	0x1fff7a18
 8006d0c:	20000166 	.word	0x20000166
 8006d10:	20000176 	.word	0x20000176

08006d14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
 8006d2a:	e027      	b.n	8006d7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	0f1b      	lsrs	r3, r3, #28
 8006d30:	2b09      	cmp	r3, #9
 8006d32:	d80b      	bhi.n	8006d4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	0f1b      	lsrs	r3, r3, #28
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	440b      	add	r3, r1
 8006d44:	3230      	adds	r2, #48	; 0x30
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e00a      	b.n	8006d62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	0f1b      	lsrs	r3, r3, #28
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4619      	mov	r1, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3237      	adds	r2, #55	; 0x37
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
 8006d7c:	7dfa      	ldrb	r2, [r7, #23]
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3d3      	bcc.n	8006d2c <IntToUnicode+0x18>
  }
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d9c:	f107 0314 	add.w	r3, r7, #20
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006db4:	d13a      	bne.n	8006e2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006db6:	2300      	movs	r3, #0
 8006db8:	613b      	str	r3, [r7, #16]
 8006dba:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <HAL_PCD_MspInit+0xa0>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	4a1d      	ldr	r2, [pc, #116]	; (8006e34 <HAL_PCD_MspInit+0xa0>)
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	; (8006e34 <HAL_PCD_MspInit+0xa0>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006dd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006de0:	2303      	movs	r3, #3
 8006de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006de4:	230a      	movs	r3, #10
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de8:	f107 0314 	add.w	r3, r7, #20
 8006dec:	4619      	mov	r1, r3
 8006dee:	4812      	ldr	r0, [pc, #72]	; (8006e38 <HAL_PCD_MspInit+0xa4>)
 8006df0:	f7f9 fff4 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006df4:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <HAL_PCD_MspInit+0xa0>)
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	4a0e      	ldr	r2, [pc, #56]	; (8006e34 <HAL_PCD_MspInit+0xa0>)
 8006dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfe:	6353      	str	r3, [r2, #52]	; 0x34
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_PCD_MspInit+0xa0>)
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <HAL_PCD_MspInit+0xa0>)
 8006e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e0e:	6453      	str	r3, [r2, #68]	; 0x44
 8006e10:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <HAL_PCD_MspInit+0xa0>)
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	2043      	movs	r0, #67	; 0x43
 8006e22:	f7f9 ffa4 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e26:	2043      	movs	r0, #67	; 0x43
 8006e28:	f7f9 ffbd 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	3728      	adds	r7, #40	; 0x28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40020000 	.word	0x40020000

08006e3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f7fe fcca 	bl	80057ec <USBD_LL_SetupStage>
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	f7fe fd04 	bl	8005896 <USBD_LL_DataOutStage>
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	3348      	adds	r3, #72	; 0x48
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f7fe fd4d 	bl	800595c <USBD_LL_DataInStage>
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fe61 	bl	8005ba0 <USBD_LL_SOF>
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d001      	beq.n	8006efe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006efa:	f7f9 fcc5 	bl	8000888 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f04:	7bfa      	ldrb	r2, [r7, #15]
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fe0b 	bl	8005b24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe fdb7 	bl	8005a88 <USBD_LL_Reset>
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fe06 	bl	8005b44 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f58:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <HAL_PCD_SuspendCallback+0x48>)
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	4a03      	ldr	r2, [pc, #12]	; (8006f6c <HAL_PCD_SuspendCallback+0x48>)
 8006f5e:	f043 0306 	orr.w	r3, r3, #6
 8006f62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	e000ed00 	.word	0xe000ed00

08006f70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fdf6 	bl	8005b70 <USBD_LL_Resume>
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fe44 	bl	8005c30 <USBD_LL_IsoOUTIncomplete>
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fe0c 	bl	8005be4 <USBD_LL_IsoINIncomplete>
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fe4a 	bl	8005c7c <USBD_LL_DevConnected>
}
 8006fe8:	bf00      	nop
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fe47 	bl	8005c92 <USBD_LL_DevDisconnected>
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d13c      	bne.n	8007096 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800701c:	4a20      	ldr	r2, [pc, #128]	; (80070a0 <USBD_LL_Init+0x94>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a1e      	ldr	r2, [pc, #120]	; (80070a0 <USBD_LL_Init+0x94>)
 8007028:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800702c:	4b1c      	ldr	r3, [pc, #112]	; (80070a0 <USBD_LL_Init+0x94>)
 800702e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007032:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007034:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <USBD_LL_Init+0x94>)
 8007036:	2204      	movs	r2, #4
 8007038:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800703a:	4b19      	ldr	r3, [pc, #100]	; (80070a0 <USBD_LL_Init+0x94>)
 800703c:	2202      	movs	r2, #2
 800703e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <USBD_LL_Init+0x94>)
 8007042:	2200      	movs	r2, #0
 8007044:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007046:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <USBD_LL_Init+0x94>)
 8007048:	2202      	movs	r2, #2
 800704a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800704c:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <USBD_LL_Init+0x94>)
 800704e:	2200      	movs	r2, #0
 8007050:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007052:	4b13      	ldr	r3, [pc, #76]	; (80070a0 <USBD_LL_Init+0x94>)
 8007054:	2200      	movs	r2, #0
 8007056:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007058:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <USBD_LL_Init+0x94>)
 800705a:	2200      	movs	r2, #0
 800705c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800705e:	4b10      	ldr	r3, [pc, #64]	; (80070a0 <USBD_LL_Init+0x94>)
 8007060:	2200      	movs	r2, #0
 8007062:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007064:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <USBD_LL_Init+0x94>)
 8007066:	2200      	movs	r2, #0
 8007068:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800706a:	480d      	ldr	r0, [pc, #52]	; (80070a0 <USBD_LL_Init+0x94>)
 800706c:	f7fa f86b 	bl	8001146 <HAL_PCD_Init>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007076:	f7f9 fc07 	bl	8000888 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	4808      	ldr	r0, [pc, #32]	; (80070a0 <USBD_LL_Init+0x94>)
 800707e:	f7fb f9c8 	bl	8002412 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007082:	2240      	movs	r2, #64	; 0x40
 8007084:	2100      	movs	r1, #0
 8007086:	4806      	ldr	r0, [pc, #24]	; (80070a0 <USBD_LL_Init+0x94>)
 8007088:	f7fb f97c 	bl	8002384 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800708c:	2280      	movs	r2, #128	; 0x80
 800708e:	2101      	movs	r1, #1
 8007090:	4803      	ldr	r0, [pc, #12]	; (80070a0 <USBD_LL_Init+0x94>)
 8007092:	f7fb f977 	bl	8002384 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	200010ac 	.word	0x200010ac

080070a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fa f960 	bl	8001380 <HAL_PCD_Start>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f942 	bl	8007350 <USBD_Get_USB_Status>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	4608      	mov	r0, r1
 80070e4:	4611      	mov	r1, r2
 80070e6:	461a      	mov	r2, r3
 80070e8:	4603      	mov	r3, r0
 80070ea:	70fb      	strb	r3, [r7, #3]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70bb      	strb	r3, [r7, #2]
 80070f0:	4613      	mov	r3, r2
 80070f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007102:	78bb      	ldrb	r3, [r7, #2]
 8007104:	883a      	ldrh	r2, [r7, #0]
 8007106:	78f9      	ldrb	r1, [r7, #3]
 8007108:	f7fa fd44 	bl	8001b94 <HAL_PCD_EP_Open>
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	4618      	mov	r0, r3
 8007114:	f000 f91c 	bl	8007350 <USBD_Get_USB_Status>
 8007118:	4603      	mov	r3, r0
 800711a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800711c:	7bbb      	ldrb	r3, [r7, #14]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007140:	78fa      	ldrb	r2, [r7, #3]
 8007142:	4611      	mov	r1, r2
 8007144:	4618      	mov	r0, r3
 8007146:	f7fa fd8d 	bl	8001c64 <HAL_PCD_EP_Close>
 800714a:	4603      	mov	r3, r0
 800714c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	4618      	mov	r0, r3
 8007152:	f000 f8fd 	bl	8007350 <USBD_Get_USB_Status>
 8007156:	4603      	mov	r3, r0
 8007158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800715a:	7bbb      	ldrb	r3, [r7, #14]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fa fe65 	bl	8001e52 <HAL_PCD_EP_SetStall>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 f8de 	bl	8007350 <USBD_Get_USB_Status>
 8007194:	4603      	mov	r3, r0
 8007196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007198:	7bbb      	ldrb	r3, [r7, #14]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	460b      	mov	r3, r1
 80071ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071bc:	78fa      	ldrb	r2, [r7, #3]
 80071be:	4611      	mov	r1, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fa feaa 	bl	8001f1a <HAL_PCD_EP_ClrStall>
 80071c6:	4603      	mov	r3, r0
 80071c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f8bf 	bl	8007350 <USBD_Get_USB_Status>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80071f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	da0b      	bge.n	8007214 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007202:	68f9      	ldr	r1, [r7, #12]
 8007204:	4613      	mov	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	1a9b      	subs	r3, r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	333e      	adds	r3, #62	; 0x3e
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	e00b      	b.n	800722c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	4613      	mov	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800722a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	4611      	mov	r1, r2
 8007256:	4618      	mov	r0, r3
 8007258:	f7fa fc77 	bl	8001b4a <HAL_PCD_SetAddress>
 800725c:	4603      	mov	r3, r0
 800725e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f874 	bl	8007350 <USBD_Get_USB_Status>
 8007268:	4603      	mov	r3, r0
 800726a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800726c:	7bbb      	ldrb	r3, [r7, #14]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
 8007282:	460b      	mov	r3, r1
 8007284:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007294:	7af9      	ldrb	r1, [r7, #11]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	f7fa fd90 	bl	8001dbe <HAL_PCD_EP_Transmit>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f853 	bl	8007350 <USBD_Get_USB_Status>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	460b      	mov	r3, r1
 80072c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80072d6:	7af9      	ldrb	r1, [r7, #11]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	f7fa fd0c 	bl	8001cf8 <HAL_PCD_EP_Receive>
 80072e0:	4603      	mov	r3, r0
 80072e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 f832 	bl	8007350 <USBD_Get_USB_Status>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f7fa fd3c 	bl	8001d8e <HAL_PCD_EP_GetRxCount>
 8007316:	4603      	mov	r3, r0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007328:	4b03      	ldr	r3, [pc, #12]	; (8007338 <USBD_static_malloc+0x18>)
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	200001a0 	.word	0x200001a0

0800733c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]

}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	2b03      	cmp	r3, #3
 8007362:	d817      	bhi.n	8007394 <USBD_Get_USB_Status+0x44>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USBD_Get_USB_Status+0x1c>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	0800737d 	.word	0x0800737d
 8007370:	08007383 	.word	0x08007383
 8007374:	08007389 	.word	0x08007389
 8007378:	0800738f 	.word	0x0800738f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]
    break;
 8007380:	e00b      	b.n	800739a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007382:	2303      	movs	r3, #3
 8007384:	73fb      	strb	r3, [r7, #15]
    break;
 8007386:	e008      	b.n	800739a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007388:	2301      	movs	r3, #1
 800738a:	73fb      	strb	r3, [r7, #15]
    break;
 800738c:	e005      	b.n	800739a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800738e:	2303      	movs	r3, #3
 8007390:	73fb      	strb	r3, [r7, #15]
    break;
 8007392:	e002      	b.n	800739a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007394:	2303      	movs	r3, #3
 8007396:	73fb      	strb	r3, [r7, #15]
    break;
 8007398:	bf00      	nop
  }
  return usb_status;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <__libc_init_array>:
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	4d0d      	ldr	r5, [pc, #52]	; (80073e0 <__libc_init_array+0x38>)
 80073ac:	4c0d      	ldr	r4, [pc, #52]	; (80073e4 <__libc_init_array+0x3c>)
 80073ae:	1b64      	subs	r4, r4, r5
 80073b0:	10a4      	asrs	r4, r4, #2
 80073b2:	2600      	movs	r6, #0
 80073b4:	42a6      	cmp	r6, r4
 80073b6:	d109      	bne.n	80073cc <__libc_init_array+0x24>
 80073b8:	4d0b      	ldr	r5, [pc, #44]	; (80073e8 <__libc_init_array+0x40>)
 80073ba:	4c0c      	ldr	r4, [pc, #48]	; (80073ec <__libc_init_array+0x44>)
 80073bc:	f000 f820 	bl	8007400 <_init>
 80073c0:	1b64      	subs	r4, r4, r5
 80073c2:	10a4      	asrs	r4, r4, #2
 80073c4:	2600      	movs	r6, #0
 80073c6:	42a6      	cmp	r6, r4
 80073c8:	d105      	bne.n	80073d6 <__libc_init_array+0x2e>
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d0:	4798      	blx	r3
 80073d2:	3601      	adds	r6, #1
 80073d4:	e7ee      	b.n	80073b4 <__libc_init_array+0xc>
 80073d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073da:	4798      	blx	r3
 80073dc:	3601      	adds	r6, #1
 80073de:	e7f2      	b.n	80073c6 <__libc_init_array+0x1e>
 80073e0:	08007470 	.word	0x08007470
 80073e4:	08007470 	.word	0x08007470
 80073e8:	08007470 	.word	0x08007470
 80073ec:	08007474 	.word	0x08007474

080073f0 <memset>:
 80073f0:	4402      	add	r2, r0
 80073f2:	4603      	mov	r3, r0
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d100      	bne.n	80073fa <memset+0xa>
 80073f8:	4770      	bx	lr
 80073fa:	f803 1b01 	strb.w	r1, [r3], #1
 80073fe:	e7f9      	b.n	80073f4 <memset+0x4>

08007400 <_init>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr

0800740c <_fini>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr
