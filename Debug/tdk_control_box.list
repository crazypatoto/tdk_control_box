
tdk_control_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c8  080080c8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d0  080080d0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080d4  080080d4  000180d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080080d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d8  200001e4  080082bc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016bc  080082bc  000216bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bfa  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035be  00000000  00000000  00038e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0003c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  0003d478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001934e  00000000  00000000  0003e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014274  00000000  00000000  00057706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f36c  00000000  00000000  0006b97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000face6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048fc  00000000  00000000  000fad3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fd4 	.word	0x08007fd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08007fd4 	.word	0x08007fd4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059e:	f000 fdeb 	bl	8001178 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a2:	f000 f96d 	bl	8000880 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a6:	f000 fa73 	bl	8000a90 <MX_GPIO_Init>
	MX_TIM1_Init();
 80005aa:	f000 f9d5 	bl	8000958 <MX_TIM1_Init>
	MX_USB_DEVICE_Init();
 80005ae:	f006 fb57 	bl	8006c60 <MX_USB_DEVICE_Init>
	MX_TIM2_Init();
 80005b2:	f000 fa21 	bl	80009f8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80005b6:	4899      	ldr	r0, [pc, #612]	; (800081c <main+0x284>)
 80005b8:	f002 ff48 	bl	800344c <HAL_TIM_Base_Start_IT>

	current_status = IDLE;
 80005bc:	4b98      	ldr	r3, [pc, #608]	; (8000820 <main+0x288>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	prev_status = IDLE;
 80005c2:	4b98      	ldr	r3, [pc, #608]	; (8000824 <main+0x28c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
	connected_flag = 0;
 80005c8:	4b97      	ldr	r3, [pc, #604]	; (8000828 <main+0x290>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	connected_flag_prev = 0;
 80005ce:	4b97      	ldr	r3, [pc, #604]	; (800082c <main+0x294>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	led_pin_count = 0;
 80005d4:	4b96      	ldr	r3, [pc, #600]	; (8000830 <main+0x298>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
	rxLen = 0;
 80005da:	4b96      	ldr	r3, [pc, #600]	; (8000834 <main+0x29c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
	last_rx_time = 0;
 80005e0:	4b95      	ldr	r3, [pc, #596]	; (8000838 <main+0x2a0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
	beep_index = 0;
 80005e6:	4b95      	ldr	r3, [pc, #596]	; (800083c <main+0x2a4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	beep_length = 0;
 80005ec:	4b94      	ldr	r3, [pc, #592]	; (8000840 <main+0x2a8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	beep_tick = 0;
 80005f2:	4b94      	ldr	r3, [pc, #592]	; (8000844 <main+0x2ac>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
	btn_green_tick = 0;
 80005f8:	4b93      	ldr	r3, [pc, #588]	; (8000848 <main+0x2b0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
	btn_yellow_tick = 0;
 80005fe:	4b93      	ldr	r3, [pc, #588]	; (800084c <main+0x2b4>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	btn_green_triggered_flag = 0;
 8000604:	4b92      	ldr	r3, [pc, #584]	; (8000850 <main+0x2b8>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	btn_yellow_triggered_flag = 0;
 800060a:	4b92      	ldr	r3, [pc, #584]	; (8000854 <main+0x2bc>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]

	ShortBeep(3);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 fad7 	bl	8000bc4 <ShortBeep>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		uint32_t now = HAL_GetTick();
 8000616:	f000 fe15 	bl	8001244 <HAL_GetTick>
 800061a:	6078      	str	r0, [r7, #4]

		if (rxLen > 0 && rxBuf[rxLen - 1] == '\n') {
 800061c:	4b85      	ldr	r3, [pc, #532]	; (8000834 <main+0x29c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d04f      	beq.n	80006c4 <main+0x12c>
 8000624:	4b83      	ldr	r3, [pc, #524]	; (8000834 <main+0x29c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3b01      	subs	r3, #1
 800062a:	4a8b      	ldr	r2, [pc, #556]	; (8000858 <main+0x2c0>)
 800062c:	5cd3      	ldrb	r3, [r2, r3]
 800062e:	2b0a      	cmp	r3, #10
 8000630:	d148      	bne.n	80006c4 <main+0x12c>
			rxBuf[rxLen - 1] = '\0';
 8000632:	4b80      	ldr	r3, [pc, #512]	; (8000834 <main+0x29c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	4a87      	ldr	r2, [pc, #540]	; (8000858 <main+0x2c0>)
 800063a:	2100      	movs	r1, #0
 800063c:	54d1      	strb	r1, [r2, r3]
			connected_flag = 1;
 800063e:	4b7a      	ldr	r3, [pc, #488]	; (8000828 <main+0x290>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
			last_rx_time = now;
 8000644:	4a7c      	ldr	r2, [pc, #496]	; (8000838 <main+0x2a0>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
			if (strcmp("idle", rxBuf) == 0) {
 800064a:	4983      	ldr	r1, [pc, #524]	; (8000858 <main+0x2c0>)
 800064c:	4883      	ldr	r0, [pc, #524]	; (800085c <main+0x2c4>)
 800064e:	f7ff fdc7 	bl	80001e0 <strcmp>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d103      	bne.n	8000660 <main+0xc8>
				current_status = IDLE;
 8000658:	4b71      	ldr	r3, [pc, #452]	; (8000820 <main+0x288>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	e02e      	b.n	80006be <main+0x126>
			} else if (strcmp("running A", rxBuf) == 0) {
 8000660:	497d      	ldr	r1, [pc, #500]	; (8000858 <main+0x2c0>)
 8000662:	487f      	ldr	r0, [pc, #508]	; (8000860 <main+0x2c8>)
 8000664:	f7ff fdbc 	bl	80001e0 <strcmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d103      	bne.n	8000676 <main+0xde>
				current_status = RUNNING_A;
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <main+0x288>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e023      	b.n	80006be <main+0x126>
			} else if (strcmp("running B", rxBuf) == 0) {
 8000676:	4978      	ldr	r1, [pc, #480]	; (8000858 <main+0x2c0>)
 8000678:	487a      	ldr	r0, [pc, #488]	; (8000864 <main+0x2cc>)
 800067a:	f7ff fdb1 	bl	80001e0 <strcmp>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d103      	bne.n	800068c <main+0xf4>
				current_status = RUNNING_B;
 8000684:	4b66      	ldr	r3, [pc, #408]	; (8000820 <main+0x288>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e018      	b.n	80006be <main+0x126>
			} else if (strcmp("stopped", rxBuf) == 0) {
 800068c:	4972      	ldr	r1, [pc, #456]	; (8000858 <main+0x2c0>)
 800068e:	4876      	ldr	r0, [pc, #472]	; (8000868 <main+0x2d0>)
 8000690:	f7ff fda6 	bl	80001e0 <strcmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d103      	bne.n	80006a2 <main+0x10a>
				current_status = STOPPED;
 800069a:	4b61      	ldr	r3, [pc, #388]	; (8000820 <main+0x288>)
 800069c:	2203      	movs	r2, #3
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e00d      	b.n	80006be <main+0x126>
			} else if (strcmp("error", rxBuf) == 0) {
 80006a2:	496d      	ldr	r1, [pc, #436]	; (8000858 <main+0x2c0>)
 80006a4:	4871      	ldr	r0, [pc, #452]	; (800086c <main+0x2d4>)
 80006a6:	f7ff fd9b 	bl	80001e0 <strcmp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d103      	bne.n	80006b8 <main+0x120>
				current_status = ERR;
 80006b0:	4b5b      	ldr	r3, [pc, #364]	; (8000820 <main+0x288>)
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e002      	b.n	80006be <main+0x126>
			} else {
				last_rx_time = 0;
 80006b8:	4b5f      	ldr	r3, [pc, #380]	; (8000838 <main+0x2a0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
			}
			rxLen = 0;
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <main+0x29c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
		}

		connected_flag =
				(now - last_rx_time) > DISCONNECTED_TIMEOUT ?
 80006c4:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <main+0x2a0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	1ad3      	subs	r3, r2, r3
		connected_flag =
 80006cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d0:	d802      	bhi.n	80006d8 <main+0x140>
 80006d2:	4b55      	ldr	r3, [pc, #340]	; (8000828 <main+0x290>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	e000      	b.n	80006da <main+0x142>
 80006d8:	2300      	movs	r3, #0
 80006da:	4a53      	ldr	r2, [pc, #332]	; (8000828 <main+0x290>)
 80006dc:	7013      	strb	r3, [r2, #0]
						0 : connected_flag;
		if (connected_flag && !connected_flag_prev)
 80006de:	4b52      	ldr	r3, [pc, #328]	; (8000828 <main+0x290>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <main+0x15c>
 80006e6:	4b51      	ldr	r3, [pc, #324]	; (800082c <main+0x294>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <main+0x15c>
			ShortBeep(2);
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 fa68 	bl	8000bc4 <ShortBeep>
		if (!connected_flag && connected_flag_prev)
 80006f4:	4b4c      	ldr	r3, [pc, #304]	; (8000828 <main+0x290>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d106      	bne.n	800070a <main+0x172>
 80006fc:	4b4b      	ldr	r3, [pc, #300]	; (800082c <main+0x294>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <main+0x172>
			LongBeep(3);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 fa95 	bl	8000c34 <LongBeep>
		connected_flag_prev = connected_flag;
 800070a:	4b47      	ldr	r3, [pc, #284]	; (8000828 <main+0x290>)
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	4b47      	ldr	r3, [pc, #284]	; (800082c <main+0x294>)
 8000710:	701a      	strb	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(GPIOB, BTN_GREEN_Pin)) {
 8000712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000716:	4856      	ldr	r0, [pc, #344]	; (8000870 <main+0x2d8>)
 8000718:	f001 f85a 	bl	80017d0 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <main+0x196>
			btn_green_tick = 0;
 8000722:	4b49      	ldr	r3, [pc, #292]	; (8000848 <main+0x2b0>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
			btn_green_triggered_flag = 0;
 8000728:	4b49      	ldr	r3, [pc, #292]	; (8000850 <main+0x2b8>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, BTN_YELLOW_Pin)) {
 800072e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000732:	484f      	ldr	r0, [pc, #316]	; (8000870 <main+0x2d8>)
 8000734:	f001 f84c 	bl	80017d0 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d005      	beq.n	800074a <main+0x1b2>
			btn_yellow_tick = 0;
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <main+0x2b4>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
			btn_yellow_triggered_flag = 0;
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <main+0x2bc>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
		}

		if (!HAL_GPIO_ReadPin(GPIOB, BTN_GREEN_Pin)
 800074a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074e:	4848      	ldr	r0, [pc, #288]	; (8000870 <main+0x2d8>)
 8000750:	f001 f83e 	bl	80017d0 <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d124      	bne.n	80007a4 <main+0x20c>
				&& !HAL_GPIO_ReadPin(GPIOB, BTN_YELLOW_Pin)
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	4844      	ldr	r0, [pc, #272]	; (8000870 <main+0x2d8>)
 8000760:	f001 f836 	bl	80017d0 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d11c      	bne.n	80007a4 <main+0x20c>
				&& btn_green_tick > 100 && btn_yellow_tick > 100
 800076a:	4b37      	ldr	r3, [pc, #220]	; (8000848 <main+0x2b0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b64      	cmp	r3, #100	; 0x64
 8000770:	d918      	bls.n	80007a4 <main+0x20c>
 8000772:	4b36      	ldr	r3, [pc, #216]	; (800084c <main+0x2b4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b64      	cmp	r3, #100	; 0x64
 8000778:	d914      	bls.n	80007a4 <main+0x20c>
				&& !btn_green_triggered_flag && !btn_yellow_triggered_flag) {
 800077a:	4b35      	ldr	r3, [pc, #212]	; (8000850 <main+0x2b8>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d110      	bne.n	80007a4 <main+0x20c>
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <main+0x2bc>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10c      	bne.n	80007a4 <main+0x20c>
			btn_green_triggered_flag = 1;
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <main+0x2b8>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
			btn_yellow_triggered_flag = 1;
 8000790:	4b30      	ldr	r3, [pc, #192]	; (8000854 <main+0x2bc>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
			LongBeep(2);
 8000796:	2002      	movs	r0, #2
 8000798:	f000 fa4c 	bl	8000c34 <LongBeep>
			usb_printf("stop\n");
 800079c:	4835      	ldr	r0, [pc, #212]	; (8000874 <main+0x2dc>)
 800079e:	f006 fb65 	bl	8006e6c <usb_printf>
 80007a2:	e039      	b.n	8000818 <main+0x280>
		} else if (!HAL_GPIO_ReadPin(GPIOB, BTN_GREEN_Pin)
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	4831      	ldr	r0, [pc, #196]	; (8000870 <main+0x2d8>)
 80007aa:	f001 f811 	bl	80017d0 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <main+0x244>
				&& btn_green_tick > 500 && !btn_green_triggered_flag) {
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <main+0x2b0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007bc:	d90e      	bls.n	80007dc <main+0x244>
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <main+0x2b8>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d10a      	bne.n	80007dc <main+0x244>
			btn_green_triggered_flag = 1;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <main+0x2b8>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
			ShortLongBeep(1, 1);
 80007cc:	2101      	movs	r1, #1
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 fa68 	bl	8000ca4 <ShortLongBeep>
			usb_printf("start A\n");
 80007d4:	4828      	ldr	r0, [pc, #160]	; (8000878 <main+0x2e0>)
 80007d6:	f006 fb49 	bl	8006e6c <usb_printf>
 80007da:	e01d      	b.n	8000818 <main+0x280>
		} else if (!HAL_GPIO_ReadPin(GPIOB, BTN_YELLOW_Pin)
 80007dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e0:	4823      	ldr	r0, [pc, #140]	; (8000870 <main+0x2d8>)
 80007e2:	f000 fff5 	bl	80017d0 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	f47f af14 	bne.w	8000616 <main+0x7e>
				&& btn_yellow_tick > 500 && !btn_yellow_triggered_flag) {
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <main+0x2b4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007f6:	f67f af0e 	bls.w	8000616 <main+0x7e>
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <main+0x2bc>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	f47f af09 	bne.w	8000616 <main+0x7e>
			btn_yellow_triggered_flag = 1;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <main+0x2bc>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
			ShortLongBeep(2, 1);
 800080a:	2101      	movs	r1, #1
 800080c:	2002      	movs	r0, #2
 800080e:	f000 fa49 	bl	8000ca4 <ShortLongBeep>
			usb_printf("start B\n");
 8000812:	481a      	ldr	r0, [pc, #104]	; (800087c <main+0x2e4>)
 8000814:	f006 fb2a 	bl	8006e6c <usb_printf>
	while (1) {
 8000818:	e6fd      	b.n	8000616 <main+0x7e>
 800081a:	bf00      	nop
 800081c:	200005b0 	.word	0x200005b0
 8000820:	20000448 	.word	0x20000448
 8000824:	20000451 	.word	0x20000451
 8000828:	20000452 	.word	0x20000452
 800082c:	20000558 	.word	0x20000558
 8000830:	200005ad 	.word	0x200005ad
 8000834:	20000430 	.word	0x20000430
 8000838:	20000554 	.word	0x20000554
 800083c:	200005ac 	.word	0x200005ac
 8000840:	20000450 	.word	0x20000450
 8000844:	2000055c 	.word	0x2000055c
 8000848:	2000044c 	.word	0x2000044c
 800084c:	200005f8 	.word	0x200005f8
 8000850:	200005fc 	.word	0x200005fc
 8000854:	200005fd 	.word	0x200005fd
 8000858:	20000454 	.word	0x20000454
 800085c:	08007fec 	.word	0x08007fec
 8000860:	08007ff4 	.word	0x08007ff4
 8000864:	08008000 	.word	0x08008000
 8000868:	0800800c 	.word	0x0800800c
 800086c:	08008014 	.word	0x08008014
 8000870:	40020400 	.word	0x40020400
 8000874:	0800801c 	.word	0x0800801c
 8000878:	08008024 	.word	0x08008024
 800087c:	08008030 	.word	0x08008030

08000880 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f006 ff5e 	bl	8007750 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <SystemClock_Config+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a28      	ldr	r2, [pc, #160]	; (8000950 <SystemClock_Config+0xd0>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <SystemClock_Config+0xd0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd4>)
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80008f4:	2319      	movs	r3, #25
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80008f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008fc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008fe:	2304      	movs	r3, #4
 8000900:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000902:	2307      	movs	r3, #7
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f002 f92e 	bl	8002b6c <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
		Error_Handler();
 8000916:	f000 fb0b 	bl	8000f30 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fb90 	bl	800305c <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xc6>
		Error_Handler();
 8000942:	f000 faf5 	bl	8000f30 <Error_Handler>
	}
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <MX_TIM1_Init+0x9c>)
 8000978:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_TIM1_Init+0x98>)
 800097c:	2253      	movs	r2, #83	; 0x53
 800097e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2000;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000988:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800098c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_TIM1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009a2:	f002 fd03 	bl	80033ac <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x58>
		Error_Handler();
 80009ac:	f000 fac0 	bl	8000f30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009be:	f002 feaf 	bl	8003720 <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x74>
		Error_Handler();
 80009c8:	f000 fab2 	bl	8000f30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009da:	f003 f8b5 	bl	8003b48 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80009e4:	f000 faa4 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000560 	.word	0x20000560
 80009f4:	40010000 	.word	0x40010000

080009f8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 83;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a1e:	2253      	movs	r2, #83	; 0x53
 8000a20:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a3e:	f002 fcb5 	bl	80033ac <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0x54>
		Error_Handler();
 8000a48:	f000 fa72 	bl	8000f30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a50:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4619      	mov	r1, r3
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a5a:	f002 fe61 	bl	8003720 <HAL_TIM_ConfigClockSource>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000a64:	f000 fa64 	bl	8000f30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_TIM2_Init+0x94>)
 8000a76:	f003 f867 	bl	8003b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000a80:	f000 fa56 	bl	8000f30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200005b0 	.word	0x200005b0

08000a90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a41      	ldr	r2, [pc, #260]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a3a      	ldr	r2, [pc, #232]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a33      	ldr	r2, [pc, #204]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1c:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <MX_GPIO_Init+0x128>)
 8000b1e:	f000 fe6f 	bl	8001800 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b28:	4824      	ldr	r0, [pc, #144]	; (8000bbc <MX_GPIO_Init+0x12c>)
 8000b2a:	f000 fe69 	bl	8001800 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_Pin,
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2138      	movs	r1, #56	; 0x38
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0x130>)
 8000b34:	f000 fe64 	bl	8001800 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : ONBOARD_LED_Pin */
	GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8000b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <MX_GPIO_Init+0x128>)
 8000b52:	f000 fcb9 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_GREEN_Pin BTN_YELLOW_Pin */
	GPIO_InitStruct.Pin = BTN_GREEN_Pin | BTN_YELLOW_Pin;
 8000b56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4815      	ldr	r0, [pc, #84]	; (8000bc0 <MX_GPIO_Init+0x130>)
 8000b6c:	f000 fcac 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUZZER_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_GPIO_Init+0x12c>)
 8000b8a:	f000 fc9d 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_YELLOW_Pin LED_GREEN_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_Pin;
 8000b8e:	2338      	movs	r3, #56	; 0x38
 8000b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <MX_GPIO_Init+0x130>)
 8000ba6:	f000 fc8f 	bl	80014c8 <HAL_GPIO_Init>

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <ShortBeep>:

/* USER CODE BEGIN 4 */

void ShortBeep(int count) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e00f      	b.n	8000bf6 <ShortBeep+0x32>
		beep_buffer[i << 1] = 100;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <ShortBeep+0x60>)
 8000bdc:	2164      	movs	r1, #100	; 0x64
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		beep_buffer[(i << 1) + 1] = 30;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <ShortBeep+0x60>)
 8000bea:	211e      	movs	r1, #30
 8000bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < count; i++) {
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dbeb      	blt.n	8000bd6 <ShortBeep+0x12>
	}
	beep_length = count * 2;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <ShortBeep+0x64>)
 8000c08:	701a      	strb	r2, [r3, #0]
	beep_index = 0;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <ShortBeep+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
	beep_tick = 0;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <ShortBeep+0x6c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000434 	.word	0x20000434
 8000c28:	20000450 	.word	0x20000450
 8000c2c:	200005ac 	.word	0x200005ac
 8000c30:	2000055c 	.word	0x2000055c

08000c34 <LongBeep>:

void LongBeep(int count) {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e010      	b.n	8000c68 <LongBeep+0x34>
		beep_buffer[i << 1] = 300;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <LongBeep+0x60>)
 8000c4c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		beep_buffer[(i << 1) + 1] = 30;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LongBeep+0x60>)
 8000c5c:	211e      	movs	r1, #30
 8000c5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < count; i++) {
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbea      	blt.n	8000c46 <LongBeep+0x12>
	}
	beep_length = count * 2;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <LongBeep+0x64>)
 8000c7a:	701a      	strb	r2, [r3, #0]
	beep_index = 0;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <LongBeep+0x68>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
	beep_tick = 0;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <LongBeep+0x6c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20000434 	.word	0x20000434
 8000c98:	20000450 	.word	0x20000450
 8000c9c:	200005ac 	.word	0x200005ac
 8000ca0:	2000055c 	.word	0x2000055c

08000ca4 <ShortLongBeep>:

void ShortLongBeep(int short_count, int long_count) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	int i = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
	int count = short_count + long_count;
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; i++) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e016      	b.n	8000cee <ShortLongBeep+0x4a>
		beep_buffer[i << 1] = i < short_count ? 100 : 300;
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	da01      	bge.n	8000ccc <ShortLongBeep+0x28>
 8000cc8:	2164      	movs	r1, #100	; 0x64
 8000cca:	e001      	b.n	8000cd0 <ShortLongBeep+0x2c>
 8000ccc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <ShortLongBeep+0x78>)
 8000cd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		beep_buffer[(i << 1) + 1] = 30;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	3301      	adds	r3, #1
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <ShortLongBeep+0x78>)
 8000ce2:	211e      	movs	r1, #30
 8000ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < count; i++) {
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dbe4      	blt.n	8000cc0 <ShortLongBeep+0x1c>
	}
	beep_length = count * 2;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <ShortLongBeep+0x7c>)
 8000d00:	701a      	strb	r2, [r3, #0]
	beep_index = 0;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <ShortLongBeep+0x80>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	beep_tick = 0;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <ShortLongBeep+0x84>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000434 	.word	0x20000434
 8000d20:	20000450 	.word	0x20000450
 8000d24:	200005ac 	.word	0x200005ac
 8000d28:	2000055c 	.word	0x2000055c

08000d2c <TIMER2_ISR>:

void TIMER2_ISR() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	beep_tick++;
 8000d30:	4b72      	ldr	r3, [pc, #456]	; (8000efc <TIMER2_ISR+0x1d0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a71      	ldr	r2, [pc, #452]	; (8000efc <TIMER2_ISR+0x1d0>)
 8000d38:	6013      	str	r3, [r2, #0]

	if (beep_index < beep_length) {
 8000d3a:	4b71      	ldr	r3, [pc, #452]	; (8000f00 <TIMER2_ISR+0x1d4>)
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	4b71      	ldr	r3, [pc, #452]	; (8000f04 <TIMER2_ISR+0x1d8>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d222      	bcs.n	8000d8c <TIMER2_ISR+0x60>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,
				~(beep_index & 0x01) & 0x01);
 8000d46:	4b6e      	ldr	r3, [pc, #440]	; (8000f00 <TIMER2_ISR+0x1d4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf0c      	ite	eq
 8000d52:	2301      	moveq	r3, #1
 8000d54:	2300      	movne	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5e:	486a      	ldr	r0, [pc, #424]	; (8000f08 <TIMER2_ISR+0x1dc>)
 8000d60:	f000 fd4e 	bl	8001800 <HAL_GPIO_WritePin>
		if (beep_tick > beep_buffer[beep_index]) {
 8000d64:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <TIMER2_ISR+0x1d4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <TIMER2_ISR+0x1e0>)
 8000d6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b62      	ldr	r3, [pc, #392]	; (8000efc <TIMER2_ISR+0x1d0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d208      	bcs.n	8000d8c <TIMER2_ISR+0x60>
			beep_index++;
 8000d7a:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <TIMER2_ISR+0x1d4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b5f      	ldr	r3, [pc, #380]	; (8000f00 <TIMER2_ISR+0x1d4>)
 8000d84:	701a      	strb	r2, [r3, #0]
			beep_tick = 0;
 8000d86:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <TIMER2_ISR+0x1d0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
		}
	}

	led_tick++;
 8000d8c:	4b60      	ldr	r3, [pc, #384]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4a5f      	ldr	r2, [pc, #380]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000d94:	6013      	str	r3, [r2, #0]
	if (!connected_flag) {
 8000d96:	4b5f      	ldr	r3, [pc, #380]	; (8000f14 <TIMER2_ISR+0x1e8>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11d      	bne.n	8000dda <TIMER2_ISR+0xae>
		if ((led_tick) > 100) {
 8000d9e:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	f240 808d 	bls.w	8000ec2 <TIMER2_ISR+0x196>
			HAL_GPIO_TogglePin(GPIOB, led_pins[led_pin_count++]);
 8000da8:	4b5b      	ldr	r3, [pc, #364]	; (8000f18 <TIMER2_ISR+0x1ec>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	b2d1      	uxtb	r1, r2
 8000db0:	4a59      	ldr	r2, [pc, #356]	; (8000f18 <TIMER2_ISR+0x1ec>)
 8000db2:	7011      	strb	r1, [r2, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <TIMER2_ISR+0x1f0>)
 8000db8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4858      	ldr	r0, [pc, #352]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000dc0:	f000 fd37 	bl	8001832 <HAL_GPIO_TogglePin>
			if (led_pin_count >= 3)
 8000dc4:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <TIMER2_ISR+0x1ec>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d902      	bls.n	8000dd2 <TIMER2_ISR+0xa6>
				led_pin_count = 0;
 8000dcc:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <TIMER2_ISR+0x1ec>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
			led_tick = 0;
 8000dd2:	4b4f      	ldr	r3, [pc, #316]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e073      	b.n	8000ec2 <TIMER2_ISR+0x196>
		}
	} else {
		switch (current_status) {
 8000dda:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <TIMER2_ISR+0x1f8>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	dc0e      	bgt.n	8000e00 <TIMER2_ISR+0xd4>
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db64      	blt.n	8000eb0 <TIMER2_ISR+0x184>
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d862      	bhi.n	8000eb0 <TIMER2_ISR+0x184>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <TIMER2_ISR+0xc4>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e07 	.word	0x08000e07
 8000df4:	08000e2b 	.word	0x08000e2b
 8000df8:	08000e4d 	.word	0x08000e4d
 8000dfc:	08000e6f 	.word	0x08000e6f
 8000e00:	2bff      	cmp	r3, #255	; 0xff
 8000e02:	d03f      	beq.n	8000e84 <TIMER2_ISR+0x158>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
				led_tick = 0;
			}
			break;
		default:
			break;
 8000e04:	e054      	b.n	8000eb0 <TIMER2_ISR+0x184>
			if ((led_tick) > 500) {
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e0e:	d951      	bls.n	8000eb4 <TIMER2_ISR+0x188>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin | LED_GREEN_Pin,
 8000e10:	2200      	movs	r2, #0
 8000e12:	2118      	movs	r1, #24
 8000e14:	4842      	ldr	r0, [pc, #264]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e16:	f000 fcf3 	bl	8001800 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	4840      	ldr	r0, [pc, #256]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e1e:	f000 fd08 	bl	8001832 <HAL_GPIO_TogglePin>
				led_tick = 0;
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
			break;
 8000e28:	e044      	b.n	8000eb4 <TIMER2_ISR+0x188>
			if ((led_tick) > 100) {
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d942      	bls.n	8000eb8 <TIMER2_ISR+0x18c>
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin | LED_YELLOW_Pin,
 8000e32:	2200      	movs	r2, #0
 8000e34:	2128      	movs	r1, #40	; 0x28
 8000e36:	483a      	ldr	r0, [pc, #232]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e38:	f000 fce2 	bl	8001800 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin);
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4838      	ldr	r0, [pc, #224]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e40:	f000 fcf7 	bl	8001832 <HAL_GPIO_TogglePin>
				led_tick = 0;
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
			break;
 8000e4a:	e035      	b.n	8000eb8 <TIMER2_ISR+0x18c>
			if ((led_tick) > 100) {
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b64      	cmp	r3, #100	; 0x64
 8000e52:	d933      	bls.n	8000ebc <TIMER2_ISR+0x190>
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin | LED_GREEN_Pin,
 8000e54:	2200      	movs	r2, #0
 8000e56:	2130      	movs	r1, #48	; 0x30
 8000e58:	4831      	ldr	r0, [pc, #196]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e5a:	f000 fcd1 	bl	8001800 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_Pin);
 8000e5e:	2108      	movs	r1, #8
 8000e60:	482f      	ldr	r0, [pc, #188]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e62:	f000 fce6 	bl	8001832 <HAL_GPIO_TogglePin>
				led_tick = 0;
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
			break;
 8000e6c:	e026      	b.n	8000ebc <TIMER2_ISR+0x190>
			HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2120      	movs	r1, #32
 8000e72:	482b      	ldr	r0, [pc, #172]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e74:	f000 fcc4 	bl	8001800 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin | LED_YELLOW_Pin,
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2118      	movs	r1, #24
 8000e7c:	4828      	ldr	r0, [pc, #160]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e7e:	f000 fcbf 	bl	8001800 <HAL_GPIO_WritePin>
			break;
 8000e82:	e01e      	b.n	8000ec2 <TIMER2_ISR+0x196>
			if ((led_tick) > 100) {
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b64      	cmp	r3, #100	; 0x64
 8000e8a:	d919      	bls.n	8000ec0 <TIMER2_ISR+0x194>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin | LED_GREEN_Pin,
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2118      	movs	r1, #24
 8000e90:	4823      	ldr	r0, [pc, #140]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e92:	f000 fcb5 	bl	8001800 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
 8000e96:	2120      	movs	r1, #32
 8000e98:	4821      	ldr	r0, [pc, #132]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000e9a:	f000 fcca 	bl	8001832 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea2:	4819      	ldr	r0, [pc, #100]	; (8000f08 <TIMER2_ISR+0x1dc>)
 8000ea4:	f000 fcc5 	bl	8001832 <HAL_GPIO_TogglePin>
				led_tick = 0;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <TIMER2_ISR+0x1e4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
			break;
 8000eae:	e007      	b.n	8000ec0 <TIMER2_ISR+0x194>
			break;
 8000eb0:	bf00      	nop
 8000eb2:	e006      	b.n	8000ec2 <TIMER2_ISR+0x196>
			break;
 8000eb4:	bf00      	nop
 8000eb6:	e004      	b.n	8000ec2 <TIMER2_ISR+0x196>
			break;
 8000eb8:	bf00      	nop
 8000eba:	e002      	b.n	8000ec2 <TIMER2_ISR+0x196>
			break;
 8000ebc:	bf00      	nop
 8000ebe:	e000      	b.n	8000ec2 <TIMER2_ISR+0x196>
			break;
 8000ec0:	bf00      	nop
		}
	}

	if (!HAL_GPIO_ReadPin(GPIOB, BTN_GREEN_Pin)) {
 8000ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec6:	4816      	ldr	r0, [pc, #88]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000ec8:	f000 fc82 	bl	80017d0 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <TIMER2_ISR+0x1b0>
		btn_green_tick++;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <TIMER2_ISR+0x1fc>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <TIMER2_ISR+0x1fc>)
 8000eda:	6013      	str	r3, [r2, #0]
	}

	if (!HAL_GPIO_ReadPin(GPIOB, BTN_YELLOW_Pin)) {
 8000edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee0:	480f      	ldr	r0, [pc, #60]	; (8000f20 <TIMER2_ISR+0x1f4>)
 8000ee2:	f000 fc75 	bl	80017d0 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d104      	bne.n	8000ef6 <TIMER2_ISR+0x1ca>
		btn_yellow_tick++;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <TIMER2_ISR+0x200>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <TIMER2_ISR+0x200>)
 8000ef4:	6013      	str	r3, [r2, #0]
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000055c 	.word	0x2000055c
 8000f00:	200005ac 	.word	0x200005ac
 8000f04:	20000450 	.word	0x20000450
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	20000434 	.word	0x20000434
 8000f10:	200005a8 	.word	0x200005a8
 8000f14:	20000452 	.word	0x20000452
 8000f18:	200005ad 	.word	0x200005ad
 8000f1c:	0800807c 	.word	0x0800807c
 8000f20:	40020400 	.word	0x40020400
 8000f24:	20000448 	.word	0x20000448
 8000f28:	2000044c 	.word	0x2000044c
 8000f2c:	200005f8 	.word	0x200005f8

08000f30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	4802      	ldr	r0, [pc, #8]	; (8000f48 <Error_Handler+0x18>)
 8000f40:	f000 fc5e 	bl	8001800 <HAL_GPIO_WritePin>
 8000f44:	e7f8      	b.n	8000f38 <Error_Handler+0x8>
 8000f46:	bf00      	nop
 8000f48:	40020800 	.word	0x40020800

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a18      	ldr	r2, [pc, #96]	; (800100c <HAL_TIM_Base_MspInit+0x70>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10e      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_TIM_Base_MspInit+0x74>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a16      	ldr	r2, [pc, #88]	; (8001010 <HAL_TIM_Base_MspInit+0x74>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_TIM_Base_MspInit+0x74>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fca:	e01a      	b.n	8001002 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd4:	d115      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_TIM_Base_MspInit+0x74>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <HAL_TIM_Base_MspInit+0x74>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_TIM_Base_MspInit+0x74>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201c      	movs	r0, #28
 8000ff8:	f000 fa2f 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ffc:	201c      	movs	r0, #28
 8000ffe:	f000 fa48 	bl	8001492 <HAL_NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40010000 	.word	0x40010000
 8001010:	40023800 	.word	0x40023800

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001060:	f000 f8dc 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <TIM2_IRQHandler+0x14>)
 800106e:	f002 fa4f 	bl	8003510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TIMER2_ISR();
 8001072:	f7ff fe5b 	bl	8000d2c <TIMER2_ISR>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200005b0 	.word	0x200005b0

08001080 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <OTG_FS_IRQHandler+0x10>)
 8001086:	f000 fd3e 	bl	8001b06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200012a4 	.word	0x200012a4

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f006 fb0c 	bl	80076e0 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20010000 	.word	0x20010000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	20000200 	.word	0x20000200
 80010fc:	200016c0 	.word	0x200016c0

08001100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001140:	4c0b      	ldr	r4, [pc, #44]	; (8001170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114e:	f7ff ffd7 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f006 facb 	bl	80076ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fa1f 	bl	8000598 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001168:	080080d8 	.word	0x080080d8
  ldr r2, =_sbss
 800116c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001170:	200016bc 	.word	0x200016bc

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_Init+0x40>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_Init+0x40>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x40>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f94f 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fece 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f967 	bl	80014ae <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 f92f 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000008 	.word	0x20000008
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	20000600 	.word	0x20000600

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000600 	.word	0x20000600

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff3e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff31 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e159      	b.n	8001798 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8148 	bne.w	8001792 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d005      	beq.n	800151a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001516:	2b02      	cmp	r3, #2
 8001518:	d130      	bne.n	800157c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 0201 	and.w	r2, r3, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b03      	cmp	r3, #3
 8001586:	d017      	beq.n	80015b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80a2 	beq.w	8001792 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a56      	ldr	r2, [pc, #344]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <HAL_GPIO_Init+0x2ec>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <HAL_GPIO_Init+0x2f0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x202>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_GPIO_Init+0x2f4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x1fe>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <HAL_GPIO_Init+0x2f8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x1fa>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_GPIO_Init+0x2fc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x1f6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a45      	ldr	r2, [pc, #276]	; (80017c8 <HAL_GPIO_Init+0x300>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x1f2>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	; (80017b4 <HAL_GPIO_Init+0x2ec>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_GPIO_Init+0x304>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170e:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_GPIO_Init+0x304>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001762:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_GPIO_Init+0x304>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800178c:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_GPIO_Init+0x304>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f aea2 	bls.w	80014e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40013c00 	.word	0x40013c00

080017d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800181c:	e003      	b.n	8001826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	619a      	str	r2, [r3, #24]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43d9      	mvns	r1, r3
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	400b      	ands	r3, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001868:	b08f      	sub	sp, #60	; 0x3c
 800186a:	af0a      	add	r7, sp, #40	; 0x28
 800186c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e10f      	b.n	8001a98 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f005 fc1a 	bl	80070cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2203      	movs	r2, #3
 800189c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fadd 	bl	8003e76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	687e      	ldr	r6, [r7, #4]
 80018c4:	466d      	mov	r5, sp
 80018c6:	f106 0410 	add.w	r4, r6, #16
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018da:	1d33      	adds	r3, r6, #4
 80018dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018de:	6838      	ldr	r0, [r7, #0]
 80018e0:	f002 f9b4 	bl	8003c4c <USB_CoreInit>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0d0      	b.n	8001a98 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 facb 	bl	8003e98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e04a      	b.n	800199e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	333d      	adds	r3, #61	; 0x3d
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	333c      	adds	r3, #60	; 0x3c
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	b298      	uxth	r0, r3
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3342      	adds	r3, #66	; 0x42
 8001944:	4602      	mov	r2, r0
 8001946:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	333f      	adds	r3, #63	; 0x3f
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	3344      	adds	r3, #68	; 0x44
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3348      	adds	r3, #72	; 0x48
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	3350      	adds	r3, #80	; 0x50
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3301      	adds	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3af      	bcc.n	8001908 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e044      	b.n	8001a38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	3301      	adds	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3b5      	bcc.n	80019ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	687e      	ldr	r6, [r7, #4]
 8001a4a:	466d      	mov	r5, sp
 8001a4c:	f106 0410 	add.w	r4, r6, #16
 8001a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a60:	1d33      	adds	r3, r6, #4
 8001a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f002 fa63 	bl	8003f30 <USB_DevInit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e00d      	b.n	8001a98 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 fadf 	bl	8005054 <USB_DevDisconnect>

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_PCD_Start+0x1c>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e020      	b.n	8001afe <HAL_PCD_Start+0x5e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d109      	bne.n	8001ae0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 f9b5 	bl	8003e54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fa8f 	bl	8005012 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b06:	b590      	push	{r4, r7, lr}
 8001b08:	b08d      	sub	sp, #52	; 0x34
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fb4d 	bl	80051bc <USB_GetMode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 839d 	bne.w	8002264 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fab1 	bl	8005096 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8393 	beq.w	8002262 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 faa8 	bl	8005096 <USB_ReadInterrupts>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d107      	bne.n	8001b60 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f002 0202 	and.w	r2, r2, #2
 8001b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fa96 	bl	8005096 <USB_ReadInterrupts>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d161      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0210 	bic.w	r2, r2, #16
 8001b82:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f003 020f 	and.w	r2, r3, #15
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	0c5b      	lsrs	r3, r3, #17
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d124      	bne.n	8001bfa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d035      	beq.n	8001c28 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6a38      	ldr	r0, [r7, #32]
 8001bd0:	f003 f8cd 	bl	8004d6e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001be0:	441a      	add	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bf2:	441a      	add	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	619a      	str	r2, [r3, #24]
 8001bf8:	e016      	b.n	8001c28 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	0c5b      	lsrs	r3, r3, #17
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d110      	bne.n	8001c28 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6a38      	ldr	r0, [r7, #32]
 8001c12:	f003 f8ac 	bl	8004d6e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c22:	441a      	add	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0210 	orr.w	r2, r2, #16
 8001c36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fa2a 	bl	8005096 <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c4c:	d16e      	bne.n	8001d2c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fa30 	bl	80050bc <USB_ReadDevAllOutEpInterrupt>
 8001c5c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c5e:	e062      	b.n	8001d26 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d057      	beq.n	8001d1a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fa55 	bl	8005124 <USB_ReadDevOutEPInterrupt>
 8001c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	015a      	lsls	r2, r3, #5
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c92:	461a      	mov	r2, r3
 8001c94:	2301      	movs	r3, #1
 8001c96:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fdb0 	bl	8002800 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2308      	movs	r3, #8
 8001cba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 feaa 	bl	8002a18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2310      	movs	r3, #16
 8001cde:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d12:	461a      	mov	r2, r3
 8001d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d199      	bne.n	8001c60 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 f9b0 	bl	8005096 <USB_ReadInterrupts>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d40:	f040 80c0 	bne.w	8001ec4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 f9d1 	bl	80050f0 <USB_ReadDevAllInEpInterrupt>
 8001d4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d54:	e0b2      	b.n	8001ebc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80a7 	beq.w	8001eb0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f9f7 	bl	8005160 <USB_ReadDevInEPInterrupt>
 8001d72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d057      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	2201      	movs	r2, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69f9      	ldr	r1, [r7, #28]
 8001d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d9e:	4013      	ands	r3, r2
 8001da0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dae:	461a      	mov	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d132      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3348      	adds	r3, #72	; 0x48
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4403      	add	r3, r0
 8001ddc:	3344      	adds	r3, #68	; 0x44
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4419      	add	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4403      	add	r3, r0
 8001df0:	3348      	adds	r3, #72	; 0x48
 8001df2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d113      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x31c>
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3350      	adds	r3, #80	; 0x50
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d108      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	f003 f9ff 	bl	8005220 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4619      	mov	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f005 f9d0 	bl	80071ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e44:	461a      	mov	r2, r3
 8001e46:	2308      	movs	r3, #8
 8001e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e60:	461a      	mov	r2, r3
 8001e62:	2310      	movs	r3, #16
 8001e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2340      	movs	r3, #64	; 0x40
 8001e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fc1b 	bl	80026e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f47f af49 	bne.w	8001d56 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f8e4 	bl	8005096 <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ed8:	d122      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f00:	2100      	movs	r1, #0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fe26 	bl	8002b54 <HAL_PCDEx_LPM_Callback>
 8001f08:	e002      	b.n	8001f10 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f005 f9cc 	bl	80072a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 f8b6 	bl	8005096 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f34:	d112      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f005 f988 	bl	800725c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f5a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 f898 	bl	8005096 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	f040 80c7 	bne.w	8002102 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 f932 	bl	80041f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f98:	e056      	b.n	8002048 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fbe:	0151      	lsls	r1, r2, #5
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	440a      	add	r2, r1
 8001fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fcc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fde:	0151      	lsls	r1, r2, #5
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	440a      	add	r2, r1
 8001fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fe8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002000:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002012:	0151      	lsls	r1, r2, #5
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	440a      	add	r2, r1
 8002018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800201c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002020:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002032:	0151      	lsls	r1, r2, #5
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	440a      	add	r2, r1
 8002038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800203c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002040:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	3301      	adds	r3, #1
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204e:	429a      	cmp	r2, r3
 8002050:	d3a3      	bcc.n	8001f9a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002060:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002064:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800207e:	f043 030b 	orr.w	r3, r3, #11
 8002082:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002094:	f043 030b 	orr.w	r3, r3, #11
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	e015      	b.n	80020c8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c2:	f043 030b 	orr.w	r3, r3, #11
 80020c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020ec:	461a      	mov	r2, r3
 80020ee:	f003 f897 	bl	8005220 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 ffc5 	bl	8005096 <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002116:	d124      	bne.n	8002162 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 f85b 	bl	80051d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f002 f8c3 	bl	80042b2 <USB_GetDevSpeed>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681c      	ldr	r4, [r3, #0]
 8002138:	f001 f92c 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 800213c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4620      	mov	r0, r4
 8002148:	f001 fde2 	bl	8003d10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f005 f866 	bl	800721e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002160:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 ff95 	bl	8005096 <USB_ReadInterrupts>
 800216c:	4603      	mov	r3, r0
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b08      	cmp	r3, #8
 8002174:	d10a      	bne.n	800218c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f005 f843 	bl	8007202 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f002 0208 	and.w	r2, r2, #8
 800218a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 ff80 	bl	8005096 <USB_ReadInterrupts>
 8002196:	4603      	mov	r3, r0
 8002198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021a0:	d10f      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f005 f89b 	bl	80072e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 ff65 	bl	8005096 <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021d6:	d10f      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f005 f86e 	bl	80072c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80021f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 ff4a 	bl	8005096 <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d10a      	bne.n	8002224 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f005 f87c 	bl	800730c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f002 ff34 	bl	8005096 <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d115      	bne.n	8002264 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f005 f86c 	bl	8007328 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6859      	ldr	r1, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	e000      	b.n	8002264 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002262:	bf00      	nop
    }
  }
}
 8002264:	3734      	adds	r7, #52	; 0x34
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}

0800226a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_PCD_SetAddress+0x1a>
 8002280:	2302      	movs	r3, #2
 8002282:	e013      	b.n	80022ac <HAL_PCD_SetAddress+0x42>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fe92 	bl	8004fc6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	4603      	mov	r3, r0
 80022c4:	70fb      	strb	r3, [r7, #3]
 80022c6:	460b      	mov	r3, r1
 80022c8:	803b      	strh	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da0f      	bge.n	80022fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 020f 	and.w	r2, r3, #15
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	3338      	adds	r3, #56	; 0x38
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	3304      	adds	r3, #4
 80022f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	705a      	strb	r2, [r3, #1]
 80022f8:	e00f      	b.n	800231a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 020f 	and.w	r2, r3, #15
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	3304      	adds	r3, #4
 8002312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	b2da      	uxtb	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002326:	883a      	ldrh	r2, [r7, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	78ba      	ldrb	r2, [r7, #2]
 8002330:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	785b      	ldrb	r3, [r3, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002344:	78bb      	ldrb	r3, [r7, #2]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d102      	bne.n	8002350 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_PCD_EP_Open+0xaa>
 800235a:	2302      	movs	r3, #2
 800235c:	e00e      	b.n	800237c <HAL_PCD_EP_Open+0xc8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	4618      	mov	r0, r3
 800236e:	f001 ffc5 	bl	80042fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800237a:	7afb      	ldrb	r3, [r7, #11]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002394:	2b00      	cmp	r3, #0
 8002396:	da0f      	bge.n	80023b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 020f 	and.w	r2, r3, #15
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	3338      	adds	r3, #56	; 0x38
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	705a      	strb	r2, [r3, #1]
 80023b6:	e00f      	b.n	80023d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 020f 	and.w	r2, r3, #15
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_PCD_EP_Close+0x6e>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e00e      	b.n	8002410 <HAL_PCD_EP_Close+0x8c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 f803 	bl	800440c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	460b      	mov	r3, r1
 8002426:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	f003 020f 	and.w	r2, r3, #15
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4413      	add	r3, r2
 800243e:	3304      	adds	r3, #4
 8002440:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2200      	movs	r2, #0
 8002458:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	b2da      	uxtb	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	6979      	ldr	r1, [r7, #20]
 800248c:	f002 fade 	bl	8004a4c <USB_EP0StartXfer>
 8002490:	e008      	b.n	80024a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	6979      	ldr	r1, [r7, #20]
 80024a0:	f002 f890 	bl	80045c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024d0:	681b      	ldr	r3, [r3, #0]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	460b      	mov	r3, r1
 80024ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ee:	7afb      	ldrb	r3, [r7, #11]
 80024f0:	f003 020f 	and.w	r2, r3, #15
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	3338      	adds	r3, #56	; 0x38
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2201      	movs	r2, #1
 800251c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	b2da      	uxtb	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002538:	7afb      	ldrb	r3, [r7, #11]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	6979      	ldr	r1, [r7, #20]
 8002550:	f002 fa7c 	bl	8004a4c <USB_EP0StartXfer>
 8002554:	e008      	b.n	8002568 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	6979      	ldr	r1, [r7, #20]
 8002564:	f002 f82e 	bl	80045c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d901      	bls.n	8002590 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e050      	b.n	8002632 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002594:	2b00      	cmp	r3, #0
 8002596:	da0f      	bge.n	80025b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 020f 	and.w	r2, r3, #15
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	3338      	adds	r3, #56	; 0x38
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	705a      	strb	r2, [r3, #1]
 80025b6:	e00d      	b.n	80025d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_PCD_EP_SetStall+0x82>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e01e      	b.n	8002632 <HAL_PCD_EP_SetStall+0xc0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	4618      	mov	r0, r3
 8002604:	f002 fc0b 	bl	8004e1e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	b2d9      	uxtb	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002622:	461a      	mov	r2, r3
 8002624:	f002 fdfc 	bl	8005220 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	f003 020f 	and.w	r2, r3, #15
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d901      	bls.n	8002658 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e042      	b.n	80026de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da0f      	bge.n	8002680 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 020f 	and.w	r2, r3, #15
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	3338      	adds	r3, #56	; 0x38
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	3304      	adds	r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	705a      	strb	r2, [r3, #1]
 800267e:	e00f      	b.n	80026a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 020f 	and.w	r2, r3, #15
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_PCD_EP_ClrStall+0x86>
 80026bc:	2302      	movs	r3, #2
 80026be:	e00e      	b.n	80026de <HAL_PCD_EP_ClrStall+0xa4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fc13 	bl	8004efa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b08a      	sub	sp, #40	; 0x28
 80026ea:	af02      	add	r7, sp, #8
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	3338      	adds	r3, #56	; 0x38
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	3304      	adds	r3, #4
 800270c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	429a      	cmp	r2, r3
 8002718:	d901      	bls.n	800271e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06c      	b.n	80027f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	d902      	bls.n	800273a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3303      	adds	r3, #3
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002742:	e02b      	b.n	800279c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	429a      	cmp	r2, r3
 8002758:	d902      	bls.n	8002760 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3303      	adds	r3, #3
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68d9      	ldr	r1, [r3, #12]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002778:	b2db      	uxtb	r3, r3
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4603      	mov	r3, r0
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f002 fab7 	bl	8004cf2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	441a      	add	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	441a      	add	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d809      	bhi.n	80027c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d203      	bcs.n	80027c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1be      	bne.n	8002744 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d811      	bhi.n	80027f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	2201      	movs	r2, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	6939      	ldr	r1, [r7, #16]
 80027ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027f2:	4013      	ands	r3, r2
 80027f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	333c      	adds	r3, #60	; 0x3c
 8002818:	3304      	adds	r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b01      	cmp	r3, #1
 8002834:	f040 80a0 	bne.w	8002978 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d015      	beq.n	800286e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a72      	ldr	r2, [pc, #456]	; (8002a10 <PCD_EP_OutXfrComplete_int+0x210>)
 8002846:	4293      	cmp	r3, r2
 8002848:	f240 80dd 	bls.w	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80d7 	beq.w	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002864:	461a      	mov	r2, r3
 8002866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	e0cb      	b.n	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002884:	461a      	mov	r2, r3
 8002886:	2320      	movs	r3, #32
 8002888:	6093      	str	r3, [r2, #8]
 800288a:	e0bc      	b.n	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 80b7 	bne.w	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a5d      	ldr	r2, [pc, #372]	; (8002a10 <PCD_EP_OutXfrComplete_int+0x210>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d90f      	bls.n	80028c0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b6:	461a      	mov	r2, r3
 80028b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028bc:	6093      	str	r3, [r2, #8]
 80028be:	e0a2      	b.n	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028d2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	440b      	add	r3, r1
 80028dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80028e6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4403      	add	r3, r0
 80028f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028fa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4403      	add	r3, r0
 800291e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4419      	add	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4403      	add	r3, r0
 8002934:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002938:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d114      	bne.n	800296a <PCD_EP_OutXfrComplete_int+0x16a>
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002962:	461a      	mov	r2, r3
 8002964:	2101      	movs	r1, #1
 8002966:	f002 fc5b 	bl	8005220 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f004 fc11 	bl	8007198 <HAL_PCD_DataOutStageCallback>
 8002976:	e046      	b.n	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <PCD_EP_OutXfrComplete_int+0x214>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d124      	bne.n	80029ca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002996:	461a      	mov	r2, r3
 8002998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299c:	6093      	str	r3, [r2, #8]
 800299e:	e032      	b.n	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b6:	461a      	mov	r2, r3
 80029b8:	2320      	movs	r3, #32
 80029ba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f004 fbe8 	bl	8007198 <HAL_PCD_DataOutStageCallback>
 80029c8:	e01d      	b.n	8002a06 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d114      	bne.n	80029fa <PCD_EP_OutXfrComplete_int+0x1fa>
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d108      	bne.n	80029fa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029f2:	461a      	mov	r2, r3
 80029f4:	2100      	movs	r1, #0
 80029f6:	f002 fc13 	bl	8005220 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4619      	mov	r1, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f004 fbc9 	bl	8007198 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	4f54300a 	.word	0x4f54300a
 8002a14:	4f54310a 	.word	0x4f54310a

08002a18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	333c      	adds	r3, #60	; 0x3c
 8002a30:	3304      	adds	r3, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d90e      	bls.n	8002a6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a64:	461a      	mov	r2, r3
 8002a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f004 fb81 	bl	8007174 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d90c      	bls.n	8002a94 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d108      	bne.n	8002a94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2101      	movs	r1, #1
 8002a90:	f002 fbc6 	bl	8005220 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	4f54300a 	.word	0x4f54300a

08002aa4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d107      	bne.n	8002ad2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ac2:	883b      	ldrh	r3, [r7, #0]
 8002ac4:	0419      	lsls	r1, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad0:	e028      	b.n	8002b24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4413      	add	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	e00d      	b.n	8002b02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	3340      	adds	r3, #64	; 0x40
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4413      	add	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	3301      	adds	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3ec      	bcc.n	8002ae6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b0c:	883b      	ldrh	r3, [r7, #0]
 8002b0e:	0418      	lsls	r0, r3, #16
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	4302      	orrs	r2, r0
 8002b1c:	3340      	adds	r3, #64	; 0x40
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e264      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d075      	beq.n	8002c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8a:	4ba3      	ldr	r3, [pc, #652]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d00c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b96:	4ba0      	ldr	r3, [pc, #640]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d112      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba2:	4b9d      	ldr	r3, [pc, #628]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bae:	d10b      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	4b99      	ldr	r3, [pc, #612]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05b      	beq.n	8002c74 <HAL_RCC_OscConfig+0x108>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d157      	bne.n	8002c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e23f      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x74>
 8002bd2:	4b91      	ldr	r3, [pc, #580]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a90      	ldr	r2, [pc, #576]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e01d      	b.n	8002c1c <HAL_RCC_OscConfig+0xb0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x98>
 8002bea:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a8a      	ldr	r2, [pc, #552]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a87      	ldr	r2, [pc, #540]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0xb0>
 8002c04:	4b84      	ldr	r3, [pc, #528]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a83      	ldr	r2, [pc, #524]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b81      	ldr	r3, [pc, #516]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a80      	ldr	r2, [pc, #512]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fb0e 	bl	8001244 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fb0a 	bl	8001244 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e204      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0xc0>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fafa 	bl	8001244 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe faf6 	bl	8001244 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e1f0      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0xe8>
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d063      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c82:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b62      	ldr	r3, [pc, #392]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x152>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1c4      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4952      	ldr	r1, [pc, #328]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	e03a      	b.n	8002d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <HAL_RCC_OscConfig+0x2b0>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe faaf 	bl	8001244 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe faab 	bl	8001244 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1a5      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4940      	ldr	r1, [pc, #256]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <HAL_RCC_OscConfig+0x2b0>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fa8e 	bl	8001244 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fa8a 	bl	8001244 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e184      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d030      	beq.n	8002db8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <HAL_RCC_OscConfig+0x2b4>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fa6e 	bl	8001244 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fa6a 	bl	8001244 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e164      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x200>
 8002d8a:	e015      	b.n	8002db8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x2b4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fa57 	bl	8001244 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe fa53 	bl	8001244 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e14d      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a0 	beq.w	8002f06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x2b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d121      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_RCC_OscConfig+0x2b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <HAL_RCC_OscConfig+0x2b8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fa19 	bl	8001244 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e011      	b.n	8002e3a <HAL_RCC_OscConfig+0x2ce>
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	42470000 	.word	0x42470000
 8002e20:	42470e80 	.word	0x42470e80
 8002e24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fe fa0c 	bl	8001244 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e106      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b85      	ldr	r3, [pc, #532]	; (8003050 <HAL_RCC_OscConfig+0x4e4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
 8002e4e:	4b81      	ldr	r3, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a80      	ldr	r2, [pc, #512]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	e01c      	b.n	8002e96 <HAL_RCC_OscConfig+0x32a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d10c      	bne.n	8002e7e <HAL_RCC_OscConfig+0x312>
 8002e64:	4b7b      	ldr	r3, [pc, #492]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	4b78      	ldr	r3, [pc, #480]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a77      	ldr	r2, [pc, #476]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCC_OscConfig+0x32a>
 8002e7e:	4b75      	ldr	r3, [pc, #468]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a74      	ldr	r2, [pc, #464]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	4b72      	ldr	r3, [pc, #456]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a71      	ldr	r2, [pc, #452]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d015      	beq.n	8002eca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe f9d1 	bl	8001244 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe f9cd 	bl	8001244 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0c5      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ee      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x33a>
 8002ec8:	e014      	b.n	8002ef4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe f9bb 	bl	8001244 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe f9b7 	bl	8001244 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0af      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	4b5a      	ldr	r3, [pc, #360]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b56      	ldr	r3, [pc, #344]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a55      	ldr	r2, [pc, #340]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 809b 	beq.w	8003046 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d05c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d141      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x4ec>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe f98b 	bl	8001244 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe f987 	bl	8001244 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e081      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f44:	4b43      	ldr	r3, [pc, #268]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	019b      	lsls	r3, r3, #6
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	061b      	lsls	r3, r3, #24
 8002f74:	4937      	ldr	r1, [pc, #220]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7a:	4b37      	ldr	r3, [pc, #220]	; (8003058 <HAL_RCC_OscConfig+0x4ec>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fe f960 	bl	8001244 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe f95c 	bl	8001244 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e056      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x41c>
 8002fa6:	e04e      	b.n	8003046 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x4ec>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe f949 	bl	8001244 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe f945 	bl	8001244 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e03f      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x44a>
 8002fd4:	e037      	b.n	8003046 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e032      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d028      	beq.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d121      	bne.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d11a      	bne.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003018:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	3b01      	subs	r3, #1
 800302c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d107      	bne.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40007000 	.word	0x40007000
 8003054:	40023800 	.word	0x40023800
 8003058:	42470060 	.word	0x42470060

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0cc      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b68      	ldr	r3, [pc, #416]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d90c      	bls.n	8003098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b65      	ldr	r3, [pc, #404]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d044      	beq.n	800317c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d119      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d003      	beq.n	800311a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003116:	2b03      	cmp	r3, #3
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e067      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4934      	ldr	r1, [pc, #208]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800314c:	f7fe f87a 	bl	8001244 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe f876 	bl	8001244 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e04f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d20c      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd ffda 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023c00 	.word	0x40023c00
 8003218:	40023800 	.word	0x40023800
 800321c:	08008084 	.word	0x08008084
 8003220:	20000000 	.word	0x20000000
 8003224:	20000004 	.word	0x20000004

08003228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	b5b0      	push	{r4, r5, r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800322e:	2100      	movs	r1, #0
 8003230:	6079      	str	r1, [r7, #4]
 8003232:	2100      	movs	r1, #0
 8003234:	60f9      	str	r1, [r7, #12]
 8003236:	2100      	movs	r1, #0
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800323a:	2100      	movs	r1, #0
 800323c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323e:	4952      	ldr	r1, [pc, #328]	; (8003388 <HAL_RCC_GetSysClockFreq+0x160>)
 8003240:	6889      	ldr	r1, [r1, #8]
 8003242:	f001 010c 	and.w	r1, r1, #12
 8003246:	2908      	cmp	r1, #8
 8003248:	d00d      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x3e>
 800324a:	2908      	cmp	r1, #8
 800324c:	f200 8094 	bhi.w	8003378 <HAL_RCC_GetSysClockFreq+0x150>
 8003250:	2900      	cmp	r1, #0
 8003252:	d002      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x32>
 8003254:	2904      	cmp	r1, #4
 8003256:	d003      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x38>
 8003258:	e08e      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800325a:	4b4c      	ldr	r3, [pc, #304]	; (800338c <HAL_RCC_GetSysClockFreq+0x164>)
 800325c:	60bb      	str	r3, [r7, #8]
       break;
 800325e:	e08e      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <HAL_RCC_GetSysClockFreq+0x168>)
 8003262:	60bb      	str	r3, [r7, #8]
      break;
 8003264:	e08b      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003266:	4948      	ldr	r1, [pc, #288]	; (8003388 <HAL_RCC_GetSysClockFreq+0x160>)
 8003268:	6849      	ldr	r1, [r1, #4]
 800326a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800326e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003270:	4945      	ldr	r1, [pc, #276]	; (8003388 <HAL_RCC_GetSysClockFreq+0x160>)
 8003272:	6849      	ldr	r1, [r1, #4]
 8003274:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003278:	2900      	cmp	r1, #0
 800327a:	d024      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327c:	4942      	ldr	r1, [pc, #264]	; (8003388 <HAL_RCC_GetSysClockFreq+0x160>)
 800327e:	6849      	ldr	r1, [r1, #4]
 8003280:	0989      	lsrs	r1, r1, #6
 8003282:	4608      	mov	r0, r1
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	f240 14ff 	movw	r4, #511	; 0x1ff
 800328c:	f04f 0500 	mov.w	r5, #0
 8003290:	ea00 0204 	and.w	r2, r0, r4
 8003294:	ea01 0305 	and.w	r3, r1, r5
 8003298:	493d      	ldr	r1, [pc, #244]	; (8003390 <HAL_RCC_GetSysClockFreq+0x168>)
 800329a:	fb01 f003 	mul.w	r0, r1, r3
 800329e:	2100      	movs	r1, #0
 80032a0:	fb01 f102 	mul.w	r1, r1, r2
 80032a4:	1844      	adds	r4, r0, r1
 80032a6:	493a      	ldr	r1, [pc, #232]	; (8003390 <HAL_RCC_GetSysClockFreq+0x168>)
 80032a8:	fba2 0101 	umull	r0, r1, r2, r1
 80032ac:	1863      	adds	r3, r4, r1
 80032ae:	4619      	mov	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	f7fc fff2 	bl	80002a0 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e04a      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_RCC_GetSysClockFreq+0x160>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	461a      	mov	r2, r3
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032d6:	f04f 0100 	mov.w	r1, #0
 80032da:	ea02 0400 	and.w	r4, r2, r0
 80032de:	ea03 0501 	and.w	r5, r3, r1
 80032e2:	4620      	mov	r0, r4
 80032e4:	4629      	mov	r1, r5
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	014b      	lsls	r3, r1, #5
 80032f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032f4:	0142      	lsls	r2, r0, #5
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	1b00      	subs	r0, r0, r4
 80032fc:	eb61 0105 	sbc.w	r1, r1, r5
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	018b      	lsls	r3, r1, #6
 800330a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800330e:	0182      	lsls	r2, r0, #6
 8003310:	1a12      	subs	r2, r2, r0
 8003312:	eb63 0301 	sbc.w	r3, r3, r1
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	00d9      	lsls	r1, r3, #3
 8003320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003324:	00d0      	lsls	r0, r2, #3
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	1912      	adds	r2, r2, r4
 800332c:	eb45 0303 	adc.w	r3, r5, r3
 8003330:	f04f 0000 	mov.w	r0, #0
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	0299      	lsls	r1, r3, #10
 800333a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800333e:	0290      	lsls	r0, r2, #10
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	461a      	mov	r2, r3
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	f7fc ffa6 	bl	80002a0 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4613      	mov	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_RCC_GetSysClockFreq+0x160>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	3301      	adds	r3, #1
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	60bb      	str	r3, [r7, #8]
      break;
 8003376:	e002      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <HAL_RCC_GetSysClockFreq+0x164>)
 800337a:	60bb      	str	r3, [r7, #8]
      break;
 800337c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337e:	68bb      	ldr	r3, [r7, #8]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bdb0      	pop	{r4, r5, r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	00f42400 	.word	0x00f42400
 8003390:	017d7840 	.word	0x017d7840

08003394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000000 	.word	0x20000000

080033ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e041      	b.n	8003442 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd fde2 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f000 fa92 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d001      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e044      	b.n	80034ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <HAL_TIM_Base_Start_IT+0xb0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d018      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x6c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d013      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x6c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <HAL_TIM_Base_Start_IT+0xb4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00e      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x6c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_TIM_Base_Start_IT+0xb8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x6c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_TIM_Base_Start_IT+0xbc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x6c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <HAL_TIM_Base_Start_IT+0xc0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d111      	bne.n	80034dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d010      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	e007      	b.n	80034ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40010000 	.word	0x40010000
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00
 800350c:	40014000 	.word	0x40014000

08003510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b02      	cmp	r3, #2
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0202 	mvn.w	r2, #2
 800353c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f9bf 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9b1 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f9c2 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b04      	cmp	r3, #4
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0204 	mvn.w	r2, #4
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f995 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f987 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f998 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0208 	mvn.w	r2, #8
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2204      	movs	r2, #4
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f96b 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f95d 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f96e 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b10      	cmp	r3, #16
 8003620:	d122      	bne.n	8003668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b10      	cmp	r3, #16
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0210 	mvn.w	r2, #16
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2208      	movs	r2, #8
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f941 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f933 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f944 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10e      	bne.n	8003694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0201 	mvn.w	r2, #1
 800368c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f90d 	bl	80038ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b80      	cmp	r3, #128	; 0x80
 80036a0:	d10e      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d107      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fabc 	bl	8003c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d10e      	bne.n	80036ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d107      	bne.n	80036ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f909 	bl	80038fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d10e      	bne.n	8003718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b20      	cmp	r3, #32
 8003706:	d107      	bne.n	8003718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0220 	mvn.w	r2, #32
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa86 	bl	8003c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_TIM_ConfigClockSource+0x1c>
 8003738:	2302      	movs	r3, #2
 800373a:	e0b4      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x186>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800375a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003774:	d03e      	beq.n	80037f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377a:	f200 8087 	bhi.w	800388c <HAL_TIM_ConfigClockSource+0x16c>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	f000 8086 	beq.w	8003892 <HAL_TIM_ConfigClockSource+0x172>
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378a:	d87f      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b70      	cmp	r3, #112	; 0x70
 800378e:	d01a      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003790:	2b70      	cmp	r3, #112	; 0x70
 8003792:	d87b      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b60      	cmp	r3, #96	; 0x60
 8003796:	d050      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x11a>
 8003798:	2b60      	cmp	r3, #96	; 0x60
 800379a:	d877      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b50      	cmp	r3, #80	; 0x50
 800379e:	d03c      	beq.n	800381a <HAL_TIM_ConfigClockSource+0xfa>
 80037a0:	2b50      	cmp	r3, #80	; 0x50
 80037a2:	d873      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d058      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x13a>
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d86f      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b30      	cmp	r3, #48	; 0x30
 80037ae:	d064      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x15a>
 80037b0:	2b30      	cmp	r3, #48	; 0x30
 80037b2:	d86b      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d060      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x15a>
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d867      	bhi.n	800388c <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d05c      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x15a>
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d05a      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x15a>
 80037c4:	e062      	b.n	800388c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6899      	ldr	r1, [r3, #8]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f000 f997 	bl	8003b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	609a      	str	r2, [r3, #8]
      break;
 80037f2:	e04f      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6899      	ldr	r1, [r3, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f000 f980 	bl	8003b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003816:	609a      	str	r2, [r3, #8]
      break;
 8003818:	e03c      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f000 f8f4 	bl	8003a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2150      	movs	r1, #80	; 0x50
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f94d 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 8003838:	e02c      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	f000 f913 	bl	8003a72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2160      	movs	r1, #96	; 0x60
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f93d 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 8003858:	e01c      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	461a      	mov	r2, r3
 8003868:	f000 f8d4 	bl	8003a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2140      	movs	r1, #64	; 0x40
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f92d 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 8003878:	e00c      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f000 f924 	bl	8003ad2 <TIM_ITRx_SetConfig>
      break;
 800388a:	e003      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      break;
 8003890:	e000      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <TIM_Base_SetConfig+0xe4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00f      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d00b      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a31      	ldr	r2, [pc, #196]	; (80039fc <TIM_Base_SetConfig+0xe8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a30      	ldr	r2, [pc, #192]	; (8003a00 <TIM_Base_SetConfig+0xec>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_Base_SetConfig+0x38>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a2f      	ldr	r2, [pc, #188]	; (8003a04 <TIM_Base_SetConfig+0xf0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d108      	bne.n	800395e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <TIM_Base_SetConfig+0xe4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01b      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d017      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a22      	ldr	r2, [pc, #136]	; (80039fc <TIM_Base_SetConfig+0xe8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <TIM_Base_SetConfig+0xec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00f      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a20      	ldr	r2, [pc, #128]	; (8003a04 <TIM_Base_SetConfig+0xf0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00b      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <TIM_Base_SetConfig+0xf4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d007      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <TIM_Base_SetConfig+0xf8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <TIM_Base_SetConfig+0x8a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <TIM_Base_SetConfig+0xfc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d108      	bne.n	80039b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <TIM_Base_SetConfig+0xe4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d103      	bne.n	80039e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	615a      	str	r2, [r3, #20]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800

08003a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 030a 	bic.w	r3, r3, #10
 8003a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b087      	sub	sp, #28
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f023 0210 	bic.w	r2, r3, #16
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	031b      	lsls	r3, r3, #12
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f043 0307 	orr.w	r3, r3, #7
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e050      	b.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1c      	ldr	r2, [pc, #112]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d013      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40014000 	.word	0x40014000

08003c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	f107 001c 	add.w	r0, r7, #28
 8003c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d122      	bne.n	8003caa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 fb1c 	bl	80052dc <USB_CoreReset>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	e01a      	b.n	8003ce0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f001 fb10 	bl	80052dc <USB_CoreReset>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cd2:	e005      	b.n	8003ce0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10b      	bne.n	8003cfe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f043 0206 	orr.w	r2, r3, #6
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d0a:	b004      	add	sp, #16
 8003d0c:	4770      	bx	lr
	...

08003d10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d165      	bne.n	8003df0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4a41      	ldr	r2, [pc, #260]	; (8003e2c <USB_SetTurnaroundTime+0x11c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d906      	bls.n	8003d3a <USB_SetTurnaroundTime+0x2a>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a40      	ldr	r2, [pc, #256]	; (8003e30 <USB_SetTurnaroundTime+0x120>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d202      	bcs.n	8003d3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d34:	230f      	movs	r3, #15
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e062      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4a3c      	ldr	r2, [pc, #240]	; (8003e30 <USB_SetTurnaroundTime+0x120>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d306      	bcc.n	8003d50 <USB_SetTurnaroundTime+0x40>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a3b      	ldr	r2, [pc, #236]	; (8003e34 <USB_SetTurnaroundTime+0x124>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d202      	bcs.n	8003d50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d4a:	230e      	movs	r3, #14
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e057      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4a38      	ldr	r2, [pc, #224]	; (8003e34 <USB_SetTurnaroundTime+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d306      	bcc.n	8003d66 <USB_SetTurnaroundTime+0x56>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4a37      	ldr	r2, [pc, #220]	; (8003e38 <USB_SetTurnaroundTime+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d202      	bcs.n	8003d66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d60:	230d      	movs	r3, #13
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e04c      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4a33      	ldr	r2, [pc, #204]	; (8003e38 <USB_SetTurnaroundTime+0x128>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d306      	bcc.n	8003d7c <USB_SetTurnaroundTime+0x6c>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <USB_SetTurnaroundTime+0x12c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d802      	bhi.n	8003d7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d76:	230c      	movs	r3, #12
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e041      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <USB_SetTurnaroundTime+0x12c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d906      	bls.n	8003d92 <USB_SetTurnaroundTime+0x82>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a2e      	ldr	r2, [pc, #184]	; (8003e40 <USB_SetTurnaroundTime+0x130>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d802      	bhi.n	8003d92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d8c:	230b      	movs	r3, #11
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e036      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4a2a      	ldr	r2, [pc, #168]	; (8003e40 <USB_SetTurnaroundTime+0x130>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d906      	bls.n	8003da8 <USB_SetTurnaroundTime+0x98>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <USB_SetTurnaroundTime+0x134>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d802      	bhi.n	8003da8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003da2:	230a      	movs	r3, #10
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e02b      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <USB_SetTurnaroundTime+0x134>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d906      	bls.n	8003dbe <USB_SetTurnaroundTime+0xae>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <USB_SetTurnaroundTime+0x138>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d202      	bcs.n	8003dbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003db8:	2309      	movs	r3, #9
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e020      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <USB_SetTurnaroundTime+0x138>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d306      	bcc.n	8003dd4 <USB_SetTurnaroundTime+0xc4>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a20      	ldr	r2, [pc, #128]	; (8003e4c <USB_SetTurnaroundTime+0x13c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d802      	bhi.n	8003dd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003dce:	2308      	movs	r3, #8
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e015      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <USB_SetTurnaroundTime+0x13c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d906      	bls.n	8003dea <USB_SetTurnaroundTime+0xda>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <USB_SetTurnaroundTime+0x140>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d202      	bcs.n	8003dea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003de4:	2307      	movs	r3, #7
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e00a      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dea:	2306      	movs	r3, #6
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e007      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003df6:	2309      	movs	r3, #9
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e001      	b.n	8003e00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	029b      	lsls	r3, r3, #10
 8003e14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	00d8acbf 	.word	0x00d8acbf
 8003e30:	00e4e1c0 	.word	0x00e4e1c0
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	01067380 	.word	0x01067380
 8003e3c:	011a499f 	.word	0x011a499f
 8003e40:	01312cff 	.word	0x01312cff
 8003e44:	014ca43f 	.word	0x014ca43f
 8003e48:	016e3600 	.word	0x016e3600
 8003e4c:	01a6ab1f 	.word	0x01a6ab1f
 8003e50:	01e84800 	.word	0x01e84800

08003e54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f043 0201 	orr.w	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 0201 	bic.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d115      	bne.n	8003ee6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	f7fd f9c8 	bl	800125c <HAL_Delay>
      ms++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f001 f972 	bl	80051bc <USB_GetMode>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d01e      	beq.n	8003f1c <USB_SetCurrentMode+0x84>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b31      	cmp	r3, #49	; 0x31
 8003ee2:	d9f0      	bls.n	8003ec6 <USB_SetCurrentMode+0x2e>
 8003ee4:	e01a      	b.n	8003f1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d115      	bne.n	8003f18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f7fd f9af 	bl	800125c <HAL_Delay>
      ms++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f001 f959 	bl	80051bc <USB_GetMode>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <USB_SetCurrentMode+0x84>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b31      	cmp	r3, #49	; 0x31
 8003f14:	d9f0      	bls.n	8003ef8 <USB_SetCurrentMode+0x60>
 8003f16:	e001      	b.n	8003f1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e005      	b.n	8003f28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b32      	cmp	r3, #50	; 0x32
 8003f20:	d101      	bne.n	8003f26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f30:	b084      	sub	sp, #16
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	e009      	b.n	8003f64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3340      	adds	r3, #64	; 0x40
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0e      	cmp	r3, #14
 8003f68:	d9f2      	bls.n	8003f50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11c      	bne.n	8003faa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7e:	f043 0302 	orr.w	r3, r3, #2
 8003f82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8003fa8:	e00b      	b.n	8003fc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	461a      	mov	r2, r3
 8003fde:	680b      	ldr	r3, [r1, #0]
 8003fe0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d10c      	bne.n	8004002 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f945 	bl	8004280 <USB_SetDevSpeed>
 8003ff6:	e008      	b.n	800400a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f940 	bl	8004280 <USB_SetDevSpeed>
 8004000:	e003      	b.n	800400a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004002:	2103      	movs	r1, #3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f93b 	bl	8004280 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800400a:	2110      	movs	r1, #16
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8f3 	bl	80041f8 <USB_FlushTxFifo>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f90f 	bl	8004240 <USB_FlushRxFifo>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	461a      	mov	r2, r3
 8004034:	2300      	movs	r3, #0
 8004036:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	461a      	mov	r2, r3
 8004040:	2300      	movs	r3, #0
 8004042:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	461a      	mov	r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	e043      	b.n	80040de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406c:	d118      	bne.n	80040a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	461a      	mov	r2, r3
 8004082:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	e013      	b.n	80040b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	461a      	mov	r2, r3
 8004098:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e008      	b.n	80040b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040be:	461a      	mov	r2, r3
 80040c0:	2300      	movs	r3, #0
 80040c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	461a      	mov	r2, r3
 80040d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	3301      	adds	r3, #1
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d3b7      	bcc.n	8004056 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e043      	b.n	8004174 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004102:	d118      	bne.n	8004136 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	461a      	mov	r2, r3
 8004118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e013      	b.n	8004148 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e008      	b.n	8004148 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004142:	461a      	mov	r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	2300      	movs	r3, #0
 8004158:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800416c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3301      	adds	r3, #1
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	429a      	cmp	r2, r3
 800417a:	d3b7      	bcc.n	80040ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800418a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800419c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f043 0210 	orr.w	r2, r3, #16
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <USB_DevInit+0x2c4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f043 0208 	orr.w	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d107      	bne.n	80041e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041f0:	b004      	add	sp, #16
 80041f2:	4770      	bx	lr
 80041f4:	803c3800 	.word	0x803c3800

080041f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	019b      	lsls	r3, r3, #6
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3301      	adds	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <USB_FlushTxFifo+0x44>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e006      	b.n	8004230 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b20      	cmp	r3, #32
 800422c:	d0f1      	beq.n	8004212 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	00030d40 	.word	0x00030d40

08004240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2210      	movs	r2, #16
 8004250:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <USB_FlushRxFifo+0x3c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e006      	b.n	8004270 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b10      	cmp	r3, #16
 800426c:	d0f1      	beq.n	8004252 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	00030d40 	.word	0x00030d40

08004280 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b087      	sub	sp, #28
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0306 	and.w	r3, r3, #6
 80042ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
 80042d6:	e00a      	b.n	80042ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d002      	beq.n	80042e4 <USB_GetDevSpeed+0x32>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d102      	bne.n	80042ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042e4:	2302      	movs	r3, #2
 80042e6:	75fb      	strb	r3, [r7, #23]
 80042e8:	e001      	b.n	80042ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042ea:	230f      	movs	r3, #15
 80042ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d13a      	bne.n	800438e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	2101      	movs	r1, #1
 800432a:	fa01 f303 	lsl.w	r3, r1, r3
 800432e:	b29b      	uxth	r3, r3
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004336:	4313      	orrs	r3, r2
 8004338:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d155      	bne.n	80043fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	78db      	ldrb	r3, [r3, #3]
 800436a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800436c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	059b      	lsls	r3, r3, #22
 8004372:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004374:	4313      	orrs	r3, r2
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e036      	b.n	80043fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11a      	bne.n	80043fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	78db      	ldrb	r3, [r3, #3]
 80043e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043e2:	430b      	orrs	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d161      	bne.n	80044ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800443a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800443e:	d11f      	bne.n	8004480 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800445e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800447e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	2101      	movs	r1, #1
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	b29b      	uxth	r3, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a0:	4013      	ands	r3, r2
 80044a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c4:	4013      	ands	r3, r2
 80044c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	0159      	lsls	r1, r3, #5
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	440b      	add	r3, r1
 80044de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e2:	4619      	mov	r1, r3
 80044e4:	4b35      	ldr	r3, [pc, #212]	; (80045bc <USB_DeactivateEndpoint+0x1b0>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
 80044ea:	e060      	b.n	80045ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004502:	d11f      	bne.n	8004544 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004522:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004542:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	43db      	mvns	r3, r3
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004564:	4013      	ands	r3, r2
 8004566:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	2101      	movs	r1, #1
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	43db      	mvns	r3, r3
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004588:	4013      	ands	r3, r2
 800458a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0159      	lsls	r1, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	440b      	add	r3, r1
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	4619      	mov	r1, r3
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <USB_DeactivateEndpoint+0x1b4>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	ec337800 	.word	0xec337800
 80045c0:	eff37800 	.word	0xeff37800

080045c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f040 815c 	bne.w	800489e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d132      	bne.n	8004654 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800460c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464c:	0cdb      	lsrs	r3, r3, #19
 800464e:	04db      	lsls	r3, r3, #19
 8004650:	6113      	str	r3, [r2, #16]
 8004652:	e074      	b.n	800473e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466e:	0cdb      	lsrs	r3, r3, #19
 8004670:	04db      	lsls	r3, r3, #19
 8004672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004692:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6959      	ldr	r1, [r3, #20]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	440b      	add	r3, r1
 80046b0:	1e59      	subs	r1, r3, #1
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046bc:	4b9d      	ldr	r3, [pc, #628]	; (8004934 <USB_EPStartXfer+0x370>)
 80046be:	400b      	ands	r3, r1
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	0148      	lsls	r0, r1, #5
 80046c4:	69f9      	ldr	r1, [r7, #28]
 80046c6:	4401      	add	r1, r0
 80046c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046cc:	4313      	orrs	r3, r2
 80046ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e6:	69b9      	ldr	r1, [r7, #24]
 80046e8:	0148      	lsls	r0, r1, #5
 80046ea:	69f9      	ldr	r1, [r7, #28]
 80046ec:	4401      	add	r1, r0
 80046ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046f2:	4313      	orrs	r3, r2
 80046f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	78db      	ldrb	r3, [r3, #3]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d11f      	bne.n	800473e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004718:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800471c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800473c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d14b      	bne.n	80047dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d009      	beq.n	8004760 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	78db      	ldrb	r3, [r3, #3]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d128      	bne.n	80047ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d110      	bne.n	800479a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e00f      	b.n	80047ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e12f      	b.n	8004a3c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	78db      	ldrb	r3, [r3, #3]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d015      	beq.n	8004830 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8117 	beq.w	8004a3c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	69f9      	ldr	r1, [r7, #28]
 8004826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482a:	4313      	orrs	r3, r2
 800482c:	634b      	str	r3, [r1, #52]	; 0x34
 800482e:	e105      	b.n	8004a3c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d110      	bne.n	8004862 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e00f      	b.n	8004882 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004880:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	68d9      	ldr	r1, [r3, #12]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	b298      	uxth	r0, r3
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4603      	mov	r3, r0
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fa2b 	bl	8004cf2 <USB_WritePacket>
 800489c:	e0ce      	b.n	8004a3c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b8:	0cdb      	lsrs	r3, r3, #19
 80048ba:	04db      	lsls	r3, r3, #19
 80048bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d126      	bne.n	8004938 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	0148      	lsls	r0, r1, #5
 8004904:	69f9      	ldr	r1, [r7, #28]
 8004906:	4401      	add	r1, r0
 8004908:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800492a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800492e:	6113      	str	r3, [r2, #16]
 8004930:	e036      	b.n	80049a0 <USB_EPStartXfer+0x3dc>
 8004932:	bf00      	nop
 8004934:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4413      	add	r3, r2
 8004942:	1e5a      	subs	r2, r3, #1
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	8afb      	ldrh	r3, [r7, #22]
 800495e:	04d9      	lsls	r1, r3, #19
 8004960:	4b39      	ldr	r3, [pc, #228]	; (8004a48 <USB_EPStartXfer+0x484>)
 8004962:	400b      	ands	r3, r1
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	0148      	lsls	r0, r1, #5
 8004968:	69f9      	ldr	r1, [r7, #28]
 800496a:	4401      	add	r1, r0
 800496c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004970:	4313      	orrs	r3, r2
 8004972:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	8af9      	ldrh	r1, [r7, #22]
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	0148      	lsls	r0, r1, #5
 8004994:	69f9      	ldr	r1, [r7, #28]
 8004996:	4401      	add	r1, r0
 8004998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10d      	bne.n	80049c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	68d9      	ldr	r1, [r3, #12]
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	460a      	mov	r2, r1
 80049c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	78db      	ldrb	r3, [r3, #3]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d128      	bne.n	8004a1c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d110      	bne.n	80049fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e00f      	b.n	8004a1c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	1ff80000 	.word	0x1ff80000

08004a4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	f040 80cd 	bne.w	8004c08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d132      	bne.n	8004adc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	0151      	lsls	r1, r2, #5
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad4:	0cdb      	lsrs	r3, r3, #19
 8004ad6:	04db      	lsls	r3, r3, #19
 8004ad8:	6113      	str	r3, [r2, #16]
 8004ada:	e04e      	b.n	8004b7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af6:	0cdb      	lsrs	r3, r3, #19
 8004af8:	04db      	lsls	r3, r3, #19
 8004afa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d903      	bls.n	8004b34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6a:	6939      	ldr	r1, [r7, #16]
 8004b6c:	0148      	lsls	r0, r1, #5
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	4401      	add	r1, r0
 8004b72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b76:	4313      	orrs	r3, r2
 8004b78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d11e      	bne.n	8004bbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	461a      	mov	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e092      	b.n	8004ce4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	0151      	lsls	r1, r2, #5
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bdc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d07e      	beq.n	8004ce4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	6979      	ldr	r1, [r7, #20]
 8004bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c02:	4313      	orrs	r3, r2
 8004c04:	634b      	str	r3, [r1, #52]	; 0x34
 8004c06:	e06d      	b.n	8004ce4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	0cdb      	lsrs	r3, r3, #19
 8004c24:	04db      	lsls	r3, r3, #19
 8004c26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c4a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c92:	6939      	ldr	r1, [r7, #16]
 8004c94:	0148      	lsls	r0, r1, #5
 8004c96:	6979      	ldr	r1, [r7, #20]
 8004c98:	4401      	add	r1, r0
 8004c9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d10d      	bne.n	8004cc4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	68d9      	ldr	r1, [r3, #12]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	460a      	mov	r2, r1
 8004cc2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ce2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b089      	sub	sp, #36	; 0x24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	461a      	mov	r2, r3
 8004d00:	460b      	mov	r3, r1
 8004d02:	71fb      	strb	r3, [r7, #7]
 8004d04:	4613      	mov	r3, r2
 8004d06:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d123      	bne.n	8004d60 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d18:	88bb      	ldrh	r3, [r7, #4]
 8004d1a:	3303      	adds	r3, #3
 8004d1c:	089b      	lsrs	r3, r3, #2
 8004d1e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	e018      	b.n	8004d58 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	031a      	lsls	r2, r3, #12
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d32:	461a      	mov	r2, r3
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	3301      	adds	r3, #1
 8004d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d3e2      	bcc.n	8004d26 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b08b      	sub	sp, #44	; 0x2c
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d94:	2300      	movs	r3, #0
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	e014      	b.n	8004dc4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	601a      	str	r2, [r3, #0]
    pDest++;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	3301      	adds	r3, #1
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	3301      	adds	r3, #1
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	3301      	adds	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	3301      	adds	r3, #1
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	6a3a      	ldr	r2, [r7, #32]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d3e6      	bcc.n	8004d9a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dcc:	8bfb      	ldrh	r3, [r7, #30]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01e      	beq.n	8004e10 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f107 0310 	add.w	r3, r7, #16
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	fa22 f303 	lsr.w	r3, r2, r3
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	701a      	strb	r2, [r3, #0]
      i++;
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	623b      	str	r3, [r7, #32]
      pDest++;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	3301      	adds	r3, #1
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e04:	8bfb      	ldrh	r3, [r7, #30]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e0a:	8bfb      	ldrh	r3, [r7, #30]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ea      	bne.n	8004de6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	372c      	adds	r7, #44	; 0x2c
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d12c      	bne.n	8004e94 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db12      	blt.n	8004e72 <USB_EPSetStall+0x54>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00f      	beq.n	8004e72 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e70:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e02b      	b.n	8004eec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	db12      	blt.n	8004ecc <USB_EPSetStall+0xae>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00f      	beq.n	8004ecc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	0151      	lsls	r1, r2, #5
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	440a      	add	r2, r1
 8004ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d128      	bne.n	8004f68 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	78db      	ldrb	r3, [r3, #3]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d003      	beq.n	8004f46 <USB_EPClearStall+0x4c>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	78db      	ldrb	r3, [r3, #3]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d138      	bne.n	8004fb8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e027      	b.n	8004fb8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	78db      	ldrb	r3, [r3, #3]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d003      	beq.n	8004f98 <USB_EPClearStall+0x9e>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	78db      	ldrb	r3, [r3, #3]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d10f      	bne.n	8004fb8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fe8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005000:	4313      	orrs	r3, r2
 8005002:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005040:	f023 0302 	bic.w	r3, r3, #2
 8005044:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005082:	f043 0302 	orr.w	r3, r3, #2
 8005086:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4013      	ands	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050ae:	68fb      	ldr	r3, [r7, #12]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	0c1b      	lsrs	r3, r3, #16
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4013      	ands	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	b29b      	uxth	r3, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	4013      	ands	r3, r2
 8005150:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005152:	68bb      	ldr	r3, [r7, #8]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	01db      	lsls	r3, r3, #7
 8005192:	b2db      	uxtb	r3, r3
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4013      	ands	r3, r2
 80051ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051ae:	68bb      	ldr	r3, [r7, #8]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0301 	and.w	r3, r3, #1
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
	...

08005220 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	460b      	mov	r3, r1
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	333c      	adds	r3, #60	; 0x3c
 8005236:	3304      	adds	r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4a26      	ldr	r2, [pc, #152]	; (80052d8 <USB_EP0_OutStart+0xb8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d90a      	bls.n	800525a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005254:	d101      	bne.n	800525a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	e037      	b.n	80052ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	2300      	movs	r3, #0
 8005264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005278:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005288:	f043 0318 	orr.w	r3, r3, #24
 800528c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052a2:	7afb      	ldrb	r3, [r7, #11]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10f      	bne.n	80052c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	461a      	mov	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	4f54300a 	.word	0x4f54300a

080052dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	4a13      	ldr	r2, [pc, #76]	; (800533c <USB_CoreReset+0x60>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e01a      	b.n	800532e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	daf3      	bge.n	80052e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f043 0201 	orr.w	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3301      	adds	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <USB_CoreReset+0x60>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d0f1      	beq.n	8005310 <USB_CoreReset+0x34>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	00030d40 	.word	0x00030d40

08005340 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800534c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005350:	f002 f982 	bl	8007658 <USBD_static_malloc>
 8005354:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005364:	2302      	movs	r3, #2
 8005366:	e066      	b.n	8005436 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7c1b      	ldrb	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d119      	bne.n	80053ac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800537c:	2202      	movs	r2, #2
 800537e:	2181      	movs	r1, #129	; 0x81
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f002 f846 	bl	8007412 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800538c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005390:	2202      	movs	r2, #2
 8005392:	2101      	movs	r1, #1
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f002 f83c 	bl	8007412 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2210      	movs	r2, #16
 80053a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80053aa:	e016      	b.n	80053da <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053ac:	2340      	movs	r3, #64	; 0x40
 80053ae:	2202      	movs	r2, #2
 80053b0:	2181      	movs	r1, #129	; 0x81
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f002 f82d 	bl	8007412 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053be:	2340      	movs	r3, #64	; 0x40
 80053c0:	2202      	movs	r2, #2
 80053c2:	2101      	movs	r1, #1
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f002 f824 	bl	8007412 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2210      	movs	r2, #16
 80053d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053da:	2308      	movs	r3, #8
 80053dc:	2203      	movs	r2, #3
 80053de:	2182      	movs	r1, #130	; 0x82
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f002 f816 	bl	8007412 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	7c1b      	ldrb	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800541a:	2101      	movs	r1, #1
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f002 f8e7 	bl	80075f0 <USBD_LL_PrepareReceive>
 8005422:	e007      	b.n	8005434 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800542a:	2340      	movs	r3, #64	; 0x40
 800542c:	2101      	movs	r1, #1
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f002 f8de 	bl	80075f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800544a:	2181      	movs	r1, #129	; 0x81
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f002 f806 	bl	800745e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005458:	2101      	movs	r1, #1
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f001 ffff 	bl	800745e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005468:	2182      	movs	r1, #130	; 0x82
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 fff7 	bl	800745e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00e      	beq.n	80054a8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800549a:	4618      	mov	r0, r3
 800549c:	f002 f8ea 	bl	8007674 <USBD_static_free>
    pdev->pClassData = NULL;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80054d8:	2303      	movs	r3, #3
 80054da:	e0af      	b.n	800563c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d03f      	beq.n	8005568 <USBD_CDC_Setup+0xb4>
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	f040 809f 	bne.w	800562c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	88db      	ldrh	r3, [r3, #6]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d02e      	beq.n	8005554 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da16      	bge.n	800552e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800550c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	88d2      	ldrh	r2, [r2, #6]
 8005512:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	88db      	ldrh	r3, [r3, #6]
 8005518:	2b07      	cmp	r3, #7
 800551a:	bf28      	it	cs
 800551c:	2307      	movcs	r3, #7
 800551e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	89fa      	ldrh	r2, [r7, #14]
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 fb19 	bl	8006b5e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800552c:	e085      	b.n	800563a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	785a      	ldrb	r2, [r3, #1]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	88db      	ldrh	r3, [r3, #6]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005544:	6939      	ldr	r1, [r7, #16]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	88db      	ldrh	r3, [r3, #6]
 800554a:	461a      	mov	r2, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 fb32 	bl	8006bb6 <USBD_CtlPrepareRx>
      break;
 8005552:	e072      	b.n	800563a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	7850      	ldrb	r0, [r2, #1]
 8005560:	2200      	movs	r2, #0
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	4798      	blx	r3
      break;
 8005566:	e068      	b.n	800563a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	2b0b      	cmp	r3, #11
 800556e:	d852      	bhi.n	8005616 <USBD_CDC_Setup+0x162>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <USBD_CDC_Setup+0xc4>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055a9 	.word	0x080055a9
 800557c:	08005625 	.word	0x08005625
 8005580:	08005617 	.word	0x08005617
 8005584:	08005617 	.word	0x08005617
 8005588:	08005617 	.word	0x08005617
 800558c:	08005617 	.word	0x08005617
 8005590:	08005617 	.word	0x08005617
 8005594:	08005617 	.word	0x08005617
 8005598:	08005617 	.word	0x08005617
 800559c:	08005617 	.word	0x08005617
 80055a0:	080055d3 	.word	0x080055d3
 80055a4:	080055fd 	.word	0x080055fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d107      	bne.n	80055c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055b4:	f107 030a 	add.w	r3, r7, #10
 80055b8:	2202      	movs	r2, #2
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 face 	bl	8006b5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055c2:	e032      	b.n	800562a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fa58 	bl	8006a7c <USBD_CtlError>
            ret = USBD_FAIL;
 80055cc:	2303      	movs	r3, #3
 80055ce:	75fb      	strb	r3, [r7, #23]
          break;
 80055d0:	e02b      	b.n	800562a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d107      	bne.n	80055ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80055de:	f107 030d 	add.w	r3, r7, #13
 80055e2:	2201      	movs	r2, #1
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 fab9 	bl	8006b5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055ec:	e01d      	b.n	800562a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 fa43 	bl	8006a7c <USBD_CtlError>
            ret = USBD_FAIL;
 80055f6:	2303      	movs	r3, #3
 80055f8:	75fb      	strb	r3, [r7, #23]
          break;
 80055fa:	e016      	b.n	800562a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b03      	cmp	r3, #3
 8005606:	d00f      	beq.n	8005628 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 fa36 	bl	8006a7c <USBD_CtlError>
            ret = USBD_FAIL;
 8005610:	2303      	movs	r3, #3
 8005612:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005614:	e008      	b.n	8005628 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 fa2f 	bl	8006a7c <USBD_CtlError>
          ret = USBD_FAIL;
 800561e:	2303      	movs	r3, #3
 8005620:	75fb      	strb	r3, [r7, #23]
          break;
 8005622:	e002      	b.n	800562a <USBD_CDC_Setup+0x176>
          break;
 8005624:	bf00      	nop
 8005626:	e008      	b.n	800563a <USBD_CDC_Setup+0x186>
          break;
 8005628:	bf00      	nop
      }
      break;
 800562a:	e006      	b.n	800563a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 fa24 	bl	8006a7c <USBD_CtlError>
      ret = USBD_FAIL;
 8005634:	2303      	movs	r3, #3
 8005636:	75fb      	strb	r3, [r7, #23]
      break;
 8005638:	bf00      	nop
  }

  return (uint8_t)ret;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005656:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005662:	2303      	movs	r3, #3
 8005664:	e04f      	b.n	8005706 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800566c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3318      	adds	r3, #24
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d029      	beq.n	80056d8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005684:	78fa      	ldrb	r2, [r7, #3]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	3318      	adds	r3, #24
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	78f9      	ldrb	r1, [r7, #3]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	460b      	mov	r3, r1
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	1a5b      	subs	r3, r3, r1
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4403      	add	r3, r0
 80056a4:	3344      	adds	r3, #68	; 0x44
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80056ac:	fb03 f301 	mul.w	r3, r3, r1
 80056b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d110      	bne.n	80056d8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3318      	adds	r3, #24
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056ca:	78f9      	ldrb	r1, [r7, #3]
 80056cc:	2300      	movs	r3, #0
 80056ce:	2200      	movs	r2, #0
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 ff6c 	bl	80075ae <USBD_LL_Transmit>
 80056d6:	e015      	b.n	8005704 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005720:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800572c:	2303      	movs	r3, #3
 800572e:	e015      	b.n	800575c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 ff7c 	bl	8007632 <USBD_LL_GetRxDataSize>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005756:	4611      	mov	r1, r2
 8005758:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005772:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800577a:	2303      	movs	r3, #3
 800577c:	e01b      	b.n	80057b6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <USBD_CDC_EP0_RxReady+0x50>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800578e:	2bff      	cmp	r3, #255	; 0xff
 8005790:	d010      	beq.n	80057b4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80057a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80057a8:	b292      	uxth	r2, r2
 80057aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	22ff      	movs	r2, #255	; 0xff
 80057b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2243      	movs	r2, #67	; 0x43
 80057cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057ce:	4b03      	ldr	r3, [pc, #12]	; (80057dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000094 	.word	0x20000094

080057e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2243      	movs	r2, #67	; 0x43
 80057ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	20000050 	.word	0x20000050

08005800 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2243      	movs	r2, #67	; 0x43
 800580c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800580e:	4b03      	ldr	r3, [pc, #12]	; (800581c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	200000d8 	.word	0x200000d8

08005820 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	220a      	movs	r2, #10
 800582c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800582e:	4b03      	ldr	r3, [pc, #12]	; (800583c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	2000000c 	.word	0x2000000c

08005840 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005850:	2303      	movs	r3, #3
 8005852:	e004      	b.n	800585e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800586a:	b480      	push	{r7}
 800586c:	b087      	sub	sp, #28
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800587c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005884:	2303      	movs	r3, #3
 8005886:	e008      	b.n	800589a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80058be:	2303      	movs	r3, #3
 80058c0:	e004      	b.n	80058cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e01a      	b.n	8005930 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005900:	2b00      	cmp	r3, #0
 8005902:	d114      	bne.n	800592e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2201      	movs	r2, #1
 8005908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005922:	2181      	movs	r1, #129	; 0x81
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 fe42 	bl	80075ae <USBD_LL_Transmit>

    ret = USBD_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800592e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005946:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005952:	2303      	movs	r3, #3
 8005954:	e016      	b.n	8005984 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	7c1b      	ldrb	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005968:	2101      	movs	r1, #1
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 fe40 	bl	80075f0 <USBD_LL_PrepareReceive>
 8005970:	e007      	b.n	8005982 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	2101      	movs	r1, #1
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 fe37 	bl	80075f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	4613      	mov	r3, r2
 8005998:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e01f      	b.n	80059e4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	79fa      	ldrb	r2, [r7, #7]
 80059d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f001 fcb3 	bl	8007344 <USBD_LL_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e016      	b.n	8005a32 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	f107 020e 	add.w	r2, r7, #14
 8005a24:	4610      	mov	r0, r2
 8005a26:	4798      	blx	r3
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 fcca 	bl	80073dc <USBD_LL_Start>
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
  }

  return USBD_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 ff90 	bl	8006a08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005af6:	461a      	mov	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d01a      	beq.n	8005b42 <USBD_LL_SetupStage+0x72>
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d822      	bhi.n	8005b56 <USBD_LL_SetupStage+0x86>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <USBD_LL_SetupStage+0x4a>
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d00a      	beq.n	8005b2e <USBD_LL_SetupStage+0x5e>
 8005b18:	e01d      	b.n	8005b56 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa62 	bl	8005fec <USBD_StdDevReq>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2c:	e020      	b.n	8005b70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fac6 	bl	80060c8 <USBD_StdItfReq>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b40:	e016      	b.n	8005b70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fb05 	bl	800615a <USBD_StdEPReq>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]
      break;
 8005b54:	e00c      	b.n	8005b70 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fc99 	bl	800749c <USBD_LL_StallEP>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6e:	bf00      	nop
  }

  return ret;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b086      	sub	sp, #24
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	460b      	mov	r3, r1
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b88:	7afb      	ldrb	r3, [r7, #11]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d138      	bne.n	8005c00 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d14a      	bne.n	8005c36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d913      	bls.n	8005bd4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	1ad2      	subs	r2, r2, r3
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	bf28      	it	cs
 8005bc6:	4613      	movcs	r3, r2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f001 f80f 	bl	8006bf0 <USBD_CtlContinueRx>
 8005bd2:	e030      	b.n	8005c36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d10b      	bne.n	8005bf8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f001 f80a 	bl	8006c12 <USBD_CtlSendStatus>
 8005bfe:	e01a      	b.n	8005c36 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d114      	bne.n	8005c36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00e      	beq.n	8005c36 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	7afa      	ldrb	r2, [r7, #11]
 8005c22:	4611      	mov	r1, r2
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	4798      	blx	r3
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	e000      	b.n	8005c38 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c4e:	7afb      	ldrb	r3, [r7, #11]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d16b      	bne.n	8005d2c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3314      	adds	r3, #20
 8005c58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d156      	bne.n	8005d12 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d914      	bls.n	8005c9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	1ad2      	subs	r2, r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 ff84 	bl	8006b94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2100      	movs	r1, #0
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f001 fcac 	bl	80075f0 <USBD_LL_PrepareReceive>
 8005c98:	e03b      	b.n	8005d12 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d11c      	bne.n	8005ce0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d316      	bcc.n	8005ce0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d20f      	bcs.n	8005ce0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 ff65 	bl	8006b94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f001 fc89 	bl	80075f0 <USBD_LL_PrepareReceive>
 8005cde:	e018      	b.n	8005d12 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d10b      	bne.n	8005d04 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f001 fbc8 	bl	800749c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 ff93 	bl	8006c38 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d122      	bne.n	8005d62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff fe98 	bl	8005a52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d2a:	e01a      	b.n	8005d62 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d114      	bne.n	8005d62 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00e      	beq.n	8005d62 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	7afa      	ldrb	r2, [r7, #11]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	4798      	blx	r3
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	e000      	b.n	8005d64 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e02f      	b.n	8005e00 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00f      	beq.n	8005dca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6852      	ldr	r2, [r2, #4]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dca:	2340      	movs	r3, #64	; 0x40
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2100      	movs	r1, #0
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 fb1e 	bl	8007412 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2240      	movs	r2, #64	; 0x40
 8005de2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005de6:	2340      	movs	r3, #64	; 0x40
 8005de8:	2200      	movs	r2, #0
 8005dea:	2180      	movs	r1, #128	; 0x80
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fb10 	bl	8007412 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2240      	movs	r2, #64	; 0x40
 8005dfc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2204      	movs	r2, #4
 8005e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d106      	bne.n	8005e76 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e012      	b.n	8005ec0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d10b      	bne.n	8005ebe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e014      	b.n	8005f0c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d10d      	bne.n	8005f0a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	4611      	mov	r1, r2
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e014      	b.n	8005f58 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d10d      	bne.n	8005f56 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	78fa      	ldrb	r2, [r7, #3]
 8005f50:	4611      	mov	r1, r2
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6852      	ldr	r2, [r2, #4]
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
  }

  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b087      	sub	sp, #28
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005fcc:	8a3b      	ldrh	r3, [r7, #16]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	b21a      	sxth	r2, r3
 8005fd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b21b      	sxth	r3, r3
 8005fda:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005fdc:	89fb      	ldrh	r3, [r7, #14]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d005      	beq.n	8006012 <USBD_StdDevReq+0x26>
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	d853      	bhi.n	80060b2 <USBD_StdDevReq+0xc6>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <USBD_StdDevReq+0x3a>
 800600e:	2b20      	cmp	r3, #32
 8006010:	d14f      	bne.n	80060b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]
      break;
 8006024:	e04a      	b.n	80060bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	2b09      	cmp	r3, #9
 800602c:	d83b      	bhi.n	80060a6 <USBD_StdDevReq+0xba>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <USBD_StdDevReq+0x48>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006089 	.word	0x08006089
 8006038:	0800609d 	.word	0x0800609d
 800603c:	080060a7 	.word	0x080060a7
 8006040:	08006093 	.word	0x08006093
 8006044:	080060a7 	.word	0x080060a7
 8006048:	08006067 	.word	0x08006067
 800604c:	0800605d 	.word	0x0800605d
 8006050:	080060a7 	.word	0x080060a7
 8006054:	0800607f 	.word	0x0800607f
 8006058:	08006071 	.word	0x08006071
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f9de 	bl	8006420 <USBD_GetDescriptor>
          break;
 8006064:	e024      	b.n	80060b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fb43 	bl	80066f4 <USBD_SetAddress>
          break;
 800606e:	e01f      	b.n	80060b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fb82 	bl	800677c <USBD_SetConfig>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
          break;
 800607c:	e018      	b.n	80060b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fc21 	bl	80068c8 <USBD_GetConfig>
          break;
 8006086:	e013      	b.n	80060b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fc52 	bl	8006934 <USBD_GetStatus>
          break;
 8006090:	e00e      	b.n	80060b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fc81 	bl	800699c <USBD_SetFeature>
          break;
 800609a:	e009      	b.n	80060b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fc90 	bl	80069c4 <USBD_ClrFeature>
          break;
 80060a4:	e004      	b.n	80060b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fce7 	bl	8006a7c <USBD_CtlError>
          break;
 80060ae:	bf00      	nop
      }
      break;
 80060b0:	e004      	b.n	80060bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fce1 	bl	8006a7c <USBD_CtlError>
      break;
 80060ba:	bf00      	nop
  }

  return ret;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop

080060c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d005      	beq.n	80060ee <USBD_StdItfReq+0x26>
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d82f      	bhi.n	8006146 <USBD_StdItfReq+0x7e>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <USBD_StdItfReq+0x26>
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d12b      	bne.n	8006146 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d81d      	bhi.n	8006138 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	889b      	ldrh	r3, [r3, #4]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b01      	cmp	r3, #1
 8006104:	d813      	bhi.n	800612e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	88db      	ldrh	r3, [r3, #6]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d110      	bne.n	8006142 <USBD_StdItfReq+0x7a>
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fd73 	bl	8006c12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800612c:	e009      	b.n	8006142 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fca3 	bl	8006a7c <USBD_CtlError>
          break;
 8006136:	e004      	b.n	8006142 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fc9e 	bl	8006a7c <USBD_CtlError>
          break;
 8006140:	e000      	b.n	8006144 <USBD_StdItfReq+0x7c>
          break;
 8006142:	bf00      	nop
      }
      break;
 8006144:	e004      	b.n	8006150 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fc97 	bl	8006a7c <USBD_CtlError>
      break;
 800614e:	bf00      	nop
  }

  return ret;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	889b      	ldrh	r3, [r3, #4]
 800616c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d007      	beq.n	800618a <USBD_StdEPReq+0x30>
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	f200 8145 	bhi.w	800640a <USBD_StdEPReq+0x2b0>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00c      	beq.n	800619e <USBD_StdEPReq+0x44>
 8006184:	2b20      	cmp	r3, #32
 8006186:	f040 8140 	bne.w	800640a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
      break;
 800619c:	e13a      	b.n	8006414 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d007      	beq.n	80061b6 <USBD_StdEPReq+0x5c>
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	f300 8129 	bgt.w	80063fe <USBD_StdEPReq+0x2a4>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d07f      	beq.n	80062b0 <USBD_StdEPReq+0x156>
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d03c      	beq.n	800622e <USBD_StdEPReq+0xd4>
 80061b4:	e123      	b.n	80063fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d002      	beq.n	80061c8 <USBD_StdEPReq+0x6e>
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d016      	beq.n	80061f4 <USBD_StdEPReq+0x9a>
 80061c6:	e02c      	b.n	8006222 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00d      	beq.n	80061ea <USBD_StdEPReq+0x90>
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	2b80      	cmp	r3, #128	; 0x80
 80061d2:	d00a      	beq.n	80061ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 f95f 	bl	800749c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 f95b 	bl	800749c <USBD_LL_StallEP>
 80061e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061e8:	e020      	b.n	800622c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fc45 	bl	8006a7c <USBD_CtlError>
              break;
 80061f2:	e01b      	b.n	800622c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10e      	bne.n	800621a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00b      	beq.n	800621a <USBD_StdEPReq+0xc0>
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	2b80      	cmp	r3, #128	; 0x80
 8006206:	d008      	beq.n	800621a <USBD_StdEPReq+0xc0>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f941 	bl	800749c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fcf9 	bl	8006c12 <USBD_CtlSendStatus>

              break;
 8006220:	e004      	b.n	800622c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fc29 	bl	8006a7c <USBD_CtlError>
              break;
 800622a:	bf00      	nop
          }
          break;
 800622c:	e0ec      	b.n	8006408 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d002      	beq.n	8006240 <USBD_StdEPReq+0xe6>
 800623a:	2b03      	cmp	r3, #3
 800623c:	d016      	beq.n	800626c <USBD_StdEPReq+0x112>
 800623e:	e030      	b.n	80062a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <USBD_StdEPReq+0x108>
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	2b80      	cmp	r3, #128	; 0x80
 800624a:	d00a      	beq.n	8006262 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 f923 	bl	800749c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006256:	2180      	movs	r1, #128	; 0x80
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 f91f 	bl	800749c <USBD_LL_StallEP>
 800625e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006260:	e025      	b.n	80062ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fc09 	bl	8006a7c <USBD_CtlError>
              break;
 800626a:	e020      	b.n	80062ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	885b      	ldrh	r3, [r3, #2]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d11b      	bne.n	80062ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f929 	bl	80074da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fcc2 	bl	8006c12 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80062a0:	e004      	b.n	80062ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fbe9 	bl	8006a7c <USBD_CtlError>
              break;
 80062aa:	e000      	b.n	80062ae <USBD_StdEPReq+0x154>
              break;
 80062ac:	bf00      	nop
          }
          break;
 80062ae:	e0ab      	b.n	8006408 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d002      	beq.n	80062c2 <USBD_StdEPReq+0x168>
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d032      	beq.n	8006326 <USBD_StdEPReq+0x1cc>
 80062c0:	e097      	b.n	80063f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <USBD_StdEPReq+0x17e>
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	2b80      	cmp	r3, #128	; 0x80
 80062cc:	d004      	beq.n	80062d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fbd3 	bl	8006a7c <USBD_CtlError>
                break;
 80062d6:	e091      	b.n	80063fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	da0b      	bge.n	80062f8 <USBD_StdEPReq+0x19e>
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	3310      	adds	r3, #16
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	3304      	adds	r3, #4
 80062f6:	e00b      	b.n	8006310 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	4413      	add	r3, r2
 800630e:	3304      	adds	r3, #4
 8006310:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2202      	movs	r2, #2
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fc1d 	bl	8006b5e <USBD_CtlSendData>
              break;
 8006324:	e06a      	b.n	80063fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800632a:	2b00      	cmp	r3, #0
 800632c:	da11      	bge.n	8006352 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	f003 020f 	and.w	r2, r3, #15
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	3324      	adds	r3, #36	; 0x24
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d117      	bne.n	8006378 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fb96 	bl	8006a7c <USBD_CtlError>
                  break;
 8006350:	e054      	b.n	80063fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	f003 020f 	and.w	r2, r3, #15
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d104      	bne.n	8006378 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fb83 	bl	8006a7c <USBD_CtlError>
                  break;
 8006376:	e041      	b.n	80063fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800637c:	2b00      	cmp	r3, #0
 800637e:	da0b      	bge.n	8006398 <USBD_StdEPReq+0x23e>
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	3310      	adds	r3, #16
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4413      	add	r3, r2
 8006394:	3304      	adds	r3, #4
 8006396:	e00b      	b.n	80063b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	3304      	adds	r3, #4
 80063b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <USBD_StdEPReq+0x264>
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	2b80      	cmp	r3, #128	; 0x80
 80063bc:	d103      	bne.n	80063c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e00e      	b.n	80063e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 f8a4 	bl	8007518 <USBD_LL_IsStallEP>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e002      	b.n	80063e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2202      	movs	r2, #2
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fbb7 	bl	8006b5e <USBD_CtlSendData>
              break;
 80063f0:	e004      	b.n	80063fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fb41 	bl	8006a7c <USBD_CtlError>
              break;
 80063fa:	bf00      	nop
          }
          break;
 80063fc:	e004      	b.n	8006408 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fb3b 	bl	8006a7c <USBD_CtlError>
          break;
 8006406:	bf00      	nop
      }
      break;
 8006408:	e004      	b.n	8006414 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fb35 	bl	8006a7c <USBD_CtlError>
      break;
 8006412:	bf00      	nop
  }

  return ret;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	2b06      	cmp	r3, #6
 8006442:	f200 8128 	bhi.w	8006696 <USBD_GetDescriptor+0x276>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <USBD_GetDescriptor+0x2c>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006469 	.word	0x08006469
 8006450:	08006481 	.word	0x08006481
 8006454:	080064c1 	.word	0x080064c1
 8006458:	08006697 	.word	0x08006697
 800645c:	08006697 	.word	0x08006697
 8006460:	08006637 	.word	0x08006637
 8006464:	08006663 	.word	0x08006663
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	7c12      	ldrb	r2, [r2, #16]
 8006474:	f107 0108 	add.w	r1, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
      break;
 800647e:	e112      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7c1b      	ldrb	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10d      	bne.n	80064a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	f107 0208 	add.w	r2, r7, #8
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
 8006498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	2202      	movs	r2, #2
 80064a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80064a2:	e100      	b.n	80066a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	f107 0208 	add.w	r2, r7, #8
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
 80064b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	2202      	movs	r2, #2
 80064bc:	701a      	strb	r2, [r3, #0]
      break;
 80064be:	e0f2      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	885b      	ldrh	r3, [r3, #2]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b05      	cmp	r3, #5
 80064c8:	f200 80ac 	bhi.w	8006624 <USBD_GetDescriptor+0x204>
 80064cc:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <USBD_GetDescriptor+0xb4>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	080064ed 	.word	0x080064ed
 80064d8:	08006521 	.word	0x08006521
 80064dc:	08006555 	.word	0x08006555
 80064e0:	08006589 	.word	0x08006589
 80064e4:	080065bd 	.word	0x080065bd
 80064e8:	080065f1 	.word	0x080065f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	7c12      	ldrb	r2, [r2, #16]
 8006504:	f107 0108 	add.w	r1, r7, #8
 8006508:	4610      	mov	r0, r2
 800650a:	4798      	blx	r3
 800650c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800650e:	e091      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fab2 	bl	8006a7c <USBD_CtlError>
            err++;
 8006518:	7afb      	ldrb	r3, [r7, #11]
 800651a:	3301      	adds	r3, #1
 800651c:	72fb      	strb	r3, [r7, #11]
          break;
 800651e:	e089      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	7c12      	ldrb	r2, [r2, #16]
 8006538:	f107 0108 	add.w	r1, r7, #8
 800653c:	4610      	mov	r0, r2
 800653e:	4798      	blx	r3
 8006540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006542:	e077      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa98 	bl	8006a7c <USBD_CtlError>
            err++;
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	3301      	adds	r3, #1
 8006550:	72fb      	strb	r3, [r7, #11]
          break;
 8006552:	e06f      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	7c12      	ldrb	r2, [r2, #16]
 800656c:	f107 0108 	add.w	r1, r7, #8
 8006570:	4610      	mov	r0, r2
 8006572:	4798      	blx	r3
 8006574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006576:	e05d      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa7e 	bl	8006a7c <USBD_CtlError>
            err++;
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	3301      	adds	r3, #1
 8006584:	72fb      	strb	r3, [r7, #11]
          break;
 8006586:	e055      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	7c12      	ldrb	r2, [r2, #16]
 80065a0:	f107 0108 	add.w	r1, r7, #8
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
 80065a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065aa:	e043      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa64 	bl	8006a7c <USBD_CtlError>
            err++;
 80065b4:	7afb      	ldrb	r3, [r7, #11]
 80065b6:	3301      	adds	r3, #1
 80065b8:	72fb      	strb	r3, [r7, #11]
          break;
 80065ba:	e03b      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	7c12      	ldrb	r2, [r2, #16]
 80065d4:	f107 0108 	add.w	r1, r7, #8
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065de:	e029      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa4a 	bl	8006a7c <USBD_CtlError>
            err++;
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	3301      	adds	r3, #1
 80065ec:	72fb      	strb	r3, [r7, #11]
          break;
 80065ee:	e021      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	7c12      	ldrb	r2, [r2, #16]
 8006608:	f107 0108 	add.w	r1, r7, #8
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
 8006610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006612:	e00f      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa30 	bl	8006a7c <USBD_CtlError>
            err++;
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	3301      	adds	r3, #1
 8006620:	72fb      	strb	r3, [r7, #11]
          break;
 8006622:	e007      	b.n	8006634 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa28 	bl	8006a7c <USBD_CtlError>
          err++;
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	3301      	adds	r3, #1
 8006630:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006632:	bf00      	nop
      }
      break;
 8006634:	e037      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7c1b      	ldrb	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	f107 0208 	add.w	r2, r7, #8
 800664a:	4610      	mov	r0, r2
 800664c:	4798      	blx	r3
 800664e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006650:	e029      	b.n	80066a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa11 	bl	8006a7c <USBD_CtlError>
        err++;
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	3301      	adds	r3, #1
 800665e:	72fb      	strb	r3, [r7, #11]
      break;
 8006660:	e021      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	7c1b      	ldrb	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10d      	bne.n	8006686 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	f107 0208 	add.w	r2, r7, #8
 8006676:	4610      	mov	r0, r2
 8006678:	4798      	blx	r3
 800667a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	2207      	movs	r2, #7
 8006682:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006684:	e00f      	b.n	80066a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f9f7 	bl	8006a7c <USBD_CtlError>
        err++;
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	3301      	adds	r3, #1
 8006692:	72fb      	strb	r3, [r7, #11]
      break;
 8006694:	e007      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f9ef 	bl	8006a7c <USBD_CtlError>
      err++;
 800669e:	7afb      	ldrb	r3, [r7, #11]
 80066a0:	3301      	adds	r3, #1
 80066a2:	72fb      	strb	r3, [r7, #11]
      break;
 80066a4:	bf00      	nop
  }

  if (err != 0U)
 80066a6:	7afb      	ldrb	r3, [r7, #11]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11e      	bne.n	80066ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	88db      	ldrh	r3, [r3, #6]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d016      	beq.n	80066e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80066b4:	893b      	ldrh	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	88da      	ldrh	r2, [r3, #6]
 80066be:	893b      	ldrh	r3, [r7, #8]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	bf28      	it	cs
 80066c4:	4613      	movcs	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066ca:	893b      	ldrh	r3, [r7, #8]
 80066cc:	461a      	mov	r2, r3
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa44 	bl	8006b5e <USBD_CtlSendData>
 80066d6:	e009      	b.n	80066ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9ce 	bl	8006a7c <USBD_CtlError>
 80066e0:	e004      	b.n	80066ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa95 	bl	8006c12 <USBD_CtlSendStatus>
 80066e8:	e000      	b.n	80066ec <USBD_GetDescriptor+0x2cc>
    return;
 80066ea:	bf00      	nop
  }
}
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop

080066f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	889b      	ldrh	r3, [r3, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d131      	bne.n	800676a <USBD_SetAddress+0x76>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	88db      	ldrh	r3, [r3, #6]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d12d      	bne.n	800676a <USBD_SetAddress+0x76>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	885b      	ldrh	r3, [r3, #2]
 8006712:	2b7f      	cmp	r3, #127	; 0x7f
 8006714:	d829      	bhi.n	800676a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	885b      	ldrh	r3, [r3, #2]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006720:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b03      	cmp	r3, #3
 800672c:	d104      	bne.n	8006738 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f9a3 	bl	8006a7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006736:	e01d      	b.n	8006774 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	7bfa      	ldrb	r2, [r7, #15]
 800673c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 ff13 	bl	8007570 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa61 	bl	8006c12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675e:	e009      	b.n	8006774 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006768:	e004      	b.n	8006774 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f985 	bl	8006a7c <USBD_CtlError>
  }
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	885b      	ldrh	r3, [r3, #2]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <USBD_SetConfig+0x148>)
 8006792:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006794:	4b4b      	ldr	r3, [pc, #300]	; (80068c4 <USBD_SetConfig+0x148>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d905      	bls.n	80067a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f96c 	bl	8006a7c <USBD_CtlError>
    return USBD_FAIL;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e088      	b.n	80068ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d002      	beq.n	80067ba <USBD_SetConfig+0x3e>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d025      	beq.n	8006804 <USBD_SetConfig+0x88>
 80067b8:	e071      	b.n	800689e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80067ba:	4b42      	ldr	r3, [pc, #264]	; (80068c4 <USBD_SetConfig+0x148>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01c      	beq.n	80067fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80067c2:	4b40      	ldr	r3, [pc, #256]	; (80068c4 <USBD_SetConfig+0x148>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067cc:	4b3d      	ldr	r3, [pc, #244]	; (80068c4 <USBD_SetConfig+0x148>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff f948 	bl	8005a68 <USBD_SetClassConfig>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f949 	bl	8006a7c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067ea:	e065      	b.n	80068b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa10 	bl	8006c12 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2203      	movs	r2, #3
 80067f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067fa:	e05d      	b.n	80068b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa08 	bl	8006c12 <USBD_CtlSendStatus>
      break;
 8006802:	e059      	b.n	80068b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006804:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <USBD_SetConfig+0x148>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d112      	bne.n	8006832 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006814:	4b2b      	ldr	r3, [pc, #172]	; (80068c4 <USBD_SetConfig+0x148>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800681e:	4b29      	ldr	r3, [pc, #164]	; (80068c4 <USBD_SetConfig+0x148>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff f93b 	bl	8005aa0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9f1 	bl	8006c12 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006830:	e042      	b.n	80068b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <USBD_SetConfig+0x148>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d02a      	beq.n	8006896 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff f929 	bl	8005aa0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800684e:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <USBD_SetConfig+0x148>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006858:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <USBD_SetConfig+0x148>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff f902 	bl	8005a68 <USBD_SetClassConfig>
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00f      	beq.n	800688e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f903 	bl	8006a7c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff f90e 	bl	8005aa0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800688c:	e014      	b.n	80068b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9bf 	bl	8006c12 <USBD_CtlSendStatus>
      break;
 8006894:	e010      	b.n	80068b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f9bb 	bl	8006c12 <USBD_CtlSendStatus>
      break;
 800689c:	e00c      	b.n	80068b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f8eb 	bl	8006a7c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068a6:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <USBD_SetConfig+0x148>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff f8f7 	bl	8005aa0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80068b2:	2303      	movs	r3, #3
 80068b4:	73fb      	strb	r3, [r7, #15]
      break;
 80068b6:	bf00      	nop
  }

  return ret;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000204 	.word	0x20000204

080068c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	88db      	ldrh	r3, [r3, #6]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d004      	beq.n	80068e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f8cd 	bl	8006a7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80068e2:	e023      	b.n	800692c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	dc02      	bgt.n	80068f6 <USBD_GetConfig+0x2e>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dc03      	bgt.n	80068fc <USBD_GetConfig+0x34>
 80068f4:	e015      	b.n	8006922 <USBD_GetConfig+0x5a>
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d00b      	beq.n	8006912 <USBD_GetConfig+0x4a>
 80068fa:	e012      	b.n	8006922 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3308      	adds	r3, #8
 8006906:	2201      	movs	r2, #1
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f927 	bl	8006b5e <USBD_CtlSendData>
        break;
 8006910:	e00c      	b.n	800692c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	2201      	movs	r2, #1
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f91f 	bl	8006b5e <USBD_CtlSendData>
        break;
 8006920:	e004      	b.n	800692c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8a9 	bl	8006a7c <USBD_CtlError>
        break;
 800692a:	bf00      	nop
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006944:	b2db      	uxtb	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	2b02      	cmp	r3, #2
 800694a:	d81e      	bhi.n	800698a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	88db      	ldrh	r3, [r3, #6]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d004      	beq.n	800695e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f890 	bl	8006a7c <USBD_CtlError>
        break;
 800695c:	e01a      	b.n	8006994 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f043 0202 	orr.w	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	330c      	adds	r3, #12
 800697e:	2202      	movs	r2, #2
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f8eb 	bl	8006b5e <USBD_CtlSendData>
      break;
 8006988:	e004      	b.n	8006994 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f875 	bl	8006a7c <USBD_CtlError>
      break;
 8006992:	bf00      	nop
  }
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	885b      	ldrh	r3, [r3, #2]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d106      	bne.n	80069bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f92b 	bl	8006c12 <USBD_CtlSendStatus>
  }
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d80b      	bhi.n	80069f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	885b      	ldrh	r3, [r3, #2]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d10c      	bne.n	80069fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f910 	bl	8006c12 <USBD_CtlSendStatus>
      }
      break;
 80069f2:	e004      	b.n	80069fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f840 	bl	8006a7c <USBD_CtlError>
      break;
 80069fc:	e000      	b.n	8006a00 <USBD_ClrFeature+0x3c>
      break;
 80069fe:	bf00      	nop
  }
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff fabb 	bl	8005fae <SWAPBYTE>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff faae 	bl	8005fae <SWAPBYTE>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff faa1 	bl	8005fae <SWAPBYTE>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	80da      	strh	r2, [r3, #6]
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fd07 	bl	800749c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a8e:	2100      	movs	r1, #0
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fd03 	bl	800749c <USBD_LL_StallEP>
}
 8006a96:	bf00      	nop
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d036      	beq.n	8006b22 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ab8:	6938      	ldr	r0, [r7, #16]
 8006aba:	f000 f836 	bl	8006b2a <USBD_GetLen>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	7812      	ldrb	r2, [r2, #0]
 8006ad6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	3301      	adds	r3, #1
 8006adc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	3301      	adds	r3, #1
 8006aec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006aee:	e013      	b.n	8006b18 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	7812      	ldrb	r2, [r2, #0]
 8006afa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	3301      	adds	r3, #1
 8006b00:	613b      	str	r3, [r7, #16]
    idx++;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	3301      	adds	r3, #1
 8006b06:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	3301      	adds	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e7      	bne.n	8006af0 <USBD_GetString+0x52>
 8006b20:	e000      	b.n	8006b24 <USBD_GetString+0x86>
    return;
 8006b22:	bf00      	nop
  }
}
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b3a:	e005      	b.n	8006b48 <USBD_GetLen+0x1e>
  {
    len++;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1f5      	bne.n	8006b3c <USBD_GetLen+0x12>
  }

  return len;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	2100      	movs	r1, #0
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fd12 	bl	80075ae <USBD_LL_Transmit>

  return USBD_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fd01 	bl	80075ae <USBD_LL_Transmit>

  return USBD_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	2100      	movs	r1, #0
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fd05 	bl	80075f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	2100      	movs	r1, #0
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fcf4 	bl	80075f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c22:	2300      	movs	r3, #0
 8006c24:	2200      	movs	r2, #0
 8006c26:	2100      	movs	r1, #0
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fcc0 	bl	80075ae <USBD_LL_Transmit>

  return USBD_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2205      	movs	r2, #5
 8006c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fcce 	bl	80075f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c64:	2200      	movs	r2, #0
 8006c66:	4912      	ldr	r1, [pc, #72]	; (8006cb0 <MX_USB_DEVICE_Init+0x50>)
 8006c68:	4812      	ldr	r0, [pc, #72]	; (8006cb4 <MX_USB_DEVICE_Init+0x54>)
 8006c6a:	f7fe fe8f 	bl	800598c <USBD_Init>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c74:	f7fa f95c 	bl	8000f30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c78:	490f      	ldr	r1, [pc, #60]	; (8006cb8 <MX_USB_DEVICE_Init+0x58>)
 8006c7a:	480e      	ldr	r0, [pc, #56]	; (8006cb4 <MX_USB_DEVICE_Init+0x54>)
 8006c7c:	f7fe feb6 	bl	80059ec <USBD_RegisterClass>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c86:	f7fa f953 	bl	8000f30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006c8a:	490c      	ldr	r1, [pc, #48]	; (8006cbc <MX_USB_DEVICE_Init+0x5c>)
 8006c8c:	4809      	ldr	r0, [pc, #36]	; (8006cb4 <MX_USB_DEVICE_Init+0x54>)
 8006c8e:	f7fe fdd7 	bl	8005840 <USBD_CDC_RegisterInterface>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c98:	f7fa f94a 	bl	8000f30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c9c:	4805      	ldr	r0, [pc, #20]	; (8006cb4 <MX_USB_DEVICE_Init+0x54>)
 8006c9e:	f7fe fecc 	bl	8005a3a <USBD_Start>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ca8:	f7fa f942 	bl	8000f30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cac:	bf00      	nop
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000130 	.word	0x20000130
 8006cb4:	20000604 	.word	0x20000604
 8006cb8:	20000018 	.word	0x20000018
 8006cbc:	2000011c 	.word	0x2000011c

08006cc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	4905      	ldr	r1, [pc, #20]	; (8006cdc <CDC_Init_FS+0x1c>)
 8006cc8:	4805      	ldr	r0, [pc, #20]	; (8006ce0 <CDC_Init_FS+0x20>)
 8006cca:	f7fe fdce 	bl	800586a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006cce:	4905      	ldr	r1, [pc, #20]	; (8006ce4 <CDC_Init_FS+0x24>)
 8006cd0:	4803      	ldr	r0, [pc, #12]	; (8006ce0 <CDC_Init_FS+0x20>)
 8006cd2:	f7fe fde8 	bl	80058a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006cd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20000cbc 	.word	0x20000cbc
 8006ce0:	20000604 	.word	0x20000604
 8006ce4:	200008d4 	.word	0x200008d4

08006ce8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006cec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	71fb      	strb	r3, [r7, #7]
 8006d04:	4613      	mov	r3, r2
 8006d06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	2b23      	cmp	r3, #35	; 0x23
 8006d0c:	d84a      	bhi.n	8006da4 <CDC_Control_FS+0xac>
 8006d0e:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <CDC_Control_FS+0x1c>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006da5 	.word	0x08006da5
 8006d18:	08006da5 	.word	0x08006da5
 8006d1c:	08006da5 	.word	0x08006da5
 8006d20:	08006da5 	.word	0x08006da5
 8006d24:	08006da5 	.word	0x08006da5
 8006d28:	08006da5 	.word	0x08006da5
 8006d2c:	08006da5 	.word	0x08006da5
 8006d30:	08006da5 	.word	0x08006da5
 8006d34:	08006da5 	.word	0x08006da5
 8006d38:	08006da5 	.word	0x08006da5
 8006d3c:	08006da5 	.word	0x08006da5
 8006d40:	08006da5 	.word	0x08006da5
 8006d44:	08006da5 	.word	0x08006da5
 8006d48:	08006da5 	.word	0x08006da5
 8006d4c:	08006da5 	.word	0x08006da5
 8006d50:	08006da5 	.word	0x08006da5
 8006d54:	08006da5 	.word	0x08006da5
 8006d58:	08006da5 	.word	0x08006da5
 8006d5c:	08006da5 	.word	0x08006da5
 8006d60:	08006da5 	.word	0x08006da5
 8006d64:	08006da5 	.word	0x08006da5
 8006d68:	08006da5 	.word	0x08006da5
 8006d6c:	08006da5 	.word	0x08006da5
 8006d70:	08006da5 	.word	0x08006da5
 8006d74:	08006da5 	.word	0x08006da5
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	08006da5 	.word	0x08006da5
 8006d80:	08006da5 	.word	0x08006da5
 8006d84:	08006da5 	.word	0x08006da5
 8006d88:	08006da5 	.word	0x08006da5
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006da5 	.word	0x08006da5
 8006d94:	08006da5 	.word	0x08006da5
 8006d98:	08006da5 	.word	0x08006da5
 8006d9c:	08006da5 	.word	0x08006da5
 8006da0:	08006da5 	.word	0x08006da5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006da4:	bf00      	nop
  }

  return (USBD_OK);
 8006da6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	480b      	ldr	r0, [pc, #44]	; (8006df0 <CDC_Receive_FS+0x3c>)
 8006dc2:	f7fe fd70 	bl	80058a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006dc6:	480a      	ldr	r0, [pc, #40]	; (8006df0 <CDC_Receive_FS+0x3c>)
 8006dc8:	f7fe fdb6 	bl	8005938 <USBD_CDC_ReceivePacket>
  memcpy(rxBuf, Buf, *Len);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	4807      	ldr	r0, [pc, #28]	; (8006df4 <CDC_Receive_FS+0x40>)
 8006dd6:	f000 fcad 	bl	8007734 <memcpy>
  rxLen = *Len;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <CDC_Receive_FS+0x44>)
 8006de2:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8006de4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000604 	.word	0x20000604
 8006df4:	20000454 	.word	0x20000454
 8006df8:	20000430 	.word	0x20000430

08006dfc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <CDC_Transmit_FS+0x48>)
 8006e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e00b      	b.n	8006e3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4806      	ldr	r0, [pc, #24]	; (8006e44 <CDC_Transmit_FS+0x48>)
 8006e2a:	f7fe fd1e 	bl	800586a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e2e:	4805      	ldr	r0, [pc, #20]	; (8006e44 <CDC_Transmit_FS+0x48>)
 8006e30:	f7fe fd52 	bl	80058d8 <USBD_CDC_TransmitPacket>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000604 	.word	0x20000604

08006e48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <usb_printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
#include <stdarg.h>

void usb_printf(const char *format, ...)
{
 8006e6c:	b40f      	push	{r0, r1, r2, r3}
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;

    va_start(args, format);
 8006e74:	f107 0314 	add.w	r3, r7, #20
 8006e78:	603b      	str	r3, [r7, #0]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e82:	4809      	ldr	r0, [pc, #36]	; (8006ea8 <usb_printf+0x3c>)
 8006e84:	f000 fc98 	bl	80077b8 <vsniprintf>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	607b      	str	r3, [r7, #4]
    va_end(args);
    CDC_Transmit_FS(UserTxBufferFS, length);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	4619      	mov	r1, r3
 8006e92:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <usb_printf+0x3c>)
 8006e94:	f7ff ffb2 	bl	8006dfc <CDC_Transmit_FS>
}
 8006e98:	bf00      	nop
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ea2:	b004      	add	sp, #16
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20000cbc 	.word	0x20000cbc

08006eac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2212      	movs	r2, #18
 8006ebc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ebe:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	2000014c 	.word	0x2000014c

08006ed0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	6039      	str	r1, [r7, #0]
 8006eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ee2:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	20000160 	.word	0x20000160

08006ef4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4907      	ldr	r1, [pc, #28]	; (8006f28 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f0a:	4808      	ldr	r0, [pc, #32]	; (8006f2c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f0c:	f7ff fdc7 	bl	8006a9e <USBD_GetString>
 8006f10:	e004      	b.n	8006f1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4904      	ldr	r1, [pc, #16]	; (8006f28 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f16:	4805      	ldr	r0, [pc, #20]	; (8006f2c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f18:	f7ff fdc1 	bl	8006a9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200010a4 	.word	0x200010a4
 8006f2c:	0800803c 	.word	0x0800803c

08006f30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	6039      	str	r1, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	4904      	ldr	r1, [pc, #16]	; (8006f50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f40:	4804      	ldr	r0, [pc, #16]	; (8006f54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f42:	f7ff fdac 	bl	8006a9e <USBD_GetString>
  return USBD_StrDesc;
 8006f46:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	200010a4 	.word	0x200010a4
 8006f54:	08008054 	.word	0x08008054

08006f58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	6039      	str	r1, [r7, #0]
 8006f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	221a      	movs	r2, #26
 8006f68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f6a:	f000 f843 	bl	8006ff4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f6e:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000164 	.word	0x20000164

08006f7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	6039      	str	r1, [r7, #0]
 8006f86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d105      	bne.n	8006f9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	4907      	ldr	r1, [pc, #28]	; (8006fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f92:	4808      	ldr	r0, [pc, #32]	; (8006fb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f94:	f7ff fd83 	bl	8006a9e <USBD_GetString>
 8006f98:	e004      	b.n	8006fa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	4904      	ldr	r1, [pc, #16]	; (8006fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f9e:	4805      	ldr	r0, [pc, #20]	; (8006fb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fa0:	f7ff fd7d 	bl	8006a9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fa4:	4b02      	ldr	r3, [pc, #8]	; (8006fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	200010a4 	.word	0x200010a4
 8006fb4:	08008060 	.word	0x08008060

08006fb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	6039      	str	r1, [r7, #0]
 8006fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d105      	bne.n	8006fd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	4907      	ldr	r1, [pc, #28]	; (8006fec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fce:	4808      	ldr	r0, [pc, #32]	; (8006ff0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fd0:	f7ff fd65 	bl	8006a9e <USBD_GetString>
 8006fd4:	e004      	b.n	8006fe0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	4904      	ldr	r1, [pc, #16]	; (8006fec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fda:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fdc:	f7ff fd5f 	bl	8006a9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fe0:	4b02      	ldr	r3, [pc, #8]	; (8006fec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	200010a4 	.word	0x200010a4
 8006ff0:	0800806c 	.word	0x0800806c

08006ff4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <Get_SerialNum+0x44>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007000:	4b0e      	ldr	r3, [pc, #56]	; (800703c <Get_SerialNum+0x48>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007006:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <Get_SerialNum+0x4c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4413      	add	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800701a:	2208      	movs	r2, #8
 800701c:	4909      	ldr	r1, [pc, #36]	; (8007044 <Get_SerialNum+0x50>)
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 f814 	bl	800704c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007024:	2204      	movs	r2, #4
 8007026:	4908      	ldr	r1, [pc, #32]	; (8007048 <Get_SerialNum+0x54>)
 8007028:	68b8      	ldr	r0, [r7, #8]
 800702a:	f000 f80f 	bl	800704c <IntToUnicode>
  }
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	1fff7a10 	.word	0x1fff7a10
 800703c:	1fff7a14 	.word	0x1fff7a14
 8007040:	1fff7a18 	.word	0x1fff7a18
 8007044:	20000166 	.word	0x20000166
 8007048:	20000176 	.word	0x20000176

0800704c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800705e:	2300      	movs	r3, #0
 8007060:	75fb      	strb	r3, [r7, #23]
 8007062:	e027      	b.n	80070b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	0f1b      	lsrs	r3, r3, #28
 8007068:	2b09      	cmp	r3, #9
 800706a:	d80b      	bhi.n	8007084 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	0f1b      	lsrs	r3, r3, #28
 8007070:	b2da      	uxtb	r2, r3
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	4619      	mov	r1, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	440b      	add	r3, r1
 800707c:	3230      	adds	r2, #48	; 0x30
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	e00a      	b.n	800709a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	0f1b      	lsrs	r3, r3, #28
 8007088:	b2da      	uxtb	r2, r3
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4619      	mov	r1, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	440b      	add	r3, r1
 8007094:	3237      	adds	r2, #55	; 0x37
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	3301      	adds	r3, #1
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	4413      	add	r3, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	3301      	adds	r3, #1
 80070b2:	75fb      	strb	r3, [r7, #23]
 80070b4:	7dfa      	ldrb	r2, [r7, #23]
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d3d3      	bcc.n	8007064 <IntToUnicode+0x18>
  }
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
	...

080070cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	; 0x28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d4:	f107 0314 	add.w	r3, r7, #20
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	609a      	str	r2, [r3, #8]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ec:	d13a      	bne.n	8007164 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ee:	2300      	movs	r3, #0
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	4b1e      	ldr	r3, [pc, #120]	; (800716c <HAL_PCD_MspInit+0xa0>)
 80070f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f6:	4a1d      	ldr	r2, [pc, #116]	; (800716c <HAL_PCD_MspInit+0xa0>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	6313      	str	r3, [r2, #48]	; 0x30
 80070fe:	4b1b      	ldr	r3, [pc, #108]	; (800716c <HAL_PCD_MspInit+0xa0>)
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800710a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800710e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007110:	2302      	movs	r3, #2
 8007112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007118:	2303      	movs	r3, #3
 800711a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800711c:	230a      	movs	r3, #10
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	4619      	mov	r1, r3
 8007126:	4812      	ldr	r0, [pc, #72]	; (8007170 <HAL_PCD_MspInit+0xa4>)
 8007128:	f7fa f9ce 	bl	80014c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800712c:	4b0f      	ldr	r3, [pc, #60]	; (800716c <HAL_PCD_MspInit+0xa0>)
 800712e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007130:	4a0e      	ldr	r2, [pc, #56]	; (800716c <HAL_PCD_MspInit+0xa0>)
 8007132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007136:	6353      	str	r3, [r2, #52]	; 0x34
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_PCD_MspInit+0xa0>)
 800713e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007140:	4a0a      	ldr	r2, [pc, #40]	; (800716c <HAL_PCD_MspInit+0xa0>)
 8007142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007146:	6453      	str	r3, [r2, #68]	; 0x44
 8007148:	4b08      	ldr	r3, [pc, #32]	; (800716c <HAL_PCD_MspInit+0xa0>)
 800714a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	2043      	movs	r0, #67	; 0x43
 800715a:	f7fa f97e 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800715e:	2043      	movs	r0, #67	; 0x43
 8007160:	f7fa f997 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007164:	bf00      	nop
 8007166:	3728      	adds	r7, #40	; 0x28
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40023800 	.word	0x40023800
 8007170:	40020000 	.word	0x40020000

08007174 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7fe fca0 	bl	8005ad0 <USBD_LL_SetupStage>
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7fe fcda 	bl	8005b7a <USBD_LL_DataOutStage>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	3348      	adds	r3, #72	; 0x48
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	4619      	mov	r1, r3
 80071f6:	f7fe fd23 	bl	8005c40 <USBD_LL_DataInStage>
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fe37 	bl	8005e84 <USBD_LL_SOF>
}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007226:	2301      	movs	r3, #1
 8007228:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d001      	beq.n	8007236 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007232:	f7f9 fe7d 	bl	8000f30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800723c:	7bfa      	ldrb	r2, [r7, #15]
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fde1 	bl	8005e08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe fd8d 	bl	8005d6c <USBD_LL_Reset>
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fddc 	bl	8005e28 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007282:	f043 0301 	orr.w	r3, r3, #1
 8007286:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007290:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <HAL_PCD_SuspendCallback+0x48>)
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	4a03      	ldr	r2, [pc, #12]	; (80072a4 <HAL_PCD_SuspendCallback+0x48>)
 8007296:	f043 0306 	orr.w	r3, r3, #6
 800729a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	e000ed00 	.word	0xe000ed00

080072a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fdcc 	bl	8005e54 <USBD_LL_Resume>
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fe1a 	bl	8005f14 <USBD_LL_IsoOUTIncomplete>
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072fa:	78fa      	ldrb	r2, [r7, #3]
 80072fc:	4611      	mov	r1, r2
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fde2 	bl	8005ec8 <USBD_LL_IsoINIncomplete>
}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fe20 	bl	8005f60 <USBD_LL_DevConnected>
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fe1d 	bl	8005f76 <USBD_LL_DevDisconnected>
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d13c      	bne.n	80073ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007354:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <USBD_LL_Init+0x94>)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <USBD_LL_Init+0x94>)
 8007360:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007364:	4b1c      	ldr	r3, [pc, #112]	; (80073d8 <USBD_LL_Init+0x94>)
 8007366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800736a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800736c:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <USBD_LL_Init+0x94>)
 800736e:	2204      	movs	r2, #4
 8007370:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007372:	4b19      	ldr	r3, [pc, #100]	; (80073d8 <USBD_LL_Init+0x94>)
 8007374:	2202      	movs	r2, #2
 8007376:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007378:	4b17      	ldr	r3, [pc, #92]	; (80073d8 <USBD_LL_Init+0x94>)
 800737a:	2200      	movs	r2, #0
 800737c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800737e:	4b16      	ldr	r3, [pc, #88]	; (80073d8 <USBD_LL_Init+0x94>)
 8007380:	2202      	movs	r2, #2
 8007382:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007384:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <USBD_LL_Init+0x94>)
 8007386:	2200      	movs	r2, #0
 8007388:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <USBD_LL_Init+0x94>)
 800738c:	2200      	movs	r2, #0
 800738e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007390:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <USBD_LL_Init+0x94>)
 8007392:	2200      	movs	r2, #0
 8007394:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007396:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <USBD_LL_Init+0x94>)
 8007398:	2200      	movs	r2, #0
 800739a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800739c:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <USBD_LL_Init+0x94>)
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80073a2:	480d      	ldr	r0, [pc, #52]	; (80073d8 <USBD_LL_Init+0x94>)
 80073a4:	f7fa fa5f 	bl	8001866 <HAL_PCD_Init>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80073ae:	f7f9 fdbf 	bl	8000f30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	4808      	ldr	r0, [pc, #32]	; (80073d8 <USBD_LL_Init+0x94>)
 80073b6:	f7fb fbbc 	bl	8002b32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80073ba:	2240      	movs	r2, #64	; 0x40
 80073bc:	2100      	movs	r1, #0
 80073be:	4806      	ldr	r0, [pc, #24]	; (80073d8 <USBD_LL_Init+0x94>)
 80073c0:	f7fb fb70 	bl	8002aa4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80073c4:	2280      	movs	r2, #128	; 0x80
 80073c6:	2101      	movs	r1, #1
 80073c8:	4803      	ldr	r0, [pc, #12]	; (80073d8 <USBD_LL_Init+0x94>)
 80073ca:	f7fb fb6b 	bl	8002aa4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	200012a4 	.word	0x200012a4

080073dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fa fb54 	bl	8001aa0 <HAL_PCD_Start>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f942 	bl	8007688 <USBD_Get_USB_Status>
 8007404:	4603      	mov	r3, r0
 8007406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007408:	7bbb      	ldrb	r3, [r7, #14]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	4608      	mov	r0, r1
 800741c:	4611      	mov	r1, r2
 800741e:	461a      	mov	r2, r3
 8007420:	4603      	mov	r3, r0
 8007422:	70fb      	strb	r3, [r7, #3]
 8007424:	460b      	mov	r3, r1
 8007426:	70bb      	strb	r3, [r7, #2]
 8007428:	4613      	mov	r3, r2
 800742a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800743a:	78bb      	ldrb	r3, [r7, #2]
 800743c:	883a      	ldrh	r2, [r7, #0]
 800743e:	78f9      	ldrb	r1, [r7, #3]
 8007440:	f7fa ff38 	bl	80022b4 <HAL_PCD_EP_Open>
 8007444:	4603      	mov	r3, r0
 8007446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f91c 	bl	8007688 <USBD_Get_USB_Status>
 8007450:	4603      	mov	r3, r0
 8007452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007454:	7bbb      	ldrb	r3, [r7, #14]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f7fa ff81 	bl	8002384 <HAL_PCD_EP_Close>
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	4618      	mov	r0, r3
 800748a:	f000 f8fd 	bl	8007688 <USBD_Get_USB_Status>
 800748e:	4603      	mov	r3, r0
 8007490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007492:	7bbb      	ldrb	r3, [r7, #14]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	4611      	mov	r1, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fb f859 	bl	8002572 <HAL_PCD_EP_SetStall>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 f8de 	bl	8007688 <USBD_Get_USB_Status>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074f4:	78fa      	ldrb	r2, [r7, #3]
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fb f89e 	bl	800263a <HAL_PCD_EP_ClrStall>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	4618      	mov	r0, r3
 8007506:	f000 f8bf 	bl	8007688 <USBD_Get_USB_Status>
 800750a:	4603      	mov	r3, r0
 800750c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800750e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800752a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800752c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007530:	2b00      	cmp	r3, #0
 8007532:	da0b      	bge.n	800754c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	333e      	adds	r3, #62	; 0x3e
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	e00b      	b.n	8007564 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007552:	68f9      	ldr	r1, [r7, #12]
 8007554:	4613      	mov	r3, r2
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007562:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800758a:	78fa      	ldrb	r2, [r7, #3]
 800758c:	4611      	mov	r1, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f7fa fe6b 	bl	800226a <HAL_PCD_SetAddress>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	4618      	mov	r0, r3
 800759c:	f000 f874 	bl	8007688 <USBD_Get_USB_Status>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b086      	sub	sp, #24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	460b      	mov	r3, r1
 80075bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075cc:	7af9      	ldrb	r1, [r7, #11]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	f7fa ff84 	bl	80024de <HAL_PCD_EP_Transmit>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 f853 	bl	8007688 <USBD_Get_USB_Status>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	460b      	mov	r3, r1
 80075fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800760e:	7af9      	ldrb	r1, [r7, #11]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	f7fa ff00 	bl	8002418 <HAL_PCD_EP_Receive>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f832 	bl	8007688 <USBD_Get_USB_Status>
 8007624:	4603      	mov	r3, r0
 8007626:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007628:	7dbb      	ldrb	r3, [r7, #22]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7fa ff30 	bl	80024ae <HAL_PCD_EP_GetRxCount>
 800764e:	4603      	mov	r3, r0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007660:	4b03      	ldr	r3, [pc, #12]	; (8007670 <USBD_static_malloc+0x18>)
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000208 	.word	0x20000208

08007674 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]

}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	2b03      	cmp	r3, #3
 800769a:	d817      	bhi.n	80076cc <USBD_Get_USB_Status+0x44>
 800769c:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <USBD_Get_USB_Status+0x1c>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	080076b5 	.word	0x080076b5
 80076a8:	080076bb 	.word	0x080076bb
 80076ac:	080076c1 	.word	0x080076c1
 80076b0:	080076c7 	.word	0x080076c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73fb      	strb	r3, [r7, #15]
    break;
 80076b8:	e00b      	b.n	80076d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076ba:	2303      	movs	r3, #3
 80076bc:	73fb      	strb	r3, [r7, #15]
    break;
 80076be:	e008      	b.n	80076d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
    break;
 80076c4:	e005      	b.n	80076d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076c6:	2303      	movs	r3, #3
 80076c8:	73fb      	strb	r3, [r7, #15]
    break;
 80076ca:	e002      	b.n	80076d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	73fb      	strb	r3, [r7, #15]
    break;
 80076d0:	bf00      	nop
  }
  return usb_status;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <__errno>:
 80076e0:	4b01      	ldr	r3, [pc, #4]	; (80076e8 <__errno+0x8>)
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000180 	.word	0x20000180

080076ec <__libc_init_array>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	4d0d      	ldr	r5, [pc, #52]	; (8007724 <__libc_init_array+0x38>)
 80076f0:	4c0d      	ldr	r4, [pc, #52]	; (8007728 <__libc_init_array+0x3c>)
 80076f2:	1b64      	subs	r4, r4, r5
 80076f4:	10a4      	asrs	r4, r4, #2
 80076f6:	2600      	movs	r6, #0
 80076f8:	42a6      	cmp	r6, r4
 80076fa:	d109      	bne.n	8007710 <__libc_init_array+0x24>
 80076fc:	4d0b      	ldr	r5, [pc, #44]	; (800772c <__libc_init_array+0x40>)
 80076fe:	4c0c      	ldr	r4, [pc, #48]	; (8007730 <__libc_init_array+0x44>)
 8007700:	f000 fc68 	bl	8007fd4 <_init>
 8007704:	1b64      	subs	r4, r4, r5
 8007706:	10a4      	asrs	r4, r4, #2
 8007708:	2600      	movs	r6, #0
 800770a:	42a6      	cmp	r6, r4
 800770c:	d105      	bne.n	800771a <__libc_init_array+0x2e>
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	f855 3b04 	ldr.w	r3, [r5], #4
 8007714:	4798      	blx	r3
 8007716:	3601      	adds	r6, #1
 8007718:	e7ee      	b.n	80076f8 <__libc_init_array+0xc>
 800771a:	f855 3b04 	ldr.w	r3, [r5], #4
 800771e:	4798      	blx	r3
 8007720:	3601      	adds	r6, #1
 8007722:	e7f2      	b.n	800770a <__libc_init_array+0x1e>
 8007724:	080080d0 	.word	0x080080d0
 8007728:	080080d0 	.word	0x080080d0
 800772c:	080080d0 	.word	0x080080d0
 8007730:	080080d4 	.word	0x080080d4

08007734 <memcpy>:
 8007734:	440a      	add	r2, r1
 8007736:	4291      	cmp	r1, r2
 8007738:	f100 33ff 	add.w	r3, r0, #4294967295
 800773c:	d100      	bne.n	8007740 <memcpy+0xc>
 800773e:	4770      	bx	lr
 8007740:	b510      	push	{r4, lr}
 8007742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800774a:	4291      	cmp	r1, r2
 800774c:	d1f9      	bne.n	8007742 <memcpy+0xe>
 800774e:	bd10      	pop	{r4, pc}

08007750 <memset>:
 8007750:	4402      	add	r2, r0
 8007752:	4603      	mov	r3, r0
 8007754:	4293      	cmp	r3, r2
 8007756:	d100      	bne.n	800775a <memset+0xa>
 8007758:	4770      	bx	lr
 800775a:	f803 1b01 	strb.w	r1, [r3], #1
 800775e:	e7f9      	b.n	8007754 <memset+0x4>

08007760 <_vsniprintf_r>:
 8007760:	b530      	push	{r4, r5, lr}
 8007762:	1e14      	subs	r4, r2, #0
 8007764:	4605      	mov	r5, r0
 8007766:	b09b      	sub	sp, #108	; 0x6c
 8007768:	4618      	mov	r0, r3
 800776a:	da05      	bge.n	8007778 <_vsniprintf_r+0x18>
 800776c:	238b      	movs	r3, #139	; 0x8b
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	b01b      	add	sp, #108	; 0x6c
 8007776:	bd30      	pop	{r4, r5, pc}
 8007778:	f44f 7302 	mov.w	r3, #520	; 0x208
 800777c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007780:	bf14      	ite	ne
 8007782:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007786:	4623      	moveq	r3, r4
 8007788:	9302      	str	r3, [sp, #8]
 800778a:	9305      	str	r3, [sp, #20]
 800778c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007790:	9100      	str	r1, [sp, #0]
 8007792:	9104      	str	r1, [sp, #16]
 8007794:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007798:	4602      	mov	r2, r0
 800779a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800779c:	4669      	mov	r1, sp
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f874 	bl	800788c <_svfiprintf_r>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	bfbc      	itt	lt
 80077a8:	238b      	movlt	r3, #139	; 0x8b
 80077aa:	602b      	strlt	r3, [r5, #0]
 80077ac:	2c00      	cmp	r4, #0
 80077ae:	d0e1      	beq.n	8007774 <_vsniprintf_r+0x14>
 80077b0:	9b00      	ldr	r3, [sp, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	e7dd      	b.n	8007774 <_vsniprintf_r+0x14>

080077b8 <vsniprintf>:
 80077b8:	b507      	push	{r0, r1, r2, lr}
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	460a      	mov	r2, r1
 80077c0:	4601      	mov	r1, r0
 80077c2:	4803      	ldr	r0, [pc, #12]	; (80077d0 <vsniprintf+0x18>)
 80077c4:	6800      	ldr	r0, [r0, #0]
 80077c6:	f7ff ffcb 	bl	8007760 <_vsniprintf_r>
 80077ca:	b003      	add	sp, #12
 80077cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80077d0:	20000180 	.word	0x20000180

080077d4 <__ssputs_r>:
 80077d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	688e      	ldr	r6, [r1, #8]
 80077da:	429e      	cmp	r6, r3
 80077dc:	4682      	mov	sl, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	4690      	mov	r8, r2
 80077e2:	461f      	mov	r7, r3
 80077e4:	d838      	bhi.n	8007858 <__ssputs_r+0x84>
 80077e6:	898a      	ldrh	r2, [r1, #12]
 80077e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077ec:	d032      	beq.n	8007854 <__ssputs_r+0x80>
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	6909      	ldr	r1, [r1, #16]
 80077f2:	eba5 0901 	sub.w	r9, r5, r1
 80077f6:	6965      	ldr	r5, [r4, #20]
 80077f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007800:	3301      	adds	r3, #1
 8007802:	444b      	add	r3, r9
 8007804:	106d      	asrs	r5, r5, #1
 8007806:	429d      	cmp	r5, r3
 8007808:	bf38      	it	cc
 800780a:	461d      	movcc	r5, r3
 800780c:	0553      	lsls	r3, r2, #21
 800780e:	d531      	bpl.n	8007874 <__ssputs_r+0xa0>
 8007810:	4629      	mov	r1, r5
 8007812:	f000 fb39 	bl	8007e88 <_malloc_r>
 8007816:	4606      	mov	r6, r0
 8007818:	b950      	cbnz	r0, 8007830 <__ssputs_r+0x5c>
 800781a:	230c      	movs	r3, #12
 800781c:	f8ca 3000 	str.w	r3, [sl]
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007830:	6921      	ldr	r1, [r4, #16]
 8007832:	464a      	mov	r2, r9
 8007834:	f7ff ff7e 	bl	8007734 <memcpy>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800783e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007842:	81a3      	strh	r3, [r4, #12]
 8007844:	6126      	str	r6, [r4, #16]
 8007846:	6165      	str	r5, [r4, #20]
 8007848:	444e      	add	r6, r9
 800784a:	eba5 0509 	sub.w	r5, r5, r9
 800784e:	6026      	str	r6, [r4, #0]
 8007850:	60a5      	str	r5, [r4, #8]
 8007852:	463e      	mov	r6, r7
 8007854:	42be      	cmp	r6, r7
 8007856:	d900      	bls.n	800785a <__ssputs_r+0x86>
 8007858:	463e      	mov	r6, r7
 800785a:	4632      	mov	r2, r6
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	4641      	mov	r1, r8
 8007860:	f000 faa8 	bl	8007db4 <memmove>
 8007864:	68a3      	ldr	r3, [r4, #8]
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	1b9b      	subs	r3, r3, r6
 800786a:	4432      	add	r2, r6
 800786c:	60a3      	str	r3, [r4, #8]
 800786e:	6022      	str	r2, [r4, #0]
 8007870:	2000      	movs	r0, #0
 8007872:	e7db      	b.n	800782c <__ssputs_r+0x58>
 8007874:	462a      	mov	r2, r5
 8007876:	f000 fb61 	bl	8007f3c <_realloc_r>
 800787a:	4606      	mov	r6, r0
 800787c:	2800      	cmp	r0, #0
 800787e:	d1e1      	bne.n	8007844 <__ssputs_r+0x70>
 8007880:	6921      	ldr	r1, [r4, #16]
 8007882:	4650      	mov	r0, sl
 8007884:	f000 fab0 	bl	8007de8 <_free_r>
 8007888:	e7c7      	b.n	800781a <__ssputs_r+0x46>
	...

0800788c <_svfiprintf_r>:
 800788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007890:	4698      	mov	r8, r3
 8007892:	898b      	ldrh	r3, [r1, #12]
 8007894:	061b      	lsls	r3, r3, #24
 8007896:	b09d      	sub	sp, #116	; 0x74
 8007898:	4607      	mov	r7, r0
 800789a:	460d      	mov	r5, r1
 800789c:	4614      	mov	r4, r2
 800789e:	d50e      	bpl.n	80078be <_svfiprintf_r+0x32>
 80078a0:	690b      	ldr	r3, [r1, #16]
 80078a2:	b963      	cbnz	r3, 80078be <_svfiprintf_r+0x32>
 80078a4:	2140      	movs	r1, #64	; 0x40
 80078a6:	f000 faef 	bl	8007e88 <_malloc_r>
 80078aa:	6028      	str	r0, [r5, #0]
 80078ac:	6128      	str	r0, [r5, #16]
 80078ae:	b920      	cbnz	r0, 80078ba <_svfiprintf_r+0x2e>
 80078b0:	230c      	movs	r3, #12
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	e0d1      	b.n	8007a5e <_svfiprintf_r+0x1d2>
 80078ba:	2340      	movs	r3, #64	; 0x40
 80078bc:	616b      	str	r3, [r5, #20]
 80078be:	2300      	movs	r3, #0
 80078c0:	9309      	str	r3, [sp, #36]	; 0x24
 80078c2:	2320      	movs	r3, #32
 80078c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078cc:	2330      	movs	r3, #48	; 0x30
 80078ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a78 <_svfiprintf_r+0x1ec>
 80078d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078d6:	f04f 0901 	mov.w	r9, #1
 80078da:	4623      	mov	r3, r4
 80078dc:	469a      	mov	sl, r3
 80078de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e2:	b10a      	cbz	r2, 80078e8 <_svfiprintf_r+0x5c>
 80078e4:	2a25      	cmp	r2, #37	; 0x25
 80078e6:	d1f9      	bne.n	80078dc <_svfiprintf_r+0x50>
 80078e8:	ebba 0b04 	subs.w	fp, sl, r4
 80078ec:	d00b      	beq.n	8007906 <_svfiprintf_r+0x7a>
 80078ee:	465b      	mov	r3, fp
 80078f0:	4622      	mov	r2, r4
 80078f2:	4629      	mov	r1, r5
 80078f4:	4638      	mov	r0, r7
 80078f6:	f7ff ff6d 	bl	80077d4 <__ssputs_r>
 80078fa:	3001      	adds	r0, #1
 80078fc:	f000 80aa 	beq.w	8007a54 <_svfiprintf_r+0x1c8>
 8007900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007902:	445a      	add	r2, fp
 8007904:	9209      	str	r2, [sp, #36]	; 0x24
 8007906:	f89a 3000 	ldrb.w	r3, [sl]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80a2 	beq.w	8007a54 <_svfiprintf_r+0x1c8>
 8007910:	2300      	movs	r3, #0
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800791a:	f10a 0a01 	add.w	sl, sl, #1
 800791e:	9304      	str	r3, [sp, #16]
 8007920:	9307      	str	r3, [sp, #28]
 8007922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007926:	931a      	str	r3, [sp, #104]	; 0x68
 8007928:	4654      	mov	r4, sl
 800792a:	2205      	movs	r2, #5
 800792c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007930:	4851      	ldr	r0, [pc, #324]	; (8007a78 <_svfiprintf_r+0x1ec>)
 8007932:	f7f8 fc65 	bl	8000200 <memchr>
 8007936:	9a04      	ldr	r2, [sp, #16]
 8007938:	b9d8      	cbnz	r0, 8007972 <_svfiprintf_r+0xe6>
 800793a:	06d0      	lsls	r0, r2, #27
 800793c:	bf44      	itt	mi
 800793e:	2320      	movmi	r3, #32
 8007940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007944:	0711      	lsls	r1, r2, #28
 8007946:	bf44      	itt	mi
 8007948:	232b      	movmi	r3, #43	; 0x2b
 800794a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794e:	f89a 3000 	ldrb.w	r3, [sl]
 8007952:	2b2a      	cmp	r3, #42	; 0x2a
 8007954:	d015      	beq.n	8007982 <_svfiprintf_r+0xf6>
 8007956:	9a07      	ldr	r2, [sp, #28]
 8007958:	4654      	mov	r4, sl
 800795a:	2000      	movs	r0, #0
 800795c:	f04f 0c0a 	mov.w	ip, #10
 8007960:	4621      	mov	r1, r4
 8007962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007966:	3b30      	subs	r3, #48	; 0x30
 8007968:	2b09      	cmp	r3, #9
 800796a:	d94e      	bls.n	8007a0a <_svfiprintf_r+0x17e>
 800796c:	b1b0      	cbz	r0, 800799c <_svfiprintf_r+0x110>
 800796e:	9207      	str	r2, [sp, #28]
 8007970:	e014      	b.n	800799c <_svfiprintf_r+0x110>
 8007972:	eba0 0308 	sub.w	r3, r0, r8
 8007976:	fa09 f303 	lsl.w	r3, r9, r3
 800797a:	4313      	orrs	r3, r2
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	46a2      	mov	sl, r4
 8007980:	e7d2      	b.n	8007928 <_svfiprintf_r+0x9c>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	1d19      	adds	r1, r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9103      	str	r1, [sp, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	bfbb      	ittet	lt
 800798e:	425b      	neglt	r3, r3
 8007990:	f042 0202 	orrlt.w	r2, r2, #2
 8007994:	9307      	strge	r3, [sp, #28]
 8007996:	9307      	strlt	r3, [sp, #28]
 8007998:	bfb8      	it	lt
 800799a:	9204      	strlt	r2, [sp, #16]
 800799c:	7823      	ldrb	r3, [r4, #0]
 800799e:	2b2e      	cmp	r3, #46	; 0x2e
 80079a0:	d10c      	bne.n	80079bc <_svfiprintf_r+0x130>
 80079a2:	7863      	ldrb	r3, [r4, #1]
 80079a4:	2b2a      	cmp	r3, #42	; 0x2a
 80079a6:	d135      	bne.n	8007a14 <_svfiprintf_r+0x188>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d1a      	adds	r2, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9203      	str	r2, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfb8      	it	lt
 80079b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079b8:	3402      	adds	r4, #2
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a88 <_svfiprintf_r+0x1fc>
 80079c0:	7821      	ldrb	r1, [r4, #0]
 80079c2:	2203      	movs	r2, #3
 80079c4:	4650      	mov	r0, sl
 80079c6:	f7f8 fc1b 	bl	8000200 <memchr>
 80079ca:	b140      	cbz	r0, 80079de <_svfiprintf_r+0x152>
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	eba0 000a 	sub.w	r0, r0, sl
 80079d2:	fa03 f000 	lsl.w	r0, r3, r0
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	4303      	orrs	r3, r0
 80079da:	3401      	adds	r4, #1
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e2:	4826      	ldr	r0, [pc, #152]	; (8007a7c <_svfiprintf_r+0x1f0>)
 80079e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079e8:	2206      	movs	r2, #6
 80079ea:	f7f8 fc09 	bl	8000200 <memchr>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d038      	beq.n	8007a64 <_svfiprintf_r+0x1d8>
 80079f2:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <_svfiprintf_r+0x1f4>)
 80079f4:	bb1b      	cbnz	r3, 8007a3e <_svfiprintf_r+0x1b2>
 80079f6:	9b03      	ldr	r3, [sp, #12]
 80079f8:	3307      	adds	r3, #7
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	3308      	adds	r3, #8
 8007a00:	9303      	str	r3, [sp, #12]
 8007a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a04:	4433      	add	r3, r6
 8007a06:	9309      	str	r3, [sp, #36]	; 0x24
 8007a08:	e767      	b.n	80078da <_svfiprintf_r+0x4e>
 8007a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2001      	movs	r0, #1
 8007a12:	e7a5      	b.n	8007960 <_svfiprintf_r+0xd4>
 8007a14:	2300      	movs	r3, #0
 8007a16:	3401      	adds	r4, #1
 8007a18:	9305      	str	r3, [sp, #20]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f04f 0c0a 	mov.w	ip, #10
 8007a20:	4620      	mov	r0, r4
 8007a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a26:	3a30      	subs	r2, #48	; 0x30
 8007a28:	2a09      	cmp	r2, #9
 8007a2a:	d903      	bls.n	8007a34 <_svfiprintf_r+0x1a8>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0c5      	beq.n	80079bc <_svfiprintf_r+0x130>
 8007a30:	9105      	str	r1, [sp, #20]
 8007a32:	e7c3      	b.n	80079bc <_svfiprintf_r+0x130>
 8007a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a38:	4604      	mov	r4, r0
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e7f0      	b.n	8007a20 <_svfiprintf_r+0x194>
 8007a3e:	ab03      	add	r3, sp, #12
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	462a      	mov	r2, r5
 8007a44:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <_svfiprintf_r+0x1f8>)
 8007a46:	a904      	add	r1, sp, #16
 8007a48:	4638      	mov	r0, r7
 8007a4a:	f3af 8000 	nop.w
 8007a4e:	1c42      	adds	r2, r0, #1
 8007a50:	4606      	mov	r6, r0
 8007a52:	d1d6      	bne.n	8007a02 <_svfiprintf_r+0x176>
 8007a54:	89ab      	ldrh	r3, [r5, #12]
 8007a56:	065b      	lsls	r3, r3, #25
 8007a58:	f53f af2c 	bmi.w	80078b4 <_svfiprintf_r+0x28>
 8007a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a5e:	b01d      	add	sp, #116	; 0x74
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	ab03      	add	r3, sp, #12
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	462a      	mov	r2, r5
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <_svfiprintf_r+0x1f8>)
 8007a6c:	a904      	add	r1, sp, #16
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f000 f87a 	bl	8007b68 <_printf_i>
 8007a74:	e7eb      	b.n	8007a4e <_svfiprintf_r+0x1c2>
 8007a76:	bf00      	nop
 8007a78:	08008094 	.word	0x08008094
 8007a7c:	0800809e 	.word	0x0800809e
 8007a80:	00000000 	.word	0x00000000
 8007a84:	080077d5 	.word	0x080077d5
 8007a88:	0800809a 	.word	0x0800809a

08007a8c <_printf_common>:
 8007a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	4616      	mov	r6, r2
 8007a92:	4699      	mov	r9, r3
 8007a94:	688a      	ldr	r2, [r1, #8]
 8007a96:	690b      	ldr	r3, [r1, #16]
 8007a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	bfb8      	it	lt
 8007aa0:	4613      	movlt	r3, r2
 8007aa2:	6033      	str	r3, [r6, #0]
 8007aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	b10a      	cbz	r2, 8007ab2 <_printf_common+0x26>
 8007aae:	3301      	adds	r3, #1
 8007ab0:	6033      	str	r3, [r6, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	0699      	lsls	r1, r3, #26
 8007ab6:	bf42      	ittt	mi
 8007ab8:	6833      	ldrmi	r3, [r6, #0]
 8007aba:	3302      	addmi	r3, #2
 8007abc:	6033      	strmi	r3, [r6, #0]
 8007abe:	6825      	ldr	r5, [r4, #0]
 8007ac0:	f015 0506 	ands.w	r5, r5, #6
 8007ac4:	d106      	bne.n	8007ad4 <_printf_common+0x48>
 8007ac6:	f104 0a19 	add.w	sl, r4, #25
 8007aca:	68e3      	ldr	r3, [r4, #12]
 8007acc:	6832      	ldr	r2, [r6, #0]
 8007ace:	1a9b      	subs	r3, r3, r2
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	dc26      	bgt.n	8007b22 <_printf_common+0x96>
 8007ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ad8:	1e13      	subs	r3, r2, #0
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	bf18      	it	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	0692      	lsls	r2, r2, #26
 8007ae2:	d42b      	bmi.n	8007b3c <_printf_common+0xb0>
 8007ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ae8:	4649      	mov	r1, r9
 8007aea:	4638      	mov	r0, r7
 8007aec:	47c0      	blx	r8
 8007aee:	3001      	adds	r0, #1
 8007af0:	d01e      	beq.n	8007b30 <_printf_common+0xa4>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	68e5      	ldr	r5, [r4, #12]
 8007af6:	6832      	ldr	r2, [r6, #0]
 8007af8:	f003 0306 	and.w	r3, r3, #6
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	bf08      	it	eq
 8007b00:	1aad      	subeq	r5, r5, r2
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	6922      	ldr	r2, [r4, #16]
 8007b06:	bf0c      	ite	eq
 8007b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b0c:	2500      	movne	r5, #0
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	bfc4      	itt	gt
 8007b12:	1a9b      	subgt	r3, r3, r2
 8007b14:	18ed      	addgt	r5, r5, r3
 8007b16:	2600      	movs	r6, #0
 8007b18:	341a      	adds	r4, #26
 8007b1a:	42b5      	cmp	r5, r6
 8007b1c:	d11a      	bne.n	8007b54 <_printf_common+0xc8>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e008      	b.n	8007b34 <_printf_common+0xa8>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4652      	mov	r2, sl
 8007b26:	4649      	mov	r1, r9
 8007b28:	4638      	mov	r0, r7
 8007b2a:	47c0      	blx	r8
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d103      	bne.n	8007b38 <_printf_common+0xac>
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b38:	3501      	adds	r5, #1
 8007b3a:	e7c6      	b.n	8007aca <_printf_common+0x3e>
 8007b3c:	18e1      	adds	r1, r4, r3
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	2030      	movs	r0, #48	; 0x30
 8007b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b46:	4422      	add	r2, r4
 8007b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b50:	3302      	adds	r3, #2
 8007b52:	e7c7      	b.n	8007ae4 <_printf_common+0x58>
 8007b54:	2301      	movs	r3, #1
 8007b56:	4622      	mov	r2, r4
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d0e6      	beq.n	8007b30 <_printf_common+0xa4>
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7d9      	b.n	8007b1a <_printf_common+0x8e>
	...

08007b68 <_printf_i>:
 8007b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4691      	mov	r9, r2
 8007b70:	7e27      	ldrb	r7, [r4, #24]
 8007b72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b74:	2f78      	cmp	r7, #120	; 0x78
 8007b76:	4680      	mov	r8, r0
 8007b78:	469a      	mov	sl, r3
 8007b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b7e:	d807      	bhi.n	8007b90 <_printf_i+0x28>
 8007b80:	2f62      	cmp	r7, #98	; 0x62
 8007b82:	d80a      	bhi.n	8007b9a <_printf_i+0x32>
 8007b84:	2f00      	cmp	r7, #0
 8007b86:	f000 80d8 	beq.w	8007d3a <_printf_i+0x1d2>
 8007b8a:	2f58      	cmp	r7, #88	; 0x58
 8007b8c:	f000 80a3 	beq.w	8007cd6 <_printf_i+0x16e>
 8007b90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b98:	e03a      	b.n	8007c10 <_printf_i+0xa8>
 8007b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d8f6      	bhi.n	8007b90 <_printf_i+0x28>
 8007ba2:	a001      	add	r0, pc, #4	; (adr r0, 8007ba8 <_printf_i+0x40>)
 8007ba4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ba8:	08007c01 	.word	0x08007c01
 8007bac:	08007c15 	.word	0x08007c15
 8007bb0:	08007b91 	.word	0x08007b91
 8007bb4:	08007b91 	.word	0x08007b91
 8007bb8:	08007b91 	.word	0x08007b91
 8007bbc:	08007b91 	.word	0x08007b91
 8007bc0:	08007c15 	.word	0x08007c15
 8007bc4:	08007b91 	.word	0x08007b91
 8007bc8:	08007b91 	.word	0x08007b91
 8007bcc:	08007b91 	.word	0x08007b91
 8007bd0:	08007b91 	.word	0x08007b91
 8007bd4:	08007d21 	.word	0x08007d21
 8007bd8:	08007c45 	.word	0x08007c45
 8007bdc:	08007d03 	.word	0x08007d03
 8007be0:	08007b91 	.word	0x08007b91
 8007be4:	08007b91 	.word	0x08007b91
 8007be8:	08007d43 	.word	0x08007d43
 8007bec:	08007b91 	.word	0x08007b91
 8007bf0:	08007c45 	.word	0x08007c45
 8007bf4:	08007b91 	.word	0x08007b91
 8007bf8:	08007b91 	.word	0x08007b91
 8007bfc:	08007d0b 	.word	0x08007d0b
 8007c00:	680b      	ldr	r3, [r1, #0]
 8007c02:	1d1a      	adds	r2, r3, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	600a      	str	r2, [r1, #0]
 8007c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0a3      	b.n	8007d5c <_printf_i+0x1f4>
 8007c14:	6825      	ldr	r5, [r4, #0]
 8007c16:	6808      	ldr	r0, [r1, #0]
 8007c18:	062e      	lsls	r6, r5, #24
 8007c1a:	f100 0304 	add.w	r3, r0, #4
 8007c1e:	d50a      	bpl.n	8007c36 <_printf_i+0xce>
 8007c20:	6805      	ldr	r5, [r0, #0]
 8007c22:	600b      	str	r3, [r1, #0]
 8007c24:	2d00      	cmp	r5, #0
 8007c26:	da03      	bge.n	8007c30 <_printf_i+0xc8>
 8007c28:	232d      	movs	r3, #45	; 0x2d
 8007c2a:	426d      	negs	r5, r5
 8007c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c30:	485e      	ldr	r0, [pc, #376]	; (8007dac <_printf_i+0x244>)
 8007c32:	230a      	movs	r3, #10
 8007c34:	e019      	b.n	8007c6a <_printf_i+0x102>
 8007c36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c3a:	6805      	ldr	r5, [r0, #0]
 8007c3c:	600b      	str	r3, [r1, #0]
 8007c3e:	bf18      	it	ne
 8007c40:	b22d      	sxthne	r5, r5
 8007c42:	e7ef      	b.n	8007c24 <_printf_i+0xbc>
 8007c44:	680b      	ldr	r3, [r1, #0]
 8007c46:	6825      	ldr	r5, [r4, #0]
 8007c48:	1d18      	adds	r0, r3, #4
 8007c4a:	6008      	str	r0, [r1, #0]
 8007c4c:	0628      	lsls	r0, r5, #24
 8007c4e:	d501      	bpl.n	8007c54 <_printf_i+0xec>
 8007c50:	681d      	ldr	r5, [r3, #0]
 8007c52:	e002      	b.n	8007c5a <_printf_i+0xf2>
 8007c54:	0669      	lsls	r1, r5, #25
 8007c56:	d5fb      	bpl.n	8007c50 <_printf_i+0xe8>
 8007c58:	881d      	ldrh	r5, [r3, #0]
 8007c5a:	4854      	ldr	r0, [pc, #336]	; (8007dac <_printf_i+0x244>)
 8007c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c5e:	bf0c      	ite	eq
 8007c60:	2308      	moveq	r3, #8
 8007c62:	230a      	movne	r3, #10
 8007c64:	2100      	movs	r1, #0
 8007c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c6a:	6866      	ldr	r6, [r4, #4]
 8007c6c:	60a6      	str	r6, [r4, #8]
 8007c6e:	2e00      	cmp	r6, #0
 8007c70:	bfa2      	ittt	ge
 8007c72:	6821      	ldrge	r1, [r4, #0]
 8007c74:	f021 0104 	bicge.w	r1, r1, #4
 8007c78:	6021      	strge	r1, [r4, #0]
 8007c7a:	b90d      	cbnz	r5, 8007c80 <_printf_i+0x118>
 8007c7c:	2e00      	cmp	r6, #0
 8007c7e:	d04d      	beq.n	8007d1c <_printf_i+0x1b4>
 8007c80:	4616      	mov	r6, r2
 8007c82:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c86:	fb03 5711 	mls	r7, r3, r1, r5
 8007c8a:	5dc7      	ldrb	r7, [r0, r7]
 8007c8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c90:	462f      	mov	r7, r5
 8007c92:	42bb      	cmp	r3, r7
 8007c94:	460d      	mov	r5, r1
 8007c96:	d9f4      	bls.n	8007c82 <_printf_i+0x11a>
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d10b      	bne.n	8007cb4 <_printf_i+0x14c>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	07df      	lsls	r7, r3, #31
 8007ca0:	d508      	bpl.n	8007cb4 <_printf_i+0x14c>
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	6861      	ldr	r1, [r4, #4]
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	bfde      	ittt	le
 8007caa:	2330      	movle	r3, #48	; 0x30
 8007cac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cb4:	1b92      	subs	r2, r2, r6
 8007cb6:	6122      	str	r2, [r4, #16]
 8007cb8:	f8cd a000 	str.w	sl, [sp]
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	aa03      	add	r2, sp, #12
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	f7ff fee2 	bl	8007a8c <_printf_common>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d14c      	bne.n	8007d66 <_printf_i+0x1fe>
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	b004      	add	sp, #16
 8007cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd6:	4835      	ldr	r0, [pc, #212]	; (8007dac <_printf_i+0x244>)
 8007cd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	680e      	ldr	r6, [r1, #0]
 8007ce0:	061f      	lsls	r7, r3, #24
 8007ce2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ce6:	600e      	str	r6, [r1, #0]
 8007ce8:	d514      	bpl.n	8007d14 <_printf_i+0x1ac>
 8007cea:	07d9      	lsls	r1, r3, #31
 8007cec:	bf44      	itt	mi
 8007cee:	f043 0320 	orrmi.w	r3, r3, #32
 8007cf2:	6023      	strmi	r3, [r4, #0]
 8007cf4:	b91d      	cbnz	r5, 8007cfe <_printf_i+0x196>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f023 0320 	bic.w	r3, r3, #32
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	2310      	movs	r3, #16
 8007d00:	e7b0      	b.n	8007c64 <_printf_i+0xfc>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f043 0320 	orr.w	r3, r3, #32
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	2378      	movs	r3, #120	; 0x78
 8007d0c:	4828      	ldr	r0, [pc, #160]	; (8007db0 <_printf_i+0x248>)
 8007d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d12:	e7e3      	b.n	8007cdc <_printf_i+0x174>
 8007d14:	065e      	lsls	r6, r3, #25
 8007d16:	bf48      	it	mi
 8007d18:	b2ad      	uxthmi	r5, r5
 8007d1a:	e7e6      	b.n	8007cea <_printf_i+0x182>
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	e7bb      	b.n	8007c98 <_printf_i+0x130>
 8007d20:	680b      	ldr	r3, [r1, #0]
 8007d22:	6826      	ldr	r6, [r4, #0]
 8007d24:	6960      	ldr	r0, [r4, #20]
 8007d26:	1d1d      	adds	r5, r3, #4
 8007d28:	600d      	str	r5, [r1, #0]
 8007d2a:	0635      	lsls	r5, r6, #24
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	d501      	bpl.n	8007d34 <_printf_i+0x1cc>
 8007d30:	6018      	str	r0, [r3, #0]
 8007d32:	e002      	b.n	8007d3a <_printf_i+0x1d2>
 8007d34:	0671      	lsls	r1, r6, #25
 8007d36:	d5fb      	bpl.n	8007d30 <_printf_i+0x1c8>
 8007d38:	8018      	strh	r0, [r3, #0]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	4616      	mov	r6, r2
 8007d40:	e7ba      	b.n	8007cb8 <_printf_i+0x150>
 8007d42:	680b      	ldr	r3, [r1, #0]
 8007d44:	1d1a      	adds	r2, r3, #4
 8007d46:	600a      	str	r2, [r1, #0]
 8007d48:	681e      	ldr	r6, [r3, #0]
 8007d4a:	6862      	ldr	r2, [r4, #4]
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7f8 fa56 	bl	8000200 <memchr>
 8007d54:	b108      	cbz	r0, 8007d5a <_printf_i+0x1f2>
 8007d56:	1b80      	subs	r0, r0, r6
 8007d58:	6060      	str	r0, [r4, #4]
 8007d5a:	6863      	ldr	r3, [r4, #4]
 8007d5c:	6123      	str	r3, [r4, #16]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d64:	e7a8      	b.n	8007cb8 <_printf_i+0x150>
 8007d66:	6923      	ldr	r3, [r4, #16]
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	47d0      	blx	sl
 8007d70:	3001      	adds	r0, #1
 8007d72:	d0ab      	beq.n	8007ccc <_printf_i+0x164>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	079b      	lsls	r3, r3, #30
 8007d78:	d413      	bmi.n	8007da2 <_printf_i+0x23a>
 8007d7a:	68e0      	ldr	r0, [r4, #12]
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	4298      	cmp	r0, r3
 8007d80:	bfb8      	it	lt
 8007d82:	4618      	movlt	r0, r3
 8007d84:	e7a4      	b.n	8007cd0 <_printf_i+0x168>
 8007d86:	2301      	movs	r3, #1
 8007d88:	4632      	mov	r2, r6
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	47d0      	blx	sl
 8007d90:	3001      	adds	r0, #1
 8007d92:	d09b      	beq.n	8007ccc <_printf_i+0x164>
 8007d94:	3501      	adds	r5, #1
 8007d96:	68e3      	ldr	r3, [r4, #12]
 8007d98:	9903      	ldr	r1, [sp, #12]
 8007d9a:	1a5b      	subs	r3, r3, r1
 8007d9c:	42ab      	cmp	r3, r5
 8007d9e:	dcf2      	bgt.n	8007d86 <_printf_i+0x21e>
 8007da0:	e7eb      	b.n	8007d7a <_printf_i+0x212>
 8007da2:	2500      	movs	r5, #0
 8007da4:	f104 0619 	add.w	r6, r4, #25
 8007da8:	e7f5      	b.n	8007d96 <_printf_i+0x22e>
 8007daa:	bf00      	nop
 8007dac:	080080a5 	.word	0x080080a5
 8007db0:	080080b6 	.word	0x080080b6

08007db4 <memmove>:
 8007db4:	4288      	cmp	r0, r1
 8007db6:	b510      	push	{r4, lr}
 8007db8:	eb01 0402 	add.w	r4, r1, r2
 8007dbc:	d902      	bls.n	8007dc4 <memmove+0x10>
 8007dbe:	4284      	cmp	r4, r0
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	d807      	bhi.n	8007dd4 <memmove+0x20>
 8007dc4:	1e43      	subs	r3, r0, #1
 8007dc6:	42a1      	cmp	r1, r4
 8007dc8:	d008      	beq.n	8007ddc <memmove+0x28>
 8007dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dd2:	e7f8      	b.n	8007dc6 <memmove+0x12>
 8007dd4:	4402      	add	r2, r0
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	d100      	bne.n	8007dde <memmove+0x2a>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007de6:	e7f7      	b.n	8007dd8 <memmove+0x24>

08007de8 <_free_r>:
 8007de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dea:	2900      	cmp	r1, #0
 8007dec:	d048      	beq.n	8007e80 <_free_r+0x98>
 8007dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df2:	9001      	str	r0, [sp, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dfa:	bfb8      	it	lt
 8007dfc:	18e4      	addlt	r4, r4, r3
 8007dfe:	f000 f8d3 	bl	8007fa8 <__malloc_lock>
 8007e02:	4a20      	ldr	r2, [pc, #128]	; (8007e84 <_free_r+0x9c>)
 8007e04:	9801      	ldr	r0, [sp, #4]
 8007e06:	6813      	ldr	r3, [r2, #0]
 8007e08:	4615      	mov	r5, r2
 8007e0a:	b933      	cbnz	r3, 8007e1a <_free_r+0x32>
 8007e0c:	6063      	str	r3, [r4, #4]
 8007e0e:	6014      	str	r4, [r2, #0]
 8007e10:	b003      	add	sp, #12
 8007e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e16:	f000 b8cd 	b.w	8007fb4 <__malloc_unlock>
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	d90b      	bls.n	8007e36 <_free_r+0x4e>
 8007e1e:	6821      	ldr	r1, [r4, #0]
 8007e20:	1862      	adds	r2, r4, r1
 8007e22:	4293      	cmp	r3, r2
 8007e24:	bf04      	itt	eq
 8007e26:	681a      	ldreq	r2, [r3, #0]
 8007e28:	685b      	ldreq	r3, [r3, #4]
 8007e2a:	6063      	str	r3, [r4, #4]
 8007e2c:	bf04      	itt	eq
 8007e2e:	1852      	addeq	r2, r2, r1
 8007e30:	6022      	streq	r2, [r4, #0]
 8007e32:	602c      	str	r4, [r5, #0]
 8007e34:	e7ec      	b.n	8007e10 <_free_r+0x28>
 8007e36:	461a      	mov	r2, r3
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	b10b      	cbz	r3, 8007e40 <_free_r+0x58>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d9fa      	bls.n	8007e36 <_free_r+0x4e>
 8007e40:	6811      	ldr	r1, [r2, #0]
 8007e42:	1855      	adds	r5, r2, r1
 8007e44:	42a5      	cmp	r5, r4
 8007e46:	d10b      	bne.n	8007e60 <_free_r+0x78>
 8007e48:	6824      	ldr	r4, [r4, #0]
 8007e4a:	4421      	add	r1, r4
 8007e4c:	1854      	adds	r4, r2, r1
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	d1dd      	bne.n	8007e10 <_free_r+0x28>
 8007e54:	681c      	ldr	r4, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	6053      	str	r3, [r2, #4]
 8007e5a:	4421      	add	r1, r4
 8007e5c:	6011      	str	r1, [r2, #0]
 8007e5e:	e7d7      	b.n	8007e10 <_free_r+0x28>
 8007e60:	d902      	bls.n	8007e68 <_free_r+0x80>
 8007e62:	230c      	movs	r3, #12
 8007e64:	6003      	str	r3, [r0, #0]
 8007e66:	e7d3      	b.n	8007e10 <_free_r+0x28>
 8007e68:	6825      	ldr	r5, [r4, #0]
 8007e6a:	1961      	adds	r1, r4, r5
 8007e6c:	428b      	cmp	r3, r1
 8007e6e:	bf04      	itt	eq
 8007e70:	6819      	ldreq	r1, [r3, #0]
 8007e72:	685b      	ldreq	r3, [r3, #4]
 8007e74:	6063      	str	r3, [r4, #4]
 8007e76:	bf04      	itt	eq
 8007e78:	1949      	addeq	r1, r1, r5
 8007e7a:	6021      	streq	r1, [r4, #0]
 8007e7c:	6054      	str	r4, [r2, #4]
 8007e7e:	e7c7      	b.n	8007e10 <_free_r+0x28>
 8007e80:	b003      	add	sp, #12
 8007e82:	bd30      	pop	{r4, r5, pc}
 8007e84:	20000428 	.word	0x20000428

08007e88 <_malloc_r>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	1ccd      	adds	r5, r1, #3
 8007e8c:	f025 0503 	bic.w	r5, r5, #3
 8007e90:	3508      	adds	r5, #8
 8007e92:	2d0c      	cmp	r5, #12
 8007e94:	bf38      	it	cc
 8007e96:	250c      	movcc	r5, #12
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	db01      	blt.n	8007ea2 <_malloc_r+0x1a>
 8007e9e:	42a9      	cmp	r1, r5
 8007ea0:	d903      	bls.n	8007eaa <_malloc_r+0x22>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eaa:	f000 f87d 	bl	8007fa8 <__malloc_lock>
 8007eae:	4921      	ldr	r1, [pc, #132]	; (8007f34 <_malloc_r+0xac>)
 8007eb0:	680a      	ldr	r2, [r1, #0]
 8007eb2:	4614      	mov	r4, r2
 8007eb4:	b99c      	cbnz	r4, 8007ede <_malloc_r+0x56>
 8007eb6:	4f20      	ldr	r7, [pc, #128]	; (8007f38 <_malloc_r+0xb0>)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	b923      	cbnz	r3, 8007ec6 <_malloc_r+0x3e>
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f000 f862 	bl	8007f88 <_sbrk_r>
 8007ec4:	6038      	str	r0, [r7, #0]
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 f85d 	bl	8007f88 <_sbrk_r>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	d123      	bne.n	8007f1a <_malloc_r+0x92>
 8007ed2:	230c      	movs	r3, #12
 8007ed4:	6033      	str	r3, [r6, #0]
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f000 f86c 	bl	8007fb4 <__malloc_unlock>
 8007edc:	e7e3      	b.n	8007ea6 <_malloc_r+0x1e>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	1b5b      	subs	r3, r3, r5
 8007ee2:	d417      	bmi.n	8007f14 <_malloc_r+0x8c>
 8007ee4:	2b0b      	cmp	r3, #11
 8007ee6:	d903      	bls.n	8007ef0 <_malloc_r+0x68>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	441c      	add	r4, r3
 8007eec:	6025      	str	r5, [r4, #0]
 8007eee:	e004      	b.n	8007efa <_malloc_r+0x72>
 8007ef0:	6863      	ldr	r3, [r4, #4]
 8007ef2:	42a2      	cmp	r2, r4
 8007ef4:	bf0c      	ite	eq
 8007ef6:	600b      	streq	r3, [r1, #0]
 8007ef8:	6053      	strne	r3, [r2, #4]
 8007efa:	4630      	mov	r0, r6
 8007efc:	f000 f85a 	bl	8007fb4 <__malloc_unlock>
 8007f00:	f104 000b 	add.w	r0, r4, #11
 8007f04:	1d23      	adds	r3, r4, #4
 8007f06:	f020 0007 	bic.w	r0, r0, #7
 8007f0a:	1ac2      	subs	r2, r0, r3
 8007f0c:	d0cc      	beq.n	8007ea8 <_malloc_r+0x20>
 8007f0e:	1a1b      	subs	r3, r3, r0
 8007f10:	50a3      	str	r3, [r4, r2]
 8007f12:	e7c9      	b.n	8007ea8 <_malloc_r+0x20>
 8007f14:	4622      	mov	r2, r4
 8007f16:	6864      	ldr	r4, [r4, #4]
 8007f18:	e7cc      	b.n	8007eb4 <_malloc_r+0x2c>
 8007f1a:	1cc4      	adds	r4, r0, #3
 8007f1c:	f024 0403 	bic.w	r4, r4, #3
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d0e3      	beq.n	8007eec <_malloc_r+0x64>
 8007f24:	1a21      	subs	r1, r4, r0
 8007f26:	4630      	mov	r0, r6
 8007f28:	f000 f82e 	bl	8007f88 <_sbrk_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d1dd      	bne.n	8007eec <_malloc_r+0x64>
 8007f30:	e7cf      	b.n	8007ed2 <_malloc_r+0x4a>
 8007f32:	bf00      	nop
 8007f34:	20000428 	.word	0x20000428
 8007f38:	2000042c 	.word	0x2000042c

08007f3c <_realloc_r>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	4607      	mov	r7, r0
 8007f40:	4614      	mov	r4, r2
 8007f42:	460e      	mov	r6, r1
 8007f44:	b921      	cbnz	r1, 8007f50 <_realloc_r+0x14>
 8007f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	f7ff bf9c 	b.w	8007e88 <_malloc_r>
 8007f50:	b922      	cbnz	r2, 8007f5c <_realloc_r+0x20>
 8007f52:	f7ff ff49 	bl	8007de8 <_free_r>
 8007f56:	4625      	mov	r5, r4
 8007f58:	4628      	mov	r0, r5
 8007f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5c:	f000 f830 	bl	8007fc0 <_malloc_usable_size_r>
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d20f      	bcs.n	8007f84 <_realloc_r+0x48>
 8007f64:	4621      	mov	r1, r4
 8007f66:	4638      	mov	r0, r7
 8007f68:	f7ff ff8e 	bl	8007e88 <_malloc_r>
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d0f2      	beq.n	8007f58 <_realloc_r+0x1c>
 8007f72:	4631      	mov	r1, r6
 8007f74:	4622      	mov	r2, r4
 8007f76:	f7ff fbdd 	bl	8007734 <memcpy>
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f7ff ff33 	bl	8007de8 <_free_r>
 8007f82:	e7e9      	b.n	8007f58 <_realloc_r+0x1c>
 8007f84:	4635      	mov	r5, r6
 8007f86:	e7e7      	b.n	8007f58 <_realloc_r+0x1c>

08007f88 <_sbrk_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d06      	ldr	r5, [pc, #24]	; (8007fa4 <_sbrk_r+0x1c>)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	602b      	str	r3, [r5, #0]
 8007f94:	f7f9 f87e 	bl	8001094 <_sbrk>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_sbrk_r+0x1a>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_sbrk_r+0x1a>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	200016ac 	.word	0x200016ac

08007fa8 <__malloc_lock>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <__malloc_lock+0x8>)
 8007faa:	f000 b811 	b.w	8007fd0 <__retarget_lock_acquire_recursive>
 8007fae:	bf00      	nop
 8007fb0:	200016b4 	.word	0x200016b4

08007fb4 <__malloc_unlock>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	; (8007fbc <__malloc_unlock+0x8>)
 8007fb6:	f000 b80c 	b.w	8007fd2 <__retarget_lock_release_recursive>
 8007fba:	bf00      	nop
 8007fbc:	200016b4 	.word	0x200016b4

08007fc0 <_malloc_usable_size_r>:
 8007fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc4:	1f18      	subs	r0, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bfbc      	itt	lt
 8007fca:	580b      	ldrlt	r3, [r1, r0]
 8007fcc:	18c0      	addlt	r0, r0, r3
 8007fce:	4770      	bx	lr

08007fd0 <__retarget_lock_acquire_recursive>:
 8007fd0:	4770      	bx	lr

08007fd2 <__retarget_lock_release_recursive>:
 8007fd2:	4770      	bx	lr

08007fd4 <_init>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr

08007fe0 <_fini>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	bf00      	nop
 8007fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe6:	bc08      	pop	{r3}
 8007fe8:	469e      	mov	lr, r3
 8007fea:	4770      	bx	lr
